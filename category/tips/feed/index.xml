<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>tips &#8211; jeromecukier.net</title>
	<atom:link href="http://localhost/category/tips/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Just another WordPress site</description>
	<lastBuildDate>Wed, 17 Aug 2016 05:36:39 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.10</generator>
	<item>
		<title>Beyond rendering</title>
		<link>/2016/08/13/beyond-rendering/</link>
		<comments>/2016/08/13/beyond-rendering/#respond</comments>
		<pubDate>Fri, 12 Aug 2016 23:41:36 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[d3]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://www.jeromecukier.net/?p=1758</guid>
		<description><![CDATA[This is the 5th post in my Visualization with React series. Previous post: React components The lifecycle functions I&#8217;m not going to go into great details on this, but a talk on React without mentioning the lifecycle functions would not be complete. React components come with several functions which are fired when certain events occur, <a class="read-more" href="/2016/08/13/beyond-rendering/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>This is the 5th post in my <a href="http://wp.me/po630-rq">Visualization with React</a> series. Previous post: <a href="http://wp.me/po630-sg">React components</a></p>
<h1>The lifecycle functions</h1>
<p>I&#8217;m not going to go into great details on this, but a talk on React without mentioning the <a href="https://facebook.github.io/react/docs/component-specs.html">lifecycle functions</a> would not be complete.<br />
React components come with several functions which are fired when certain events occur, such as when the component is first created (&#8216;mounts&#8217;), when it&#8217;s updated or when it&#8217;s removed (&#8216;unmounts&#8217;).<br />
Pure functional components, which we&#8217;ve been mostly using, don&#8217;t have lifecycle functions.<br />
But components with a state can have them.</p>
<p>Some examples of usage of those lifecycle functions include: </p>
<ul>
<li>Before the component is rendered, you can load data. that&#8217;s a job for &#8216;componentWillMount&#8217;.</li>
<li>After a component is rendered, you can animate it, or add an event listener. Use &#8216;componentDidMount&#8217;. </li>
<li>Prevent a component from rendering under certain circumstances, even if it receives new properties or its state changes. Use &#8216;shouldComponentUpdate&#8217;. </li>
<li>After a component receives new props or new state, you can trigger another function before the component updates (&#8216;componentWillUpdate&#8217;) or right after (&#8216;componentDidUpdate&#8217;). </li>
<li>When a component is going to be removed, you can do some cleanups, like deleting event listeners. Use &#8216;componentWillUnmount&#8217;. </li>
</ul>
<p>Oftentimes, you can simply get by by using the default behavior of React components, which re-render only when they receive different properties or when their state changes. But it can be really convenient to have that extra degree of control.</p>
<p>Here is an example of using these lifecycle functions in context.</p>
<p data-height="400" data-theme-id="0" data-slug-hash="Vjxywz" data-default-tab="result" data-user="jckr" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/jckr/pen/Vjxywz/">lifecycle functions example</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>What is going on there?<br />
We&#8217;re adapting our earlier <a href="http://codepen.io/jckr/pen/BzKVJq">scatterplot</a> example, only this time, we are not using pure functional components (which don&#8217;t have those lifecycle functions), but creating classes.<br />
We&#8217;re going to have three classes: Chart, at the highest level; Scatterplot, a child of Chart; and Points.<br />
Chart passes data to Scatterplot. What it passes depends on whether the button is clicked. That button changes the state of Chart (which causes a rerendering of the Scatterplot and the Point elements).<br />
Chart also has a private variable that holds a message we can display on top. We can still use callback functions to change this variable, just like we change the state, but the difference between changing the state and changing a private variable is that changing a private variable doesn&#8217;t cause the children to re-render.<br />
When we first create the scatterplot element, the componentDidMount function is called, and the message is changed to reflect that.<br />
Then, each time we click the button, a different data property is passed to the Scatterplot element. Also, the componentDidUpdate method is triggered, which changes the message.<br />
(changing the state of the parent from a componentDidUpdate method can cause an endless re-rendering loop, this is why I used private variables instead of the state, and there are ways to address this but for the sake of brevity this is the easiest way to deal with that problem).<br />
Now, when a full dataset is passed to the Scatterplot element, many Point elements will be created. I&#8217;ve also added a lifecycle method to these Points: when they are first created, they receive a small animation. To that end, I have also used the componentDidMount method, but this time at the Point level.<br />
Exit animations are also possible, but &#8211; full disclosure &#8211; they are less easy to implement in React than entry animations, or than in D3. So again in the interest of concision I&#8217;ll skip these for now.</p>
<h1>React and D3</h1>
<p>We just saw that with React, we can create a DOM element, then immediately after, call a function to do whatever we want, such as manipulating that element. That function would have access to all the properties and state of that React element.<br />
So what prevents us from combining React and D3? Nothing!<br />
We can create components that are, essentially, an SVG element, then use componentDidMount to perform D3 magic on that element.<br />
Here&#8217;s an example:</p>
<p data-height="600" data-theme-id="0" data-slug-hash="BzxbPY" data-default-tab="result" data-user="jckr" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/jckr/pen/BzxbPY/">mixing react and d3</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>In that example, I have used a bona fide bl.ocks (<a href="https://bl.ocks.org/mbostock/7881887">https://bl.ocks.org/mbostock/7881887</a>) and wrapped it inside a React component. So I can create one, or in the case of that example, several such elements by just passing properties. Those components can perfectly function as black boxes: we give them properties, they give us visualizations that correspond to these parameters. And it doesn&#8217;t have to be D3 &#8211; once a React element has been created, we can use componentDidMount to do all kinds of operations on it. </p>
<p>In the last 2 articles I will present actual data visualization web apps made with React.<br />
In the next post, we&#8217;ll see how to set up a simple web app and we&#8217;ll create our <a href="http://wp.me/po630-sp">first example app</a>. </p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/13/beyond-rendering/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Coding with React</title>
		<link>/2016/08/10/coding-with-react/</link>
		<comments>/2016/08/10/coding-with-react/#respond</comments>
		<pubDate>Wed, 10 Aug 2016 19:16:47 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[d3]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://www.jeromecukier.net/?p=1739</guid>
		<description><![CDATA[This article is part of my series Visualization with React. Previous article: An ES6 primer Setting things up in Codepen In the last two articles of the series, I&#8217;ll cover how to get a real React coding environment going, but to start dabbling, playgrounds like jsFiddle or codepen are great. I&#8217;m partial to codepen. When <a class="read-more" href="/2016/08/10/coding-with-react/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script>This article is part of my series <a href="http://wp.me/po630-rQ">Visualization with React</a>. Previous article: <a href="http://wp.me/po630-rX">An ES6 primer</a></p>
<h1>Setting things up in Codepen</h1>
<p>In the last two articles of the series, I&#8217;ll cover how to get a real React coding environment going, but to start dabbling, playgrounds like <a href="https://jsfiddle.net/reactjs/69z2wepo/">jsFiddle</a> or <a href="http://codepen.io/">codepen</a> are great. I&#8217;m partial to codepen. When you create a new pen, you still have a couple of options to set up before you can start creating React code: <img src="http://jeromecukier.net/assets/visualization-with-react/react-settings-in-codepen.png" alt="" /></p>
<p>In the Settings / Javascript / quick-add section (the drop-down at the bottom left) please choose React, then React DOM.</p>
<p>All of the code examples of articles 1, 3, 4, and 5 can be found in this <a href="http://codepen.io/collection/XdEpyp/">codepen collection</a>.</p>
<h1>Creating elements</h1>
<p class="codepen" data-height="265" data-theme-id="0" data-slug-hash="pbjpOm" data-default-tab="result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/pbjpOm/">React simple scatterplot</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>In this first React example, we&#8217;re going to create a couple of very simple elements and render them. Let&#8217;s start by the end: <code>ReactDOM.render(myDiv, document.querySelector('#root'));</code> We use ReactDOM.render to, well, render something we have created (myDiv) somewhere in our document (on top of what corresponds to the &#8216;#root&#8217; selection. We conveniently have a div with the id &#8220;root&#8221; in the HTML part of the pen). That&#8217;s it! we&#8217;ve output something using React. While the syntax can appear a bit daunting, it really does one simple thing: take what you&#8217;ve made and put it where it should be. But what&#8217;s that myDiv? To find out, let&#8217;s look at the first 2 lines of our code. <code>const mySpan = React.createElement('span', {style: {fontFamily: 'sans-serif'}}, 'hello React world'); const myDiv = React.createElement('div', {className: 'my-div'}, mySpan);</code> Oh, so before there was a myDiv, there was a mySpan. MySpan is a React element, the building brick of the React eco system. To create it, we use React.createElement which is the workhorse of React. React.createElement takes three arguments: the type of React element we are creating, its properties, and its content. The type of element can be any HTML or SVG element, and we&#8217;ll see later that we can also make our own. The second argument is the properties. It&#8217;s an object. In the d3 world, the properties could be what goes in the attr method. So when you create an SVG element like a rect, its properties could include things like x, y, width and height. In d3, style is treated slightly differently. This is also the case in React. When using React.createElement with an HTML or SVG element, that could be styled using CSS, you can use a style property to pass a style object. That style object contains all CSS properties you want to apply to the object, but instead of hyphenating them, they are written in camel case (so font-family, for instance, becomes fontFamily). The third argument is content: it can either be a string, a single React element, or an array of React elements. In the first line (mySpan) we&#8217;ve used a string. So, this first line created a React element which is a span, which contains &#8220;hello React world&#8221;, and which has a simple style applied to it. In the second line, we create a second React element. Again, React.createElement takes three arguments: type of element (now it&#8217;s an HTML div), properties and content. Instead of providing a string, we can pass another React element, such as mySpan that we created above. And that&#8217;s it! we&#8217;ve rendered something using react.</p>
<h1>Creating elements from data</h1>
<p>In the example above, we&#8217;ve used React.createElement with two kind of content: a string and another React element. But I mentioned that there was a third possibility: an array of React elements. If you&#8217;re familiar with d3, you might think: in d3, I could do that from an array of data. The idea in React is pretty similar, only, instead of using select / selectAll / data / enter / append, we can just create our array.</p>
<p class="codepen" data-height="350" data-theme-id="0" data-slug-hash="ezZrOM" data-default-tab="result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/ezZrOM/">React simple scatterplot</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>One simple way to do that is to use map: <code>myArray.map(d =&gt; React.createElement(...))</code>. This is exactly what we are doing in the snippet of code above. This uses the birthdeathrates dataset, one of the example files provided with R (number of births and deaths per thousand people per year in various countries.) The interestingness happens here:</p>
<pre class="brush: jscript; title: ; notranslate">birthdeathrates.map(
  (d, i) =&gt; React.createElement('div', {
    'key': i,
    'style': {
       background: '#222',
       borderRadius: 5,
       height: 10,
       left: 5 * d.birth,
       top: 300 - 5 * d.death,
       position: 'absolute',
       width: 10,
       opacity: .2}
  })
)</pre>
<p>In the properties that I pass, some depend on the underlying data. This is a mapping so it&#8217;s going to return something for each item of the array. Each item of the array is represented by d, and has the birth, death and country properties. In left and top, we use a calculation based on these properties. And for each item, we get a React element created with these calculations. This isn&#8217;t unlike what we&#8217;d had in d3 if we had written:</p>
<pre class="brush: jscript; title: ; notranslate"> ...
 .selectAll('div')
 .data(birthdeathrates)
 .enter()
 .append('div')
 .style({ ..., left: d =&gt; 5 * d.birth, top: d =&gt; 300 - 5 * d.death, ...})
</pre>
<p>Take note of the key property in the react code. This is necessary when you create many elements using map (well not really necessary but strongly recommended, you&#8217;d get a warning if you don&#8217;t use it). This is used so that if for some reason your parent element has to re-render, each child element will only be re-rendered if needed. If you&#8217;ve followed this far, you are now capable of doing things in React the critical part of what you were doing with d3: creating elements out of data. You might wonder: but does it work for svg? yes, and the logic is exactly the same:</p>
<p class="codepen" data-height="373" data-theme-id="0" data-slug-hash="MeyVLE" data-default-tab="result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/MeyVLE/">React simple scatterplot</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<h1>Introducing JSX</h1>
<p data-height="373" data-theme-id="0" data-slug-hash="YWqLwz" data-default-tab="result" data-user="jckr" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/jckr/pen/YWqLwz/">React simple scatterplot JSX</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>At this point you might think: all of this is great, but typing React.createElement all the time is kind of cumbersome. Many people do too, and there are a number of ways to not do that. The most popular, and the one in use at Facebook, is JSX. I personally use <a title="r-dom" href="http://https://github.com/uber/r-dom">r-dom</a> most of the time, but since JSX is definitely the most common way to write React, now that you have a feel for what React.createElement does, it&#8217;s not unreasonable to continue with JSX.</p>
<p>The main idea of JSX is that you&#8217;ll write tags in your javascript. Instead of writing:</p>
<pre class="brush: jscript; title: ; notranslate">
React.createElement('type', {property1: value1, property2: value2, ...}, content)
</pre>
<p>you would write:</p>
<pre class="brush: plain; title: ; notranslate">
&lt;type property1={value1} property2={value2} ...&gt;
content
&lt;/type&gt;
</pre>
<p>So in our previous example, we create an SVG element that has a width and a height property.<br />
We&#8217;d write:</p>
<pre class="brush: jscript; title: ; notranslate">
const svg = &lt;svg height={300} width={300}&gt;
//... content ...
&lt;/svg&gt;
</pre>
<p>Inside the opening tag, we list all the properties and we give them a value. This isn&#8217;t unlike what you&#8217;d see when you watch the source of an HTML file.<br />
The value of the properties go inside curly braces, unless they are a string. For length-type values (ie height, width, top, left, font-size&#8230;) if a number is provided, it&#8217;s assumed it&#8217;s in px.<br />
If the element we create has other elements inside of it, there has to be an opening and a closing tag (ie &lt;element&gt; and &lt;/element&gt;). But if there isn&#8217;t, there can be a single tag (ie &lt;element /&gt;)<br />
Inside our svg, we have a bunch of circle elements. They are of the form:</p>
<pre class="brush: plain; title: ; notranslate">
&lt;circle 
  cx={5 * d.birth}
  cy={300 - 5 * d.death}
  key={i}
  r={5}
  style={{
    fill: '#222',
    opacity: .2
  }}
/&gt;</pre>
<p>inside our curly braces, we can have calculations. And since there are no elements inside our circles, we don&#8217;t have to have both a &lt;cirlce&gt; and a &lt;/circle&gt; tag, although we could; we can have a single &lt;circle /&gt; tag.</p>
<p>That&#8217;s it in a nutshell, more details can be found <a title="here" href="https://facebook.github.io/react/docs/jsx-in-depth.html">here.</a><br />
Now you might think: if I type that in my text editor, I&#8217;m almost certain I&#8217;ll get an error! Indeed, behind the scenes, there has to be some transformation for your browser to understand JSX. This magical operation is called <em>transpilation</em>. Transpilation is just what you&#8217;d hope it is, it turns code written how you like into code that the browser can interpret flawlessly. The flip side is that&#8230; well, you have to transpile your code.<br />
If you work into environments like codepen or JsFiddle, they can take care of this for you. The most common transpiler is Babel. Babel turns your code into ES2015 compliant javascript (that is, before ES6). So the added bonus is that we can use any ES6 feature without wondering whether the user browser supports it or not. Most ES6 features are supported by the latest versions of many browswers, but there&#8217;s no guarantee that your users will run your favorite browser, let alone its latest version.<br />
If you want to do this on your own, you&#8217;ll have to set up a build environment, we&#8217;ll cover this in the last two articles.</p>
<p>&nbsp;</p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/10/coding-with-react/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>D3 and React &#8211; similarities and differences</title>
		<link>/2016/08/09/d3-and-react-similarities-and-differences/</link>
		<comments>/2016/08/09/d3-and-react-similarities-and-differences/#comments</comments>
		<pubDate>Tue, 09 Aug 2016 04:13:37 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[d3]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://www.jeromecukier.net/?p=1722</guid>
		<description><![CDATA[Previous article: Visualization with React d3, meet cousin React Let&#8217;s not sugarcoat it: working with React is more complicated than with plain vanilla javascript. There are a few additional notions which may sound complex. But the good news is that if you come from the d3 world, there are many concepts which are similar. Visualization <a class="read-more" href="/2016/08/09/d3-and-react-similarities-and-differences/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script><br />
<a href="http://wp.me/po630-rr">Previous article: Visualization with React</a></p>
<h1>d3, meet cousin React</h1>
<p>Let&#8217;s not sugarcoat it: working with React is more complicated than with plain vanilla javascript. There are a few additional notions which may sound complex. But the good news is that if you come from the d3 world, there are many concepts which are similar. Visualization on the web is, at its core,<strong> transforming a dataset into a representation</strong>. That dataset is probably going to be an array, and at some point the framework will loop through the array and create something for each element of the array. For instance, if you want to make a bar chart, you probably will have at some point an array with one item that corresponds to each bar, which has a value that corresponds to its length. Looping through the array, each item is turned into a rectangle whose height depends on that value. That logic, which is at the core of d3 with <a href="http://www.jeromecukier.net/blog/2013/03/05/d3-tutorial-at-strata-redux/">selections</a>, is also present in React. In d3, <strong>visualizations are essentially hierarchical.</strong> We start from an SVG element (probably), add to it elements like groups, which can hold other elements. To continue with our bar chart example, our chart will have several data marks attached to it (the bars), and there&#8217;s a hierarchical relation between them: the chart contains those marks. Our chart could be part of a dashboard that has several charts, or part of a web page that has other information. At any rate, in the d3 world, everything we create is added to a root element or to elements we create and arranged in a tree-like hierarchy. This is also the case in React, with a difference: the world of React is mostly structured into components. When that of d3 is mostly made of DOM elements like HTML or SVG elements, that of React is made of components. A React component is a part of your end result. It can be as small as a DOM element, or as big as the whole application. And it can have component children. So, components are logical ways to package your application. Components are created with modularity and reusability in mind. For instance, I can create a bar chart component in React, and the next time I have a bar chart to make, I can just reuse the exact same component. I can also create components to make axes or the individual bars in the chart, which my bar chart component will use. But the next time I need a bar chart, I wouldn&#8217;t have to think about it. In contrast, if I want to create another bar chart in d3, I probably have to recreate it from scratch and decide manually what happens to all the SVG or HTML elements that constitute the bar chart.</p>
<h1>You say dAYta, I say da-tah</h1>
<p>One fundamental way in which d3 and React differ is by how they treat data. If you read about React, you may find fancy terms like one-way data binding. In how many ways the data is bound in d3 is not something which is on top of our head when we create visualization so that might sound confusing. In d3, an element can modify the data which is associated to it. I&#8217;ve used it so many times.</p>
<p class="codepen" data-height="265" data-theme-id="0" data-slug-hash="XKmpYo" data-default-tab="result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/XKmpYo/">React simple scatterplot</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>These bars have been made with a very simple dataset shown below them. If you click on the bars, the underlying data will change and the representation will change as well. In the world of React, when properties are passed to a component, they cannot be changed. That&#8217;s what one-way binding means. Data in React flows unidirectionally. Once it&#8217;s defined, it determines the way all components should be displayed. In certain events, a parent component can pass different properties to its children component and they may be re-rendered (we&#8217;ll see this in just a moment). But the important part is that properties passed to a component can never be changed. You may wonder: why is that even a good thing? React makes it impossible to do things! yes, but in the process it also makes things much safer. If properties can&#8217;t be changed, it also means that they can&#8217;t be altered by something we hadn&#8217;t thought of. Also, it makes it much easier to work on components independently: one team mate could make a bar chart component while her colleague makes a line chart. They don&#8217;t really need to know the inner working of the other component, and they know that nothing unexpected will disturb the way their component function.</p>
<h1>The state of affairs</h1>
<p>Components of React have a really powerful feature which doesn&#8217;t explicitly exist in d3: the state. The state represents the current status of a component. Here&#8217;s a simple switch component:</p>
<p class="codepen" data-height="265" data-theme-id="0" data-slug-hash="mEeRvr" data-default-tab="result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/mEeRvr/">React simple scatterplot</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>We want to record the fact that the switch can be turned on or off. Here&#8217;s how it should work: First we create our switch component, and it&#8217;s supposed to be off. Then, if the user clicks it, it becomes on if it were off and vice-versa. And it should also be redrawn, to reflect that it&#8217;s been turned on (or off). The state does all that. It records the current status of the component. Technically, it&#8217;s an object with properties, so it can save a lot of information, not just a simple true or false value. The other great thing about the state is that if it changes, then the component is re-rendered. Rendering a component could require rendering children component, and they may be re-rendered as well. So with the state and properties, we have a powerful framework to handle events and whatever may happen to our app. If there&#8217;s an event we care about, it can change the state of a component, then, all of the children components may be re-rendered. And there&#8217;s no other way to redraw them. This is in contrast with plain d3 where anything goes &#8211; anything can change anything, data can be used to render elements, the underlying data can be changed without changing the element, the element can be transformed without changing the underlying data.</p>
<p>State is an important notion in computer science. In d3, it&#8217;s just doesn&#8217;t have a more formal representation than all the variables in your code.</p>
<p>In the next article in the series, <a href="http://wp.me/po630-rX">an ES6 Primer</a>, we will look in some useful ES6 features for React. </p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/09/d3-and-react-similarities-and-differences/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Visualization with React</title>
		<link>/2016/08/09/visualization-with-react/</link>
		<comments>/2016/08/09/visualization-with-react/#comments</comments>
		<pubDate>Tue, 09 Aug 2016 04:07:56 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[d3]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://www.jeromecukier.net/?p=1726</guid>
		<description><![CDATA[Some back story&#8230; In what seemed a lifetime ago now, I wrote tutorials to help people get started with Protovis as I learned it myself (it is indeed a lifetime away since Protovis is dead and buried for all intents and purposes). And a few years ago, I did the same for d3 as this <a class="read-more" href="/2016/08/09/visualization-with-react/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<h1>Some back story&#8230;</h1>
<p>In what seemed a lifetime ago now, I wrote tutorials to help people get started with Protovis as I learned it myself (it is indeed a lifetime away since Protovis is dead and buried for all intents and purposes). And a few years ago, I did the same for d3 as this started to become the most powerful visualization framework and for which documentation was still scarce. I wrote these tutorials to help me learn, but since then I have met many people who found them useful which blew my mind. By documenting my learning, I got noticed by Facebook and travelled 9000 miles to a new life.</p>
<p>At Facebook, I had some loosely-defined data visualization explorer role. While I joined during the infancy of React, I didn&#8217;t feel super comfortable using it then &#8211; I felt more effective writing one-off d3 applications. Eventually, I moved on and am now working at Uber as a fully-fledged <a href="https://eng.uber.com/data-viz-intel/">data visualization engineer</a>. I work almost exclusively with dashboards, which have a pretty elaborate UI.</p>
<p>Like in many other companies, at Uber, we use React for our web applications, including our visualizations, dashboards and maps. Increasingly, React is becoming the lingua franca of visualization: more than a tool that allows one to draw data, a mindset that informs how one should think a visualization. React is no longer a young library &#8211; the initial public release dates back from May 2013, and its very first application at Facebook was visualization (my first Facebook project, pages insights). There&#8217;s already many, many learning resources and tutorials for React. What I&#8217;ll try to do here is to show how React can be used for visualization: hopefully, this will be useful both for people who come from d3 and who&#8217;ve never worked with a web framework before, and for people who are familiar with React but who don&#8217;t know visualization well. That won&#8217;t be a complete and exhaustive guide, more a way to get started with references on how to go further.</p>
<h1>The articles</h1>
<p>I&#8217;ve structured this guide in 7 parts, and I&#8217;ll publish one per day:</p>
<ol>
<li><a href="http://www.jeromecukier.net/blog/2016/08/09/d3-and-react-similarities-and-differences/">React vs D3</a>, where we&#8217;ll explore similarities and differences between these two frameworks.</li>
<li><a href="http://wp.me/po630-rX">An ES6 primer</a>. I have written all the examples in good, sensible, modern ES6 javascript, because as of 2016 this is probably the most common syntax. Without going too deep into the details, I&#8217;ll explain what parts of the language I used for the examples, and how they differ from ES5.</li>
<li>Gentle introduction to <a href="http://wp.me/po630-s3">coding with React</a>, where we&#8217;ll explore the high-level concepts of the framework and see how we can create visual elements from data. We&#8217;ll end on a presentation of JSX, a flavor of Javascript used to write React applications, which I&#8217;ll also use for most of the examples for the same reasons as ES6 &#8211; because it&#8217;s the most widespread way of writing React code today.</li>
<li><a href="http://wp.me/po630-sg">React components</a>, the most important concept in React and the building blocks of React applications.</li>
<li><a href="http://wp.me/po630-sm">Beyond rendering</a>. We&#8217;ll look at the React concept of lifecycle methods, and also how we can use d3 within React components.</li>
<li><a href="http://wp.me/po630-st">Creating a React visualization web app</a> &#8211; using what we&#8217;ve seen, and two libraries &#8211; Facebook&#8217;s <a href="https://github.com/facebookincubator/create-react-app">create-react-app</a> and Uber&#8217;s <a href="https://github.com/uber/react-vis/">React-vis</a>, we&#8217;ll create a small standalone React visualization that can be deployed on its own website.</li>
<li><a href="http://wp.me/po630-st">The big leagues</a> &#8211; in that last part, we&#8217;ll write together a more complex visualization with live data and several components interacting with one another.</li>
</ol>
<h1>The code</h1>
<p>The examples of parts 1-5 can be found on <a href="http://codepen.io/collection/XdEpyp/">codepen</a>. I&#8217;ll add link to examples of part 6 and 7 when they go live.</p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/09/visualization-with-react/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>You may not need d3</title>
		<link>/2015/05/19/you-may-not-need-d3/</link>
		<comments>/2015/05/19/you-may-not-need-d3/#comments</comments>
		<pubDate>Tue, 19 May 2015 21:15:56 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[charts]]></category>
		<category><![CDATA[d3]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[tips]]></category>
		<category><![CDATA[canvas]]></category>
		<category><![CDATA[d3js]]></category>
		<category><![CDATA[DOM]]></category>
		<category><![CDATA[library]]></category>
		<category><![CDATA[svg]]></category>

		<guid isPermaLink="false">http://www.jeromecukier.net/?p=1664</guid>
		<description><![CDATA[If you&#8217;re working on visualization on the web, the go-to choice is to use d3js (or a higher-level library). d3js is powerful and versatile. The best proof of that is the lead author of d3, Mike Bostock, worked until recently at the New York Times which many, including myself, consider the ultimate reference in terms of <a class="read-more" href="/2015/05/19/you-may-not-need-d3/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>If you&#8217;re working on visualization on the web, the go-to choice is to use <a href="http://d3js.org/">d3js</a> (or a higher-level library). d3js is powerful and versatile. The best proof of that is the lead author of d3, Mike Bostock, worked until recently at the New York Times which many, including myself, consider the ultimate reference in terms of information graphics. At the NYT and elsewhere, d3js has powered breathtaking projects.</p>
<p>d3js was built as a successor to protovis. Protovis was a slightly higher-level library than d3js, more specialized in data graphics, and designed with the assumption that it could be used with little or no programming experience. And indeed this was true. When I started using protovis in 2009, my javascript skills were limited, and so I learned by deconstructing and recombining the examples. I kept on doing that when d3 came along &#8211; learning through examples. And the d3 examples, like those in protovis before, were short and standalone, demonstrating how easy it was to create something with a few lines of code.</p>
<p>d3js requires more technical knowledge than protovis did to get started, but not much. However, it is much more versatile &#8211; no longer constrained to charts and maps, it can handle a lot of the front-end functionalities of a web site. And so, it is possible to make visualizations by:</p>
<ul>
<li>learning how to do stuff in d3js,</li>
<li>learning the essential javascript that you need to run d3js, as needed (i.e. variables, if-then statements, array methods&#8230;)</li>
<li>then, learning through doing, and obtain a feeling for how SVG, HTML and the Document Object Model works.</li>
</ul>
<p>This approach is actually very limiting.</p>
<p>You would create much more robust code by:</p>
<ul>
<li>learning javascript,</li>
<li>learning SVG/HTML/DOM,</li>
<li>then learning and appreciate d3 logic.</li>
</ul>
<p>That would give you the choice when to use a d3js method, when to use another library (past, present or future), or when to use native javascript.</p>
<p>The point of this article is to go through the main functions of d3js and see how they can be replicated without using a library. As of this writing, I am convinced that using d3js is the most sensible way to handle certain tasks (though this may change in the future). In almost any case I can think of, even when it&#8217;s not the most efficient way to do so, using the d3js approach is the most convenient and the easiest from the developer&#8217;s perspective.  But I also believe it&#8217;s really important to know how to do all these things without d3js.</p>
<p>This will be a very long post. I&#8217;m trying to keep it as structured as possible so you can jump to the right section and keep it as a reference. This also assumes you have a certain familiarity with d3js and javascript &#8211; this is not an introductory post.</p>
<p>I&#8217;ve divided it in 4 parts:</p>
<ul>
<li>Tasks that you really don&#8217;t need d3js for. And ok, you may want to use it regardless. But here&#8217;s how to do those things without it. (manipulating DOM elements)</li>
<li>interlude: a reflexion on d3js data binding. Do you really need that?</li>
<li>Tasks which are significantly easier with d3js (working with external data, animation)</li>
<li>Tasks where as of now, d3js is clearly superior to anything else (scales, array refactoring, map projections, layouts).</li>
</ul>
<h2>Selecting and manipulating elements</h2>
<p>At the core of d3js is the notion of selection. In d3js, you select one or several elements which become a selection object. You can then do a variety of things:</p>
<ul>
<li>join them with data, which is also an essential tenet of the d3 philosophy,</li>
<li>create or delete elements, especially in relation to the data you may have joined with their parent,</li>
<li>manipulate these elements by changing their attributes and their style, including in function of the data joined with each of them,</li>
<li>attach events listeners to those elements, so that when events happen (ie somebody clicks on a rectangle, or change the value of a form) a function might be triggered,</li>
<li>animate and transform those elements.</li>
</ul>
<h3>Selecting elements and parsing the DOM</h3>
<h4>d3 selection objects vs Nodes, HTML NodeList vs HTML LiveCollections</h4>
<p>When you select something with d3js, using methods such as d3.select() or d3.selectAll(), this returns a d3 selection object. The selection object is a subclass of the javascript object Array &#8211; <a href="http://bost.ocks.org/mike/selection/">check here for all the nitty-gritty</a>. The gist of it is that d3 selection objects can then be manipulated by d3 methods, such as .attr() or .style() to assign attributes or styles.</p>
<p>By contrast, the DOM is made of Node objects. The root of the DOM, the Document Object Model, is a special Node called Document. Nodes are organized in a tree-like structure: Document has children, which may have children etc. and encompass everything in the page. The Node objects are really the building blocks of a web page. When an element is added, be it an HTML element like a &lt;div&gt; or an SVG element like a &lt;rect&gt;, a new Node is created as well. So d3js has to interact with Node objects as well. d3 selection objects are tightly connected to their corresponding Node objects.</p>
<p>However, with &#8220;vanilla&#8221; javascript, you can <em>directly</em> access and manipulate the Node objects.</p>
<h4>d3.select / d3.selectAll vs document.querySelector / document.querySelectorAll</h4>
<p>In d3js, you parse the document using d3.select (to select one object) or d3.selectAll. The argument of this method is a <a href="https://github.com/mbostock/d3/wiki/Selections">CSS3 selector</a>, that is, a string which is very similar to what could be found in a CSS style sheet to assign specific styles to certain situations. For instance, &#8220;g.series rect.mark&#8221; will match with all the rectangles of the class &#8220;mark&#8221; which are descendants of the SVG g groups of the class series.</p>
<p>When d3js was introduced in 2011, javascript didn&#8217;t have an equivalent syntax &#8211; instead you could select elements by class, or by id, or by tag name (more on that in a minute). Things have changed however and it is now possible to use CSS3 selectors using document.querySelector (which will return just one node) or document.querySelectorAll (which will return an HTML NodeList).</p>
<p>An HTML NodeList is a special object which is kind of like an array of Node objects, only it has almost no array methods or properties. You can still access its members using brackets, and get its length, but that&#8217;s it.</p>
<p>I wrote document.querySelectorAll, because you can use this method from the document, but you can use it from any Node. Those two snippets of code are parallel:</p>
<pre class="brush: jscript; title: ; notranslate">
var svg = d3.select(&quot;svg&quot;); // svg is a d3 selection object
var g = svg.selectAll(&quot;g&quot;); // g is a d3 selection object
</pre>
<pre class="brush: jscript; title: ; notranslate">
var svg = document.querySelector(&quot;svg&quot;); // svg is a Node
var g = svg.querySelectorAll(&quot;g&quot;); // g is a NodeList
</pre>
<h4> Getting elements by class name, ID, tag name, name attribute</h4>
<p>d3js doesn&#8217;t have a special way to get all descendants of a selection of a certain class, of a certain ID, etc. The CSS3 selector syntax can indeed handle all those cases, so why have a separate way?</p>
<p>By contrast, javascript pre-2011 didn&#8217;t have a querySelectorAll method, and so the only way to parse the document was to use more specific method, like document.getElementsByClassName().</p>
<p>document.getElementsByClassName() retrieves all descendants of a certain class. document.getElementsByName() retrieves elements with a certain &#8220;name&#8221; attribute (think forms). documents.getElementsByTagName() gets all descendants of a certain type (ie all &lt;div&gt;s, all &lt;rect&gt;s, etc.).</p>
<p>What&#8217;s interesting about that is that what is returned is not an HTML NodeList like above with querySelectorAll, but another object called HTML <strong>Live Collection</strong>. The difference is that matching elements are created after, they would still be included in the Live Collection.</p>
<pre class="brush: jscript; title: ; notranslate">
var svg = d3.select(&quot;svg&quot;);
svg.selectAll(&quot;rect&quot;).data([1,2,3]).enter().append(&quot;rect&quot;);
var mySelection = svg.selectAll(&quot;rect&quot;); // 3 elements
mySelection[0].length // 3
svg.append(&quot;rect&quot;);
mySelection[0].length // 3
mySelection = svg.selectAll(&quot;rect&quot;); // re-selecting to update it
mySelection[0].length // 4
</pre>
<pre class="brush: jscript; title: ; notranslate">
var svg = document.querySelector(&quot;svg&quot;);
var ns = &quot;http://www.w3.org/2000/svg&quot;;
var i;
for (i = 0; i &lt; 3; i++) {
  var rect = document.createElementNS(ns, &quot;rect&quot;); // we'll explain creating elements later
  svg.appendChild(rect);
}
var mySelection = svg.getElementsByTagName(&quot;rect&quot;); // 3 elements
var rect = document.createElementNS(ns, &quot;rect&quot;);
svg.appendChild(rect);
mySelection.length // 4 - no need to reselect to update
</pre>
<p>How about IDs? there is also the getElementById (no s at elements!) which only retrieve one element. After all, IDs are supposed to be unique! if no elements match, getElementById returns null.</p>
<h4>Children, parents, siblings&#8230;</h4>
<p>Truth be told, if you can use selectors from the root, you can access everything. But sometimes, it&#8217;s nice to be able to go from one node to its parents or its children or its siblings, and d3js doesn&#8217;t provide that. By contrast, the Node object has an interface that does just that &#8211; node.childNodes gets a nodeList of child nodes, node.parentNode gets the parent node, node.nextSibling and node.previousSibling get the next and previous siblings. Nice.</p>
<p>However, most often you will really be manipulating elements (more on that in a second) and not nodes. What&#8217;s the difference? all Elements are Nodes, but the reverse is not true. One common example of Node which is not an Element is text content.</p>
<p>To get an Element&#8217;s children, you can use the (wait for it) children property. The added benefit is that what you get through children is a LiveCollection (dynamic), while what you get through childNodes is a NodeList (static).</p>
<pre class="brush: jscript; title: ; notranslate">
var svg = document.querySelector(&quot;svg&quot;);
var ns = &quot;http://www.w3.org/2000/svg&quot;;
var i;
for (i = 0; i &lt; 3; i++) {
  var myRect = document.createElementNS(ns, &quot;rect&quot;); // we'll explain creating elements later
  svg.appendChild(rect);
}
// the variable myRect holds the last of the 3 &lt;rect&gt; elements that have been added
svg.childNodes; // a NodeList
myRect.parentNode; // the svg element
myRect.nextSibling; // null - myRect holds the last child of svg.
myRect.previousSibling; // the 2nd &lt;rect&gt; element
svg.firstChild; // the 1st &lt;rect&gt;. Really useful shorthand
svg.querySelector(&quot;rect&quot;); // also the 1st &lt;rect&gt;.
svg.children; // a LiveCollection
</pre>
<h2>Adding/reading attributes, styles, properties and events</h2>
<h4>Node, Element, EventTarget and other objects</h4>
<p>In d3 101, right after you&#8217;ve created elements (to which we&#8217;ll come in a moment), you can start moving them around or giving them cool colors like &#8220;steelblue&#8221; by using the .attr and .style methods.</p>
<p>Wouldn&#8217;t that be cool if we could do the same to Node objects in vanilla javascript!</p>
<p>Well, we can. Technically, you can&#8217;t add style or attributes to Node objects proper, but to Element objects. The Element object inherits from the Node objects and is used to store these properties. There is also an HTMLElement and SVGElement which inherit from the Element object.</p>
<p>If you look at the Chrome console at an SVG element like a rect, you can see, in the properties tab, all the objects it inherits from: Object, EventTarget, Node, Element, SVGElement, SVGGraphicsElement, SVGGeometryElement, SVGRectElement, rect.</p>
<p>All have different roles. To simplify: Node relates to their relative place in the document hierarchy, EventTarget, to events, and Element and its children, to attributes, style and the like. The various SVG-prefixed objects all implement specific methods and properties. When we select a Node object as we&#8217;ve done above with svg.querySelector(&#8220;rect&#8221;) and the like, note that there&#8217;s not a Node object on one side, then an Element object somewhere else, a distinct SVGGeometryElement, and so on and so forth. What is retrieved is <em>one single object</em> that inherits all methods and properties of Nodes, Elements, EventTargets, and so on and so forth, and, as such, that behaves like a Node, like an Element, etc.</p>
<h4>Setting and getting attributes</h4>
<p>You can set attributes with the Element.setAttribute method.</p>
<pre class="brush: jscript; title: ; notranslate">
var rect = document.querySelector(&quot;rect&quot;);
rect.setAttribute(&quot;x&quot;, 100);
rect.setAttribute(&quot;y&quot;, 100);
rect.setAttribute(&quot;width&quot;, 100);
rect.setAttribute(&quot;height&quot;, 100);
</pre>
<p>To be honest, I&#8217;m a big fan of the shorthand method in d3js,</p>
<pre class="brush: jscript; title: ; notranslate">
var rect = d3.select(&quot;rect&quot;);
rect.attr({x: 100, y: 100, width: 100, height: 100});
</pre>
<p>Also, the Element.setAttribute method doesn&#8217;t return anything, which means it can&#8217;t be chained (which may or may not be a bad thing, though it&#8217;s definitely a change for d3js users). It&#8217;s not possible to set several attributes in one go either, although one could create a custom function, or, for the daring, extend the Element object for that.</p>
<p>Likewise, the Element object has a getAttribute method :</p>
<pre class="brush: jscript; title: ; notranslate">
rect.getAttribute(&quot;x&quot;); // 100
</pre>
<h4>Classes, IDs and tag names</h4>
<p>Classes, IDs and tag names are special properties of the Element objects. It&#8217;s extremely common to add or remove classes to elements in visualization: my favorite way to do that is to use the classed method in d3js.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.select(&quot;rect&quot;).classed(&quot;myRect&quot;, 1)
</pre>
<p>In vanilla javascript, you have the concept of classList.</p>
<pre class="brush: jscript; title: ; notranslate">
document.querySelector(&quot;rect&quot;).classList; // [&quot;myRect&quot;]
</pre>
<p>ClassList has a number of cool methods. contains checks if this Element is of a certain class, add adds a class, remove removes a class, and toggles, well, toggles a class.</p>
<pre class="brush: jscript; title: ; notranslate">
document.querySelector(&quot;rect&quot;).classList.contains([&quot;myRect&quot;]); // true
document.querySelector(&quot;rect&quot;).classList.remove(&quot;myRect&quot;);
document.querySelector(&quot;rect&quot;).classList.add(&quot;myRect&quot;);
document.querySelector(&quot;rect&quot;).classList.toggle(&quot;myRect&quot;);
</pre>
<p>How about IDs ? with d3js, you&#8217;d have to treat them as any other property (rect.attr(&#8220;id&#8221;)). In vanilla javascript, however, you can access it directly via the id property of Element. You can also do that with the name property.<br />
Finally, you can use the tagName to get the type of element you are looking at (though you cannot change it &#8211; you can try, it just won&#8217;t do anything).</p>
<pre class="brush: jscript; title: ; notranslate">
document.querySelector(&quot;rect&quot;).id = &quot;myRect&quot;; // true
document.querySelector(&quot;rect&quot;).name; // undefined;
document.querySelector(&quot;rect&quot;).tagName; // &quot;rect&quot;
document.querySelector(&quot;rect&quot;).tagName = &quot;circle&quot;;
document.querySelector(&quot;rect&quot;).tagName; // &quot;rect&quot;
</pre>
<h4>Text</h4>
<p>Text is a pretty useful aspect of visualization! it is different from attributes or styles, which are set in the opening tag of an element. The text or content is what is happening in between the opening and closing tags of that element. This is why, in d3js, text isn&#8217;t set using attr or style, but either by the html method for HTML elements like DIVs or Ps, or by the text method for SVG elements like &lt;text&gt; and &lt;tspan&gt;.</p>
<p>Those have equivalent in the DOM + javascript world.</p>
<p>HTMLelements have the .innerHTML and outerHTML properties. The difference between the two is that outerHTML includes the opening and closing tags. innerHTML and outerHTML both return HTML, complete with tags and syntax.</p>
<p>SVG elements, however, don&#8217;t have access to this property, so they have to rely on the Node property textContent. HTML elements also have access to it, by the way. textContent returns just the plain text content of what&#8217;s in the element. All three properties can be used to either get or set text.</p>
<h4>Style</h4>
<p>In d3js, setting styles to elements is very similar to setting attributes, only we use the .style method instead of the .attr one. It&#8217;s so much similar that it&#8217;s a rather common mistake to pass as attribute what should be a style and vice-versa! Like with attributes, it is possible to pass an object with keys and values to set several style properties at once.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.selectAll(&quot;rect&quot;).style(&quot;fill&quot;, &quot;red&quot;);
d3.selectAll(&quot;rect&quot;).style({stroke: &quot;#222&quot;, opacity: .5});
</pre>
<p>In the world of DOM and vanilla javascript, style is a property of the HTMLElement / SVGElement objects. You can set style properties one at a time:</p>
<pre class="brush: jscript; title: ; notranslate">
rect = document.querySelector(&quot;rect&quot;);
rect.style.fill = &quot;red&quot;;
rect.style.stroke = &quot;#222&quot;;
rect.style.opacity = .5;
</pre>
<p>Technically, .style returns a CSSStyleDeclaration object. This object maintains a &#8220;live&#8221; link to what it describes. So:</p>
<pre class="brush: jscript; title: ; notranslate">
myStyle = rect.style;
rect.style.fill = &quot;yellow&quot;;
myStyle.fill; // &quot;yellow&quot;
</pre>
<p>Finally, the window object has a getComputedStyle method that can get the computed styles of an element, ie how the element is actually going to get drawn. By contrast, the style property and the d3js style method only affect the inline styles of an element and are &#8220;blind&#8221; to styles of its parents.</p>
<pre class="brush: jscript; title: ; notranslate">
myStyle = window.getComputedStyle(rect, null);
myStyle.fill; // &quot;yellow&quot;
</pre>
<h4>Adding and removing events</h4>
<p>In d3js, we have the very practical method &#8220;on&#8221; which let users interact with elements and can trigger behavior, such as transformations, filtering, or, really, any arbitrary function. This is where creating visualizations with SVG really shines because any minute interaction with any part of a scene can be elegantly intercepted and dealt with. Since in d3js, elements can be tied with data, the &#8220;on&#8221; methods takes that into account and passes the data element to the listener function. One of my favorite tricks when I&#8217;m developing with d3js and SVG is to add somewhere towards the end the line:</p>
<pre class="brush: jscript; title: ; notranslate">
d3.selectAll(&quot;*&quot;).on(&quot;click&quot;, function(d) {console.log(d);})
</pre>
<p>Which, as you may have guessed, displays the data item tied to any SVG element the user could click on.</p>
<p>In the world of the DOM, the object to which events methods are attached in the EventTarget. Every Element is also an EventTarget (and EventTarget could be other things that handle events too, like xhr requests).</p>
<p>To add an event listener to an element, use the addEventListener method like so.</p>
<pre class="brush: jscript; title: ; notranslate">
document
  .querySelector(&quot;rect&quot;)
  .addEventListener(&quot;click&quot;, function() {
     console.log(&quot;you clicked the rectangle!&quot;
   }, false);
</pre>
<p>The first parameter is the type of event to listen to (just as in &#8220;on&#8221;), the second is the listener function proper. The third one, &#8220;use capture&#8221;, a Boolean, is optional. If set to true, it stops the event from propagating up and being intercepted by event listeners of the parents of this element.</p>
<p>There is also a &#8220;removeEventListener&#8221; method that does the opposite, and needs the same elements: in other words, yes, you need to pass the same listener function to be able to stop listening to the element. There is no native way to remove all event listeners from an element, although there are <a href="http://stackoverflow.com/questions/9251837/how-to-remove-all-listeners-in-an-element">workarounds</a>.</p>
<h2>Creating and removing elements</h2>
<p>Selecting and modifying elements is great, but if you are creating a visualization, chances are that you want to create elements from scratch.</p>
<p>Let&#8217;s first talk about how this is done in the DOM/javascript, then we&#8217;ll better understand the data joins and d3 angle.</p>
<p>Node objects can exist outside of the hierarchy of the DOM. Actually, they must first be created, <em>then</em> be assigned to a place in the DOM.</p>
<p>Until a Node object is positioned in the DOM, it is not visible. However, it can receive attributes, styles, etc. Likewise, a Node object can be taken from the DOM, and still manipulated.</p>
<p>To create an HTML element, we can use the document.createElement() method:</p>
<pre class="brush: jscript; title: ; notranslate">
var myDiv = document.createElement(&quot;div&quot;);
</pre>
<p>However, that won&#8217;t work for SVG elements &#8211; remember in an earlier example, we used the createElementNS method. This is because SVG elements have to be created in the SVG namespace. d3js old-timers may remember that in the first versions, we had to deal with namespaces when creating elements in d3js as well, but now this all happens under the hood.</p>
<p>Anyway, in vanilla javascript, this is  how it&#8217;s done:</p>
<pre class="brush: jscript; title: ; notranslate">
var svgns = &quot;http://www.w3.org/2000/svg&quot;;
var myRect = document.createElementNS(svgns, &quot;rect&quot;);
</pre>
<p>Warning, because document.createElement(&#8220;rect&#8221;) will not produce anything useful as of this writing.</p>
<p>Once the new Node objects are created, in order to be visible, they should be present in the DOM. Because the DOM is a tree, this means that they have to have a parent.</p>
<pre class="brush: jscript; title: ; notranslate">
svg.appendChild(myRect);
</pre>
<p>Likewise, to remove a Node from the DOM means to sever that relationship with its parent, which is done through the removeChild method:</p>
<pre class="brush: jscript; title: ; notranslate">
svg.removeChild(myRect);
</pre>
<p>Again, even after a Node has been removed, it can still be manipulated, and possibly re inserted at a later time.</p>
<p>Nodes don&#8217;t remove themselves, but you can write:</p>
<pre class="brush: jscript; title: ; notranslate">
myRect.parentNode.removeChild(myRect);
</pre>
<p>In contrast, here is how things are done in d3js.</p>
<p>The append method will add one element to a parent.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.select(&quot;svg&quot;).append(&quot;rect&quot;);
</pre>
<p>The remove method will remove one entire selection object from the DOM.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.select(&quot;svg&quot;).selectAll(&quot;rect&quot;).remove(); // removes all rect elements which are children of the SVG element
</pre>
<p>But the most intriguing and the most characteristic way to <a href="http://www.jeromecukier.net/blog/2011/08/09/d3-adding-stuff-and-oh-understanding-selections/">create new elements</a> in d3js is to use a data join.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.select(&quot;svg&quot;)
  .selectAll(&quot;rect&quot;)
  .data(d3.range(5))
  .enter()
  .append(&quot;rect&quot;);
</pre>
<p>The above snippet of code counts all the rect children of the svg element, and, if there are fewer than 5 &#8211; the number of items in d3.range(5), which is the [0,1,2,3,4] array &#8211; creates as many as needed to get to 5, and binds values to those elements &#8211; the contents of d3.range(5) in order. If there are already 5 rect elements, no new elements will be created, but the data assignment to the existing elements will still occur.</p>
<h2>Data joins, or the lack thereof</h2>
<p>The select / selectAll / data / enter / append sequence can sound exotic to people who learn d3js, but to its practitioners, <a href="http://www.jeromecukier.net/blog/2011/08/09/d3-adding-stuff-and-oh-understanding-selections/">it is its angular stone</a>. Not only is it a quick way to create many elements (which, in vanilla javascript, takes at least 2 steps. Creating them, and assigning them to the right parent), but it also associates them with a data element. That data element can then be accessed each time the element is being manipulated, notably when setting attributes or styles and handling events.</p>
<p>For instance,</p>
<pre class="brush: jscript; title: ; notranslate">
d3.selectAll(&quot;rect&quot;)
  .attr(&quot;x&quot;, function(d) {return 20 * d;});
</pre>
<p>the above code utilizes the fact that each of the rectangle have a different number associated with them to dynamically set an attribute, here position rectangles horizontally.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.selectAll(&quot;rect&quot;)
  .on(&quot;click&quot;, function(d) {console.log(d);})
</pre>
<p>A trick I had mentioned above, but which illustrates this point: here by clicking on each rectangle, we use the data join to show the associated data element.</p>
<p>Having data readily available when manipulating elements in d3js is extremely convenient. After all, data visualization is but the encoding of data through visual attributes. How to perform this operation without the comfort of data joins?</p>
<p>Simply by going back to the dataset itself.</p>
<p>Consider this:</p>
<pre class="brush: jscript; title: ; notranslate">
var data = [];
var i;
for (i = 0; i &lt; 100; i++) {
  data.push({x: Math.random() * 300, y: Math.random() * 300}); // random data points
}

// d3 way
var d3svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;);
d3svg.selectAll(&quot;circle&quot;).data(data).enter().append(&quot;circle&quot;)
  .attr({cx: function(d) {return d.x;}, cy: function(d) {return d.y}, r: 2})
  .style({fill: &quot;#222&quot;, opacity: .5});

// vanilla js way
var svgns = &quot;http://www.w3.org/2000/svg&quot;;
var svg = document.createElementNS(svgns, &quot;svg&quot;);
document.querySelector(&quot;body&quot;).appendChild(svg);
for (i = 0; i &lt; 100; i++) {
  var myCircle = document.createElementNS(svgns, &quot;circle&quot;);
  myCircle.setAttribute(&quot;cx&quot;, data[i].x);
  myCircle.setAttribute(&quot;cy&quot;, data[i].y);
  myCircle.setAttribute(&quot;r&quot;, 2);
  myCircle.style.fill = &quot;#222&quot;;
  myCircle.style.opacity = .5;
  svg.appendChild(myCircle);
}</pre>
<p class="codepen" data-height="268" data-theme-id="0" data-slug-hash="eNzaYg" data-default-tab="result" data-user="jckr">See the Pen <a href="http://codepen.io/jckr/pen/eNzaYg/">eNzaYg</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script>Both codes are equivalent. Vanilla JS is also marginally faster, but d3 code is much more compact. In d3js, the process from dataset to visual is:</p>
<ul>
<li>Joining dataset to container,</li>
<li>Creating as may children to container as needed, [repeat operation for as many levels of hierarchy as needed],</li>
<li>Use d3 selection objects to update the attributes and styles of underlying Node objects from the data items which have been joined to them.</li>
</ul>
<p>    In contrast, in vanilla Javascript, the process is:</p>
<ul>
<li>Loop over the dataset,</li>
<li>create, position and style elements as they are read from the dataset.</li>
</ul>
<p>For visuals with a hierarchy of elements, the dataset may also have a hierarchy and could be nested. In this case, there may be several nested loops. While the d3js code is much more compact, the vanilla approach is actually more simple conceptually. Interestingly, this is the same logic that is at play when creating visualization with Canvas or with frameworks like React.js. To simply loop over an existing, invariant dataset enables you to implement a stateless design and take advantage of immutability. You don&#8217;t have to worry about things such as what happens if your dataset changes or the status that your nodes are in before creating or updating them. By contrast most operations in d3js assume that you are constantly updating a scene on which you are keeping tabs. In order to create elements, you would first need to me mindful on existing elements, what data is currently associated with them, etc. So while the d3js approach is much more convenient and puts the data that you need at your fingertips, the vanilla JS approach is not without merits.</p>
<h2>Loading files</h2>
<p>The first word in data visualization is data, and data comes in files, or database queries. If you&#8217;re plotting anything with more than a few datapoints, chances are you are not storing them as a local variable in your javascript. d3js has a number of nifty functions for that purpose, such as d3.csv or d3.json, which allow to load the files asynchronously. The trick in working with files is that it can take some time, so some operations can take place while we wait for the files to load, but some others really have to wait for the event that the file is loaded to start. I personally almost always use queue.js, also from Mike Bostock, as I typically have to load data from several files and a pure d3 approach would require nesting all those asynchronous file functions. But, for loading a simple csv file, d3js has a really simple syntax:</p>
<pre class="brush: jscript; title: ; notranslate">
d3.csv(&quot;myfile.csv&quot;, function(error, csv) {
  // voila, the contents of the file is now store in the csv variable as an array
})
</pre>
<p>For reference, using queue js, this would look like</p>
<pre class="brush: jscript; title: ; notranslate">
queue()
 .defer(d3.csv, &quot;myFirstFile.csv&quot;)
 .defer(d3.csv, &quot;mySecondFile.csv&quot;)
 .await(ready);

function ready(error, first, second) {
  // the contents of myFirstFile is stored as an array in the variable &quot;first&quot;,
  // and the contents of mySecondFile are in the variable &quot;second&quot;.
}
</pre>
<p>The way to do the equivalent in vanilla Javascript is to use XMLHttpRequest.</p>
<pre class="brush: jscript; title: ; notranslate">
function readFile() {
  var fileLines = this.responseText.split(&quot;\n&quot;);
  var fields = fileLines[0].split(&quot;,&quot;);
  var data = fileLines.slice(1).map(function(d) {
    var item = {};
    d.split(&quot;,&quot;).forEach(function(v, i) {item[fields[i]] = v;})
    return item;
  })

  var request = new XMLHttpRequest();
  request.onload = readFile;
  request.open(&quot;get&quot;, &quot;myFile.csv&quot;, true);
  request.send();
</pre>
<p>The syntax of loading the file isn&#8217;t that cumbersome, and there are tons of nice things that can be done through XMLHttpRequest(), but let&#8217;s admit that d3js/queue.js functions make it much more comfortable to work with csv files.</p>
<h2>Animations</h2>
<p>d3js transitions is one of my favorite part of the library. I understand it&#8217;s also one the things which couldn&#8217;t be done well in protovis and which caused that framework to break. It feels so natural: you define what you want to animate, all that needs to change, the time frame and the easing functions, and you&#8217;re good to go (<a href="http://www.jeromecukier.net/blog/2012/07/16/animations-and-transitions/">see my previous post on animations and transitions</a>). In native javascript, while you can have deep control of animations, it&#8217;s also, unsurprisingly, much more cumbersome. However, CSS3 provides an animation interface which is comparable in flexibility, expressiveness and ease of use to what d3js does. First let&#8217;s get a high-level view of how to do this entirely within JS. Then let&#8217;s get a sense of what CSS can do.</p>
<h4>requestAnimationFrame and animation in JavaScript</h4>
<p>JavaScript has timer functions, window.setTimeout and window.setTimeinterval, which let you run some code after a certain delay or every so often, respectively. But this isn&#8217;t great for animation. Your computer draws to screen a fixed number of times per second. So if you try to redraw the same element several times before in between those times, it&#8217;s a waste of resources! What requestAnimationFrame does is tell your system to wait for the next occasion to draw to execute a given function. Here&#8217;s how it will look in general.</p>
<pre class="brush: jscript; title: ; notranslate">
function animate(duration) {
  var start = Date.now();
  var id = requestAnimationFrame(tick);
  function tick() {
    var time = Date.now();
    if (time - start &lt; duration) {
       id = requestAnimationFrame(tick);
       draw(time - start / duration);
    } else {
      cancelAnimationFrame(id);
    }
  }
  function draw(frame) {
    // do your thing, update attributes, etc.
  }
}
</pre>
<p>&nbsp;</p>
<p>See the Pen <a href="http://codepen.io/jckr/pen/PqzgLV/">PqzgLV</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script></p>
<p>OK so in the part I commented out, you will do the drawing proper. Are you out of the woods yet? well, one great thing about d3js transitions is that they use easing functions, which transform a value between 0 and 1 into another value between 0 and 1 so that the speed of the animation isn&#8217;t necessarily uniform. In my example, you have (time &#8211; start) / duration represents the proportion of animation time that has already elapsed, so that proportion can be further transformed.</p>
<p>So yay we can do everything in plain javascript, but that&#8217;s a lot of things to rewrite from scratch.</p>
<h4>CSS3, animations and transitions</h4>
<p>(This is not intended to be an exhaustive description of animations and transitions, a subject on which whole books have been written. Just to give those who are not familiar with it a small taste).</p>
<p>In CSS3, anything you can do with CSS, you can time and animate. But there are some caveats.</p>
<p>There are two similar concepts to handle appearance change in CSS: <em>animations</em> and <em>transitions</em>. What is the difference?</p>
<ul>
<li>with <em>animations</em>, you describe a @keyframes rule, which is a sequence of states that happen at different points in time in your transition. In each of these events, any style property can be changed. The animation will transform smoothly your elements to go from one state to the next.</li>
<li>in <em>transitions, </em>you specify how changes to certain properties will be timed. For instance, you can say that whenever opacity changes, that change will be staged over a 1s period, as opposed to happen immediately.</li>
</ul>
<p>Both approaches have their uses. CSS3 animations are great to create complex sequences. In d3js, that requires to &#8220;chain transitions&#8221;, which is the more complex aspect of managing them. By contrast, going from one segment of the animation to another is fairly easy to handle in CSS3. Animations, though, require the @keyframes rule to be specified ahead of time in a CSS declaration file. And yes, that can be done programmatically, but it&#8217;s cumbersome and not the intent. The point is: animations work better for complex, pre-designed sequence of events.</p>
<p>Transitions, in contrast, can be set as inline styles, and work fine when one style property is changed dynamically, a scenario which is more likely to happen in interactive visualizations.</p>
<p>Here&#8217;s how they work. Let&#8217;s start with animations.</p>
<p class="codepen" data-height="268" data-theme-id="0" data-slug-hash="vOKKYN" data-default-tab="result" data-user="jckr">See the Pen <a href="http://codepen.io/jckr/pen/vOKKYN/">vOKKYN</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script>Note: as of this writing, animation-related CSS properties have to be vendor prefixed, i.e. you have to repeat writing these rules for the different browsers. Here&#8217;s a transition in action.</p>
<p class="codepen" data-height="268" data-theme-id="0" data-slug-hash="xGOqOR" data-default-tab="result" data-user="jckr">See the Pen <a href="http://codepen.io/jckr/pen/xGOqOR/">xGOqOR</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>For transition, you specify one style property to &#8220;listen&#8221; to, and say how changes to that property will be timed, using the transition: name of property + settings. (in the above example: transition: transform ease 2s means that whenever the &#8220;transform&#8221; style of that element changes, this will happen over a 2s period with an easing function). <script src="//assets.codepen.io/assets/embed/ei.js" async=""></script></p>
<p>One big caveat for both CSS animations and transitions is that they are limited to <em>style properties</em>. In HTML elements this is fine because everything that is related to their appearance is effectively handled by style: position, size, colors, etc. For SVG, however, color or opacity are styles, like in HTML, but positions, sizes and shapes are <em>attributes</em>, and can&#8217;t be directly controlled by CSS. There is a workaround for positions and sizes, which is to use the transform style property.</p>
<p>But wait: isn&#8217;t transform an SVG attribute as well? that&#8217;s right. And that&#8217;s where it can get <em>really </em>confusing. Many SVG elements are positioned through x and y properties (attributes). They can also have a transform property which is additive to that. For instance, if I have a &lt;rect&gt; which has an x property of 100 and a transform set at &#8220;translate(100)&#8221;, it will be positioned 200px right of its point of origin. But on top of that, SVG elements can have a transform <em>style </em>which affects pretty much the same things (position, scales, rotation&#8230;) but which has a slightly different syntax (&#8220;translate(100)&#8221;, for instance, wouldn&#8217;t work, you&#8217;d have to write &#8220;translateX(100px)&#8221;). What&#8217;s more, the transform set in the style doesn&#8217;t add to the one set in the properties, but it overrides it. If we add a &#8220;transform: translateX(50px)&#8221; to our &lt;rect&gt;, it will be positioned at 150px, not 200px or 250px. Another potential headache is that some SVG elements cannot support transform styles.<br />
While any of these properties can be accessed programmatically, managing their potential conflicts and overlaps can be difficult. In the transition example above, I have used the transform/translateX syntax.</p>
<p>That said, a lot of awesome stuff can be done in CSS only. For scripted animations, the animation in pure CSS is definitely more powerful and flexible than the d3js equivalent, however, when dealing with dynamically changing data, while you can definitely handle most things through CSS transitions, you&#8217;ll appreciate the comfort of d3js style transitions.</p>
<p class="codepen" data-height="268" data-theme-id="0" data-slug-hash="GJqrLO" data-default-tab="result" data-user="jckr">See the Pen <a href="http://codepen.io/jckr/pen/GJqrLO/">GJqrLO</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script></p>
<p>Now a common transformation handled by d3js transitions is to transform the shape of path shapes. This is impossible through CSS animations/transitions, because the shape of the path &#8211; the &#8220;d&#8221; &#8211; is definitely not a style property. And sure, we can use a purely programmatic approach with requestAnimationFrame but is there a more high level way?<br />
It turns out there actually is &#8211; the animation element of SVG, or SMIL. Through SMIL, everything SVG can be animated with an interface, this includes moving an object along a path, which I wouldn&#8217;t know how to do on top of my head in d3js. Here is an extensive <a href="https://css-tricks.com/guide-svg-animations-smil/">explanation of how this works and what can be done</a>.</p>
<h2>Data processing, scales, maps and layouts</h2>
<p>For the end of the article let&#8217;s talk about all of which could technically be done without d3js, but in a much, much less convenient way. Therefore, I won&#8217;t be discussing alternatives with vanilla Javascript, which would be very work intensive and not necessarily inventive.</p>
<h4>Array functions and data processing</h4>
<p>d3js comes with a number of array functions. Some are here for convenience, such as d3.min or d3.max which can easily be replaced by using the native reduce method of arrays. When comparing only two variables, d3.max([a, b]) is not much more convenient than Math.max(a,b) or a &gt; b ? a : b.</p>
<p>Likewise, d3js has many statistical functions, which saves you the trouble to implement them yourself if you need them, such as d3.quantile. There are other libraries who do that, but they&#8217;re here and it&#8217;s really not useful to recode that from scratch.</p>
<p>d3js comes with shims for maps and sets, which will be supported by ES6. By now, there are transpilers which can let you use ES6 data structures. But it&#8217;s nice to have them.</p>
<p>In my experience, d3js most useful tool in terms of data processing is the d3.nest function, which can transform an array of objects into a nested object. (I wrote <a href="http://www.jeromecukier.net/blog/2012/05/28/manipulating-data-like-a-boss-with-d3/">this article</a> about them).  Underscore has something similar. While you can definitely getting a dataset of any shape and size by parsing an array and performing any grouping or operations manually, this is not only very tedious but <strong>also extremely error prone.</strong></p>
<h4>Scales</h4>
<p>Scales are one superb feature of d3js. They are simple to understand, yet very versatile and convenient. Oftentimes, d3 scales, especially the linear ones, are a replacement for linear algebra.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.scale.linear().range([100, 500]).domain([0, 24])(14);
((14 - 0) / (24 - 0)) * (500 - 100) + 100; // those two are equivalent (333.33...)
</pre>
<p>but changing the domain or the range of a scale is much safer using the scale than adhoc formulas. Add to this scale goodness such as the ticks() method or nice() to round the domain, and you get something really powerful.</p>
<p>So, of course it is possible (and straightforward, even) to replace the scales but that would be missing out one of the best features of d3js.</p>
<h4>Maps</h4>
<p>d3js comes with a full arsenal of functions and methods to handle geographic projections, ie: the transformation of longitude/latitude coordinates into x,y positions on screen. Those come in two main groups, projections proper that turn an array of two values (longitude, latitude) into an array of two values (x, y). There are also paths functions that are used to trace polygons, such as countries, from specially formatted geographic files (geoJSON, topoJSON).</p>
<p>The mercator projection may be straightforward to implement, But others are much less so. The degree of comfort that d3js provides when visualizing geographical data is really impressive.</p>
<h4>Layouts</h4>
<p>d3js layouts, that is special visual arrangements of data, were in my opinion one of the key drivers of protovis (where they originated) then d3js adoption. Through layouts, it became simple to create, with a few line of codes, complex constructions like treemaps or force-directed networks. Some layouts, like the pie chart or the dendogram, are here for convenience and could be emulated. Others, and most of all the force layout, are remarkably implemented, efficient and versatile. While they are called different names in d3js, geometry functions such as voronoi tessellation or convex hulls are similar functionally and there is little incentive in reproducing what they do in plain javascript.</p>
<h1>Should I stop using d3?</h1>
<p>d3js is definitely the most advanced javascript visualization library. The point of this article is not to get you to stop using it, but rather, to have a critical thinking in your code. Even with the best hammer, not everything is a nail.</p>
<p>To parse the DOM, manipulate classes and listen to events, you probably don&#8217;t need a library. The context of your code may make it more convenient to use d3 or jQuery or something else, but it&#8217;s useful to consider alternatives.<br />
The concept of the data join unlocks a lot of possibilities in d3js. A good understanding of data join would lead you to implement your visualization much faster, using more concise code and replicable logic. It also makes trouble shooting easier. Data joins are especially useful if you have a dataset which is structured like your visualization should be, or if you plan to have interaction with your visualization that requires quick access with the underlying data. However, data joins are not necessary in d3js, or in visualization in general. In many cases, it&#8217;s actually perfectly sensible to parse a dataset and create a visual representation in one fell swoop, without attaching the data to its representation or overly worrying about updating.</p>
<p>Assuming you have d3js loaded, nothing prevents you from creating elements using d3js append methods instead of vanilla javascript. Or to listen to events using addEventListener rather than with d3js on method. It&#8217;s totally ok to mix and match.</p>
<p>Like data joins, transitions are a very powerful component of d3js, and, once you&#8217;re comfortable with them, they are very expressive. There are other animation frameworks available though, which can be better adapted to the task at hand.<br />
Scale, maps, layouts and geometries are extremely helpful features however and I can think of no good reason to reimplement them.</p>
<h2>Credit where it&#8217;s due</h2>
<p>To write this I drew inspiration from many articles and I will try to list them all here.<br />
The spark that led me to write was Lea Verou&#8217;s article <a href="http://lea.verou.me/2015/04/jquery-considered-harmful/">jQuery considered harmful</a>, as well as articles she cites (<a href="http://youmightnotneedjquery.com/">you might not need jQuery</a>, <a href="http://blog.garstasio.com/you-dont-need-jquery/">you don&#8217;t need jQuery</a>, <a href="http://www.sitepoint.com/do-you-really-need-jquery/">Do you really need jQuery?</a>, <a href="http://tutorialzine.com/2014/06/10-tips-for-writing-javascript-without-jquery/">10 tips for writing JavaScript without jQuery</a>).</p>
<p>Most of the information I used especially in the beginning of the article comes more or less directly from <a href="https://developer.mozilla.org/en-US/">MDN documentation</a>, and direct experimentation. For CSS and animation, I found the articles of Chris Coyier (such as <a href="https://css-tricks.com/animating-svg-css/">this one</a> or <a href="https://css-tricks.com/animate-to-an-inline-style/">this one</a>) and Sara Soueidan (<a href="https://css-tricks.com/guide-svg-animations-smil/">here</a>) on <a href="https://css-tricks.com/">CSS Tricks</a> to be extremely helpful. Those are definitely among the first resources to check out to go deeper on the subject. Sara was also <a href="http://blogs.adobe.com/dreamweaver/2015/04/an-introduction-to-graphical-effects-in-css.html">the inspiration</a> behind <a href="http://www.jeromecukier.net/blog/2015/05/05/blending-mode-and-svg/">my previous post</a>, so thanks to her again!</p>
<p>Finally, I&#8217;ve read <a href="http://blog.webkid.io/replacing-jquery-with-d3/">Replacing jQuery with d3</a> with great interest (like <a href="http://snips.net/blog/posts/2014/01-10-fast-interactive_prototyping_with_d3_js.html">Fast interactive prototyping with d3js and sketch</a> about a year ago). It may seem that what I write goes in the opposite direction, but we&#8217;re really talking about the same thing -that there are many ways to power front ends and that it&#8217;s important to maintain awareness of alternative methods.</p>
]]></content:encoded>
			<wfw:commentRss>/2015/05/19/you-may-not-need-d3/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>Blending mode and SVG</title>
		<link>/2015/05/05/blending-mode-and-svg/</link>
		<comments>/2015/05/05/blending-mode-and-svg/#comments</comments>
		<pubDate>Tue, 05 May 2015 21:56:46 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[d3]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://www.jeromecukier.net/?p=1661</guid>
		<description><![CDATA[One great thing about canvas is that it&#8217;s super easy to change the compositing mode. And sure, you can do all sorts of fancy things with that, but my basic usage of that is to control how opacity is handled. By default, in svg, if you add one element which is not fully opaque on <a class="read-more" href="/2015/05/05/blending-mode-and-svg/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>One great thing about canvas is that it&#8217;s super easy to change the compositing mode. And sure, you can do all sorts of fancy things with that, but my basic usage of that is to control how opacity is handled. By default, in svg, if you add one element which is not fully opaque on top of another, the top element makes the bottom element darker. By contrast, in canvas you can have access to globalCompositeOperation that let you change how new elements drawn on top of an existing image are handled, or in processing, you have blendMode, etc.</p>
<p>In SVG, there are a variety of operations accessible through filters: see <a href="http://apike.ca/prog_svg_filters.html">http://apike.ca/prog_svg_filters.html</a> for an excellent overview. I must admit that I find filters a bit intimidating to set up and need to always go back to a reference to achieve anything.</p>
<p>I was reading this article this morning on CSS graphical effects <a href="http://blogs.adobe.com/dreamweaver/2015/04/an-introduction-to-graphical-effects-in-css.html">http://blogs.adobe.com/dreamweaver/2015/04/an-introduction-to-graphical-effects-in-css.html</a> thinking, wouldn&#8217;t that be nice if we could do control compositing in SVG.</p>
<p>It turns out that we can! By manipulating the &#8220;mix-blend-mode&#8221; style attribute of any graphical element, we can achieve one of 16 blending modes (which is actually more than canvas or processing!)<br />
Here&#8217;s a demo that shows what can be done. This is an adaptation of <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode">this</a> example.</p>
<p>So, through the use of the right blending mode, opacity can be used to make the resulting image lighter (among many other things).</p>
<p><iframe src="http://www.jeromecukier.net/stuff/blendmode/blendmode.html" width="600" height="750" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>
]]></content:encoded>
			<wfw:commentRss>/2015/05/05/blending-mode-and-svg/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Charts, assemble!</title>
		<link>/2015/02/07/charts-assemble/</link>
		<comments>/2015/02/07/charts-assemble/#comments</comments>
		<pubDate>Sat, 07 Feb 2015 01:00:57 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[charts]]></category>
		<category><![CDATA[dashboards]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://www.jeromecukier.net/?p=1628</guid>
		<description><![CDATA[From the past posts, you would have gathered that dashboards are tools to solve specific problems. They are also formed from individual charts and data elements. Selecting information That dashboards are so specific is great, because the problem that they are designed to solve will help choosing the information that we need and also prioritizing it &#8211; <a class="read-more" href="/2015/02/07/charts-assemble/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p><a href="http://wp.me/po630-qe">From the past posts</a>, you would have gathered that dashboards are tools to solve specific problems. They are also formed from individual charts and data elements.</p>
<h2>Selecting information</h2>
<p>That dashboards are so specific is great, because the problem that they are designed to solve will help choosing the information that we need and also prioritizing it &#8211; two essential tasks in dashboard creation. Again, we don&#8217;t want to shove every data point we have.</p>
<p>Another great tool to help us do those two tasks is user research. As a designer, we may think we chose the right metrics, but they have to make sense to real users and resonate with them. The bias that we may have is that we would favor data which is easy to obtain or that makes sense to us, compared to data which can be more elaborate, more sophisticated or more expensive to collect or compute, even if that makes more sense to the user.</p>
<p>Here&#8217;s an illustration of that.</p>
<p>When I was working at Facebook on this product, Audience Insights, we designed <a href="https://www.facebook.com/ads/audience_insights/activity?age=18-&amp;country=US&amp;interests=6003349754405">this page</a> to help marketers understand how a group of users they could be interested in used Facebook. (The link / screenshot showcases fans of the Golden State Warriors). One of the main ways we classified users at Facebook, for internal purposes, is by counting how many days of the last four weeks they have been on Facebook. It&#8217;s a metric called L28 and one of the high-level things Facebook knows about everyone. So, we integrated it in the first version of this page. But, even though it&#8217;s not a concept unique to Facebook, it wasn&#8217;t that useful to our users, and it was taking space from a more relevant indicator.</p>
<p><img class="alignnone" src="http://jeromecukier.net/projects/dashboards/AI activity.png" alt="" width="800" height="625" /></p>
<p>Instead, we have included indicators which are more relevant to the task at hand (ie getting a sense of who those users are through the prism of their activity). For instance we can see that very few Warriors fans only use Facebook on their computer, compared to the general population of US Facebook users. They tend to skew more towards Android and mobile web (going to www.facebook.com from their phone, versus using an app.) They tend to be more active in terms of likes, comments and shares.</p>
<h2>Information hierarchy</h2>
<p>Once information is chosen and you get a sense of what is more important than the rest, it&#8217;s time to represent that visually.</p>
<p>Here are some of the choices you can make.</p>
<p><em>Show some metrics <strong>on top </strong>or <strong>bigger than others</strong>. </em></p>
<p>That&#8217;s probably the first thing that comes to mind when thinking hierarchy and prioritization. And it needs to be done! Typically, you should get one to three variables that really represent the most important thing you want your users to read or remember. If you come up with more than 3, you should refine your question/task and possibly split it in two.</p>
<p>The rest of the variables will support these very high level metrics. Again, in a typical situation, you could come up with up to three levels of data (with more than three being a good indication to rethink your scope). Some metrics can support the high-level metrics (i.e. show them with a different angle, or explain them) and some metrics could in turn support them.</p>
<p><em>Present some metrics <strong>together</strong>. </em></p>
<p>Stephen Few argues that dashboards should fit on one page or one screen because their virtue is to present information together. With the flexibility offered by the modern web, and the size constraints of mobile, this is a requirement that shouldn&#8217;t be absolute. But it&#8217;s relevant to remember that some variables add value when seen along other variables. With that in mind, you can have part of your dashboard as a fixed element (always visible on screen) while the rest can scroll away, for instance.</p>
<p><em>Push some metrics to <strong>secondary cards </strong>(such mouseovers, pop-ups or drill-down views)</em></p>
<p>Hierarchizing information is not just about promoting important information. It&#8217;s also about demoting information which, while is useful in its own right, doesn&#8217;t deserve to steal the show from the higher level metric. The great thing about interactive dashboards is that there are many mechanisms for that. Some information can be kept as &#8220;details on demand&#8221; and only shown when needed.</p>
<p><em>Figure out what <strong>form</strong> to give to the data</em></p>
<p>So you have data. It probably changes over time, too (and you have that history as well!). And a sense of how important it is.</p>
<p>You can represent it as a static number (and, further, to adjust the precision of that number) or as a time series (i.e. line graph, area graph, bar graph etc.), or both.</p>
<p>The key question to answer is whether the history and how the metric moved over time is relevant and important, versus the latest figures.  If you think that the history is always important or that it doesn&#8217;t hurt to have it for context anyway, consider that it&#8217;s yet another visual element to digest, another thing that can be misinterpreted, and that unless its importance is clearly demonstrated, you&#8217;d rather not include it. Yes &#8211; even as a tiny sparkline.</p>
<p><img class="alignnone" src="http://www.jeromecukier.net/projects/dashboards/jl-facebook-insights-overview.png" alt="" width="482" height="492" /></p>
<p>Here is another example from my work at Facebook of a page where proper hierarchy has been applied.</p>
<p>Page Insights, to use a parallel with a better known product, is like google analytics, only for Facebook Pages instead of web sites. Unsurprisingly, the metric we put to the top left is the Page Likes, which is the number of people who like a page. The whole point of the system is to let people understand what affects that number and how to grow it. Two other high-level metrics are shown on the same row in the two cards on the right: the Post Reach for the week (number of people who have seen content from this page this week, whether they like the Page or not) and Engagement (number of people who acted on the content &#8211; actions could be liking, commenting, sharing, clicking, etc.)</p>
<p>The number of new Page Likes of the past week, which is represented as a both a line chart and a number in the left card, is an example of a level two metric. It supports the top metric &#8211; total likes. The number of Page Likes of the past week, which is represented as a line chart only, is a level three metric. It&#8217;s here just as a comparison to the number of the current week &#8211; here, it helps us figuring out that last week has been a better week.</p>
<h2>Connecting the dots</h2>
<p>Ultimately, a dashboard is more than a collection of charts. It&#8217;s an ensemble: charts and data are meant to be consumed as a whole, with an order and a structure. Charts that belong together should be seen together. The information gained like so will be much more useful than from looking at them in sequence.</p>
<p><a href="http://www.infovis-wiki.net/index.php?title=Linking_and_Brushing">Linking</a>, for instance, is the concept of highlighting an element in a given chart with repercussions on other charts, depending on the element highlighted. A common use case is to look at a data for one given time point, and see the value for that time point highlighted in related charts. Here is an example:</p>
<p><img class="alignnone" src="http://www.jeromecukier.net/projects/dashboards/linking.png" alt="" width="784" height="212" /></p>
<p>In this specific case, the fact that both charts share the same x-axis makes comparing the shape of both charts easier even without linking.</p>
<p>Each variable doesn&#8217;t have to be on its own chart. Your variables can have an implicit relation between one another. Bringing them together might make that relation explicit. Here are some interesting relationship between variables or properties of variables that can be made apparent through the right chart choice.</p>
<ul>
<li><strong>One variable could be always greater than another one</strong>, because the second is a subset of the first. Here are some examples:</li>
</ul>
<ol>
<li>The number of visits on a website last week will <em>always </em>be greater or equal than the number of unique visitors that week, which will <em>always </em>be greater than the number of visitors last day.</li>
<li>The number of visitors will <em>always</em> be greater to the number of first-time visitors.</li>
<li>The cumulative number of orders over a period of time will <em>always</em> be greater than the number of daily orders over that same period.</li>
<li>The time that users spend with a website in an active window of their browser will <em>always </em>be greater than the time they spend actively interacting with the site.</li>
</ol>
<p style="padding-left: 30px;">What&#8217;s interesting here is that these relations are not just true because of experience, they are true by definition. It&#8217;s also metrics that are expressed in the same units, and, in most cases, with the same order of magnitude, so they can be displayed on the same chart. When applicable, showing them together can show how they, indeed, move together or not.</p>
<ul>
<li><strong>One variable could be the sum of two other</strong>, less important <strong>variables</strong>.</li>
</ul>
<p style="padding-left: 30px;">In the example below we go even one step further and we show that one variable is the sum of two variables minus a fourth one.<br />
Here, we look at the net likes of a Facebook Page, that is, the difference between the number of people who like a page on a given day and the day before.<br />
Two factors can make more people like a page: paid likes (a user sees an ad, is interested, and from it, likes the page) or organic likes (a user visits a page, or somehow see content from that page, and likes it, without advertisement involved). Finally, people may also decide to stop liking the page (&#8220;unlikes&#8221;).<br />
Here, net likes = organic likes + paid likes &#8211; unlikes. The reason why we have decomposed Likes between organic and paid is because we wanted to show that ads can amplify the effect of good content. So, visually, we chose to represent that as a layer on top of the rest. (important remark: your dashboard doesn&#8217;t have to be neutral. If it can show that your product, company, team etc. is delivering, and you have an occasion to demonstrate it, don&#8217;t hesitate a moment). By showing the unlikes as a negative number, as opposed to a positive variable, going up, possibly above the likes (which would be unpredictable) we can keep the visual legible and uncluttered. A user can do the visual combination of all these variables. This chart, by the way, shows the typical dynamic of a Page : new content will generate peaks of new users, but also will cause some users to stop liking the page.</p>
<p><img class="alignnone" src="http://www.jeromecukier.net/projects/dashboards/net-likes-1024x454.png" alt="" width="832" height="453" /></p>
<ul>
<li>One variable could be <strong>always growing.</strong> Or <strong>always positive.</strong></li>
</ul>
<p style="padding-left: 30px;">When that is the case this can be used to make choices to represent the chart. If a variable is always growing by nature (i.e. cumulative revenue) you may want to consider representing a growth rate rather than the raw numbers. A reason to consider that is that your axis scale will have to change over time (i.e. if you plot a product that sells for around $1m per day, having an axis that goes from 0 to $10m would be enough for a week, but not for a month let alone for a year, whereas with a growth rate you can represent a long period of time consistently). And if a variable is always positive (ie stock price), your y axis can start at 0, or even at an arbitrary positive value, as opposed to allocate space for negative values.</p>
<p style="padding-left: 30px;">Conversely, if a variable doesn&#8217;t change over time, it doesn&#8217;t mean that it&#8217;s not interesting to plot. That absence of change could be a sign of health of the system (which is the kind of task that dashboards can be useful for). So the absence of change doesn&#8217;t mean that there&#8217;s an absence of message.</p>
<p style="padding-left: 30px;">
]]></content:encoded>
			<wfw:commentRss>/2015/02/07/charts-assemble/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Dashboards as products</title>
		<link>/2015/02/07/dashboards-as-products/</link>
		<comments>/2015/02/07/dashboards-as-products/#comments</comments>
		<pubDate>Sat, 07 Feb 2015 01:00:19 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[charts]]></category>
		<category><![CDATA[dashboards]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://www.jeromecukier.net/?p=1626</guid>
		<description><![CDATA[In the past few articles I&#8217;ve exposed what dashboards are not: an exercise in visual design, an exercise in data visualization technique. Another way to put this is that &#8220;let&#8217;s do this just because we can&#8221; is a poor mantra when it comes to designing dashboards, or visualizations in the broader sense by the way. <a class="read-more" href="/2015/02/07/dashboards-as-products/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>In the <a href="http://wp.me/po630-q7">past few articles</a> I&#8217;ve exposed what dashboards are not:</p>
<ul>
<li>an exercise in <em>visual design</em>,</li>
<li>an exercise in <em>data visualization</em> technique.</li>
</ul>
<p>Another way to put this is that &#8220;let&#8217;s do this just because we can&#8221; is a poor mantra when it comes to designing dashboards, or visualizations in the broader sense by the way.</p>
<h3>Do it for the users</h3>
<p>Now saying that dashboards should be products is a bit tautological. Products, in <a href="https://medium.com/@ericeriksson/what-is-product-design-9709572cb3ff">product design</a>, refer to the result of a holistic process that solves problems of users &#8211; a process that includes research, conception, exploration, implementation and testing.</p>
<p>Most importantly, it&#8217;s about putting the needs of your users first. And your users first. Interestingly, treating your dashboard as a product means that the dashboard &#8211; your product &#8211; doesn&#8217;t come first.</p>
<p>Creating an awesome dashboard is a paradox. Googling for that phrase yields results such as: <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=6&amp;cad=rja&amp;uact=8&amp;ved=0CDwQFjAF&amp;url=http%3A%2F%2Fdesignrfix.com%2Fdesign%2Fdashboard-design&amp;ei=ZxLVVLHBDMinyATrrYKIDg&amp;usg=AFQjCNEYq1L0bANEmTwSHUGW_ik0BK7GYw&amp;sig2=YKmhFLbmFb0DyHzLAStdvw&amp;bvm=bv.85464276,d.aWw" data-href="http://designrfix.com/design/dashboard-design">20+ Awesome Dashboard Designs That Will Inspire You</a>, <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=7&amp;cad=rja&amp;uact=8&amp;ved=0CEMQFjAG&amp;url=http%3A%2F%2Fthedesigninspiration.com%2Farticles%2F25-innovative-dashboard-concepts-and-designs%2F&amp;ei=ZxLVVLHBDMinyATrrYKIDg&amp;usg=AFQjCNFyv8w3cGH5EbU8B0Gz27itiPqOag&amp;sig2=r65foADN-OBimw71AsI7Yg&amp;bvm=bv.85464276,d.aWw" data-href="http://thedesigninspiration.com/articles/25-innovative-dashboard-concepts-and-designs/">25 Innovative Dashboard Concepts and Designs</a>, <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=10&amp;cad=rja&amp;uact=8&amp;ved=0CFMQFjAJ&amp;url=https%3A%2F%2Feconsultancy.com%2Fblog%2F62844-24-beautifully-designed-web-dashboards-that-data-geeks-will-love%2F&amp;ei=ZxLVVLHBDMinyATrrYKIDg&amp;usg=AFQjCNFPyaQZJ_EUP-GRZJRdRRa8Ho5Cqw&amp;sig2=ypVCYsOtIemTJnX1R4Amuw&amp;bvm=bv.85464276,d.aWw" data-href="https://econsultancy.com/blog/62844-24-beautifully-designed-web-dashboards-that-data-geeks-will-love/">24 beautifully-designed web dashboards that data geeks</a> or <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=13&amp;cad=rja&amp;uact=8&amp;ved=0CGUQFjAM&amp;url=http%3A%2F%2Fline25.com%2Farticles%2F25-visually-stunning-app-dashboard-design-concepts&amp;ei=ZxLVVLHBDMinyATrrYKIDg&amp;usg=AFQjCNHrWPNZt1Vn__39P4DkysUI1XStUA&amp;sig2=E9t5cHkELGbb_G8zGZSROA&amp;bvm=bv.85464276,d.aWw" data-href="http://line25.com/articles/25-visually-stunning-app-dashboard-design-concepts">25 Visually Stunning App Dashboard Design Concepts</a>. This is NOT dashboard product design (though it&#8217;s a good source of inspiration for visual design of individual charts).</p>
<p>Eventually, <strong>no one cares for your dashboard</strong>. When designing a dashboard, it&#8217;s nice to think that somebody out there will now spend one hour everyday looking at all this information nicely collected and beautifully arranged, but who would want to do that? Who would want to add to their already busy day an extra task, just to look at information the way you decided to organize it? This point of view is a delusion. We must not work accordingly.</p>
<p>Instead, let&#8217;s focus on the task at hand. What is something that your users would try to accomplish that could be supported by data and insights?</p>
<h3>What is the task at hand?</h3>
<p>If you start to think &#8220;show something at the weekly meeting&#8221; or &#8220;make a high-level dashboard&#8221; I invite you to go deeper. Show what? a dashboard for what? not for its own sake.</p>
<p>Trickier &#8211; how about: &#8220;to showcase the data that we have&#8221;? That is still not good enough. <strong>You shouldn&#8217;t start from your data</strong> to create your dashboard, and for several reasons. Doing so would limit yourself to the data that you have or which is readily available for you. But maybe that this data, in its raw form, is not going to be relevant or useful to your users. Conversely, you would be tempted to include all the data that you have, but each additional information that you bring to your dashboard would make it harder to digest and eventually detrimental to the process. Most importantly, if you don&#8217;t have an idea of what the user would want to accomplish with your data, you cannot prioritize and organize it, which is the whole point of dashboard design.</p>
<p>Finally &#8211; &#8220;to discover insights&#8221; is not a task either. Dashboards are a curated way to present data for a certain purpose. They are not unspecified, multi-purpose analytical exploration tools. In other words: dashboards will answer a specific, already formulated question. And they will answer in the best possible way, if they are designed as such. For exploration, ad-hoc analysis is more efficient, and is probably best left to analysts or data scientists than end users.</p>
<p>Here are some example of tasks:</p>
<ul>
<li><strong>check</strong> that things are going ok &#8211; that there is no preventable disaster going on somewhere. For instance: website is up &#8211; visits follow a predictable pattern.</li>
<li>Specifically, check that a <strong>process had completed</strong> in an expected way. For instance: all payments have been cleared.</li>
<li>If something goes wrong, <strong>troubleshoot</strong> it &#8211; find the likely cause. For instance: sales were down for this shop&#8230; because we ran out of an important product. Order more to fix the problem, make sure to stock accordingly next time.</li>
<li>Support a <strong>tactical decision</strong>. For instance: here are the sales of the new product, here are the costs. Should we keep on selling it or stop?</li>
<li>Decide where to <strong>allocate resources</strong>. For instance: we launched three variations of a product, one is greatly outperforming the other two, let&#8217;s run an ad campaign to promote the winner.</li>
<li>Try to <strong>better understand</strong> a complex system. For instance: user flow between pages can show where users are dropping out or where efficiency gains lie.</li>
</ul>
<p>This list is by no means limitative. But it&#8217;s really useful to start from the problem at hand than just try to create a visual repository for data.</p>
<p>Next, we&#8217;ll see how to implement these in the last article: <a href="http://www.jeromecukier.net/blog/2015/02/07/charts-assemble/">charts assemble!</a></p>
]]></content:encoded>
			<wfw:commentRss>/2015/02/07/dashboards-as-products/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Dashboards versus data visualization</title>
		<link>/2015/02/07/dashboards-versus-data-visualization/</link>
		<comments>/2015/02/07/dashboards-versus-data-visualization/#comments</comments>
		<pubDate>Sat, 07 Feb 2015 00:58:57 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[charts]]></category>
		<category><![CDATA[dashboards]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://www.jeromecukier.net/?p=1619</guid>
		<description><![CDATA[Dashboards are extreme data visualizations In the recent Information is Beautiful 2014 awards,  I found interesting that there is an infographics and a data visualization categories. My interpretation is that the entries in the infographics section are static and illustrated, while those in the data visualization are generated and data-driven. However, all the featured data <a class="read-more" href="/2015/02/07/dashboards-versus-data-visualization/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<h2>Dashboards are extreme data visualizations</h2>
<p>In the recent <a href="http://www.informationisbeautifulawards.com/showcase?award=2014&amp;page=1&amp;pcategory=winner&amp;type=awards">Information is Beautiful 2014 awards</a>,  I found interesting that there is an infographics and a data visualization categories. My interpretation is that the entries in the infographics section are static and illustrated, while those in the data visualization are generated and data-driven. However, all the featured data visualization projects are about a one-off dataset. So aesthetical choices of the visualization depend on the characteristics of this particular dataset. By contrast, the dashboards I have worked with are about a live, real-time datastream. They have to look good (or at least &#8211; to function) whatever the shape and size of the data that they show. The google quote and news chart that we saw earlier must work for super volatile shares, for more stable ones, for indices, currencies, etc. So, if the distinction between infographics and data visualization makes sense to you, imagine that dashboards sit further in that continuum than data visualization. Not only are dashboards generated from data, like data visualizations, but they are also real-time and should function with datasets of many shapes and sizes.</p>
<h2>But dashboards problems are not data visualization problems</h2>
<p>Data visualization provides superior tools and techniques to present or analyze data. With libraries and languages dedicated to making visualizations, there is little that can&#8217;t be done. In many successful visualizations, the author will create an entirely new form, or at least control the form very finely to match their data and their angle. Even without inventing a new form, there are many which have been created for a specific use, and which are relatively easy to make on the web (as opposed to say, in Excel): <a href="https://www.google.fr/search?q=tree+maps&amp;safe=off&amp;espv=2&amp;biw=2025&amp;bih=1140&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=UCR4VNmKAufCiALyo4FY&amp;ved=0CAYQ_AUoAQ#safe=off&amp;tbm=isch&amp;q=treemaps">treemaps</a>, <a href="https://www.google.fr/search?q=tree+maps&amp;safe=off&amp;espv=2&amp;biw=2025&amp;bih=1140&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=UCR4VNmKAufCiALyo4FY&amp;ved=0CAYQ_AUoAQ#safe=off&amp;tbm=isch&amp;q=force-directed+graphs">force-directed graphs</a> and other <a href="https://www.google.fr/search?q=tree+maps&amp;safe=off&amp;espv=2&amp;biw=2025&amp;bih=1140&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=UCR4VNmKAufCiALyo4FY&amp;ved=0CAYQ_AUoAQ#safe=off&amp;tbm=isch&amp;q=node-link+diagrams">node-link diagrams</a>, <a href="https://www.google.fr/search?q=tree+maps&amp;safe=off&amp;espv=2&amp;biw=2025&amp;bih=1140&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=UCR4VNmKAufCiALyo4FY&amp;ved=0CAYQ_AUoAQ#safe=off&amp;tbm=isch&amp;q=chord+diagrams">chord diagrams</a>, <a href="https://www.google.fr/search?q=tree+maps&amp;safe=off&amp;espv=2&amp;biw=2025&amp;bih=1140&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=UCR4VNmKAufCiALyo4FY&amp;ved=0CAYQ_AUoAQ#safe=off&amp;tbm=isch&amp;q=dendrograms">trees</a>, <a href="https://www.google.fr/search?q=tree+maps&amp;safe=off&amp;espv=2&amp;biw=2025&amp;bih=1140&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=UCR4VNmKAufCiALyo4FY&amp;ved=0CAYQ_AUoAQ#safe=off&amp;tbm=isch&amp;q=bubble+charts">bubble charts</a> and the like. And even good old geographic maps.</p>
<p>In most cases, it is not a good idea to be too clever and have a more advanced form.</p>
<p>Up until mid November 2014, Google Analytics allowed users to view their data using <a href="https://www.youtube.com/watch?v=UKsBTqqhVTs">motion charts</a>.</p>
<p><img class="alignnone" src="http://jeromecukier.net/projects/dashboards/motion charts" alt="" width="1280" height="784" /></p>
<p>This was really an example of having a hammer and considering all problems as nails. Fortunately, this function disappeared from the latest redesign.</p>
<p><img class="alignnone" src="http://media-cache-ec0.pinimg.com/736x/1c/69/b7/1c69b7ea8e23d5d8fd800a67e727d0db.jpg" alt="" width="736" height="432" /></p>
<p>Likewise, on twitter followers dashboard, the treemap might be a bit over the top:</p>
<p><img class="alignnone" src="http://media-cache-ec0.pinimg.com/736x/5c/27/85/5c278591a95c319bacdf974b62b991e2.jpg" alt="" width="736" height="775" /></p>
<p>and possibly confusing and not immediately legible to some users. On the other hand, it is economical in terms of space and would probably work in almost every case which are two things that dashboards should be good at. So while I wouldn&#8217;t have used it myself I can understand why this decision has been made.</p>
<h2>Dashboards are not an exercise in visual design either</h2>
<p>A dashboard such as this:</p>
<p><img class="alignnone" src="http://media-cache-ec0.pinimg.com/736x/b0/e1/8c/b0e18c6936bde1ce92c42a0b0c7e6f84.jpg" alt="" width="736" height="1128" /></p>
<p>(for which I can&#8217;t find the source. I found it on pinterest and was able to trace it to <a href="https://econsultancy.com/blog/62844-24-beautifully-designed-web-dashboards-that-data-geeks-will-love">this post</a> but not prior) is well designed visually, it makes proper use of space, colors and type, its charts are simple.</p>
<p>But what good is it? what do I learn, what can I take away from it, what actions can I perform?</p>
<p>Most of the dashboards examples I find on sites like dribbble or beyance (see <a href="http://www.pinterest.com/jcukier/data-vis-dashboard-ui-elements/">my Pinterest board</a>) fall into that category: inspiring visual design, probably not real data, no flow, no obvious use.</p>
<h2>Dashboards are problems of their own</h2>
<p>What makes a dashboard, or any other information-based design successful, is neither the design execution nor the clever infovis technique. Dashboards, eventually, are meant to be useful and to solve a specific problem.</p>
<p>How so? We&#8217;ll see in the next article: <a href="http://www.jeromecukier.net/blog/2015/02/07/dashboards-as-products/">dashboards as products. </a></p>
<p>&nbsp;</p>
]]></content:encoded>
			<wfw:commentRss>/2015/02/07/dashboards-versus-data-visualization/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Charts in the age of the web</title>
		<link>/2015/02/07/charts-in-the-age-of-the-web/</link>
		<comments>/2015/02/07/charts-in-the-age-of-the-web/#comments</comments>
		<pubDate>Sat, 07 Feb 2015 00:57:41 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[charts]]></category>
		<category><![CDATA[dashboards]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://www.jeromecukier.net/?p=1610</guid>
		<description><![CDATA[In 2008, when I was working at OECD, my job description was that of an editor. That implied I was mostly working on books. I was designing charts, but they were seen as components of books. And this was typical of the era. So we would create charts like this one: And it was awesome! <a class="read-more" href="/2015/02/07/charts-in-the-age-of-the-web/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>In 2008, when I was working at <a href="http://www.oecd.org/">OECD</a>, my job description was that of an editor. That implied I was mostly working on books. I was designing charts, but they were seen as components of books. And this was typical of the era.</p>
<p>So we would create charts like this one:</p>
<p><img class="alignnone" src="http://jeromecukier.net/projects/dashboards/02-01-01-g2" alt="" width="685" height="288" /></p>
<p>And it was awesome! (kind of). I mean, we respected all the rules. Look at that nicely labelled y-axis! and all the categories are on the x-axis! the bars are ordered in size, it&#8217;s easy to see which has the biggest or smallest value! And with those awesome gridlines, we can lookup values &#8211; at least get an order of magnitude.</p>
<p>What we really did though was apply styling to an excel chart (literally).</p>
<h2>Print charts vs interactive charts</h2>
<h3>Origin of rules for print charts</h3>
<p>Rules that govern traditional charts (which are many: ask Tufte, Few) make a certain number of assumptions which are interesting to question today.</p>
<p>One is that charts should be designed so that values can be easily looked up (even approximately) from the chart. This is why having labeled axes and gridlines is so useful. This is also why ordering bar charts in value order is nice. With that in mind, it also makes sense that charts like bar charts or area charts, which compare surfaces, be drawn on axes that start at 0.</p>
<p>The other assumption is that a chart will represent the entirety of a dataset that can be shown at a time. We have to come up with ways to make sure that every data point can be represented and remains legible. The chart author has to decide, once and for all, which is the dataset that will be represented, knowing that there will be &#8220;no backsies&#8221;.</p>
<p>In the same order of thought, the author must decide the form of his chart. If she wants to compare categories, she may go for a bar chart. If she wants to show an evolution over time, for a line chart. And if she wants the user to have exact values, she will choose a table.</p>
<p>And so, when everything else than a table is chosen, we typically don&#8217;t show values with all the data points, because adding data labels would burden the chart and make its overall shape harder to make out.</p>
<p>In this framework, it makes sense to think in term of <strong>data-ink </strong>(the cornerstone of Tuftean concepts): make sure that out of all the ink needed to print the chart (you can tell it&#8217;s a print concept already&#8230;), as much should go to encode the data as possible, versus anything else.</p>
<h3>How about now</h3>
<p><img class="alignnone" src="http://jeromecukier.net/projects/dashboards/chart trad vs online 2" alt="" width="680" height="847" /></p>
<p>However, there is not a single of these reasons which is valid today in the world of web or mobile charts. Data-ink only made sense on paper. </p>
<p>Web charts have many mechanisms to let the user get extra information on a given data point. That can be information that updates on mouseover, callouts and tooltips&#8230; This might be less true of mobile in general where the distinction between hovering and clicking is less distinct. But it is definitely possible to obtain more than what is originally displayed. If I want to have an exact value, I shouldn&#8217;t have to simply deduce that from the shape of the chart. There can be mechanisms that can deliver that to me on demand.</p>
<h3>An example: Google Finance Quote &amp; News</h3>
<p>The <a href="https://www.google.com/finance?q=NASDAQ%3AGOOG">Google Finance Quote and News chart</a> is a very representative example of a web-native chart. Around since 2006, they provide the price of a given security, along with news for context. While its visual design has probably been topped by other dashboards, what makes it a great example is that it&#8217;s publicly available, which is uncommon for business data.</p>
<p><img class="alignnone" src="http://jeromecukier.net/projects/dashboards/online chart" alt="" width="984" height="543" /></p>
<p>While this chart has gridlines and labelled axes, that is not enough to lookup precise values. However, moving the <strong>mouse over</strong> the chart allows the user to read a precise value at a given point in time. A blue point appears and the precise value can be read in the top left corner.</p>
<p><img class="alignnone" src="http://jeromecukier.net/projects/dashboards/mouseover" alt="" width="996" height="524" /></p>
<p>One very common <strong>data filter </strong>in chart is controls that affect the time range: date pickers. By selecting a different time range, we make the chart represent a different slice of the dataset &#8211; we effectively filter the dataset so that only the relevant dates are shown. This is in contrast with the traditional printed charts, again, where all of the dataset is shown at once. For instance, we can click on &#8220;6m&#8221; and we&#8217;ll be treated with data from the last 6 months:</p>
<p><img class="alignnone" src="http://jeromecukier.net/projects/dashboards/data filters" alt="" width="985" height="424" /></p>
<p>Comparing the selected security with others will make the chart show the data in a <strong>different mode</strong>. This is the same data (plus added series), in the same screen and the same context, but the chart is visually very different:</p>
<p><img class="alignnone" src="http://jeromecukier.net/projects/dashboards/different modes" alt="" width="986" height="526" /></p>
<p>As to the other two characteristics of web charts I mentioned, <strong>data exports</strong> and <strong>drill downs, </strong>they are also featured (but less graphical to show, so I haven&#8217;t captured a screenshot for those). There is a link on a left-side column to get the equivalent data (so it is always possible to go beyond what is shown on screen). The little flags with letters in the 3 first screenshots are clickable, and represent relevant news. Clicking them will highlight that article in a right-side column. So it is always possible to get more information.</p>
<h3>What does that change?</h3>
<p>Everything.</p>
<p>Rules or best practices based on the assumption that data is hard to lookup or to compare are less important. The chart itself has to be legible though. So, for instance, it&#8217;s ok to have pie charts or donut charts, as long as the number of categories doesn&#8217;t go totally overboard.</p>
<p>Web charts, and dashboards even more so, should focus on<strong> only showing relevant data</strong> first, then showing it in the most useful and legible way. Again, a noted difference with the print philosophy where as much data as possible should be shown.</p>
<p>How this play out is what we&#8217;ll cover in the <a href="http://www.jeromecukier.net/blog/2015/02/07/dashboards-versus-data-visualization/">next articles of the series: Dashboards versus data visualizations.</a></p>
<p>&nbsp;</p>
]]></content:encoded>
			<wfw:commentRss>/2015/02/07/charts-in-the-age-of-the-web/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
