<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Uncategorized &#8211; jckr.github.io/blog</title>
	<atom:link href="http://localhost/category/uncategorized/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Just another WordPress site</description>
	<lastBuildDate>Wed, 17 Aug 2016 05:36:39 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.10</generator>
	<item>
		<title>The big leagues</title>
		<link>/2016/08/17/the-big-leagues/</link>
		<comments>/2016/08/17/the-big-leagues/#comments</comments>
		<pubDate>Wed, 17 Aug 2016 05:36:39 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1765</guid>
		<description><![CDATA[This is the 7th and last post in my Visualization with React series. Previous post: Creating a React visualization web app We can finally take the little wheels off and create a real React app. That&#8217;s what we&#8217;ll make: You can try the app for yourself here. The code is available on github. This time, <a class="read-more" href="/2016/08/17/the-big-leagues/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>This is the 7th and last post in my <a href="/2016/08/09/visualization-with-react/">Visualization with React</a> series. Previous post: <a href="/2016/08/17/creating-a-react-visualization-web-app/">Creating a React visualization web app</a></p>
<p>We can finally take the little wheels off and create a real React app.<br />
That&#8217;s what we&#8217;ll make:<br />
<img src="http://jckr.github.io/blog/assets/visualization-with-react/react-weather-app" alt="App screenshot" /><br />
You can <a href="http://jckr.github.io/blog/projects/react-weather/">try the app for yourself here</a>. The code is available on <a href="https://github.com/jckr/react-weather">github</a>. </p>
<p>This time, instead of loading data from a paltry CSV file, we&#8217;ll go live and hit the <a href="http://openweathermap.org/">openweathermap</a> API and get live weather data.</p>
<p>The app may be more complex than anything we&#8217;ve done before, but it&#8217;s really more of the same, so I&#8217;ll be probably quicker. </p>
<p>First, look at the secrets.json file. As you can guess, it can&#8217;t work as is &#8211; if you want to try this at home, you must get your own (free) API key from openweathermap. </p>
<p>Next, let&#8217;s take a look at our constants.js file.<br />
At this stage, you might ask: why not put the API key in that constants file? Well, it&#8217;s good practice to never store your API keys in your code. So, I put it in a separate file.<br />
Constants.js is pretty simple. It has: a url prefix (that of the openweathermap api). If they change it, I can just edit the constants file. The CITY_ID holds the identifier of San Francisco. You can replace it by whatever you want (it&#8217;s not too difficult to find the city_id for any given city at the OWM web site).<br />
Finally, I have a json object called KEYS where I store what I&#8217;m interested in getting from the API. </p>
<p>Let&#8217;s move to the App.js file, which is the top-level react file.</p>
<pre class="brush: plain; title: ; notranslate">
import React, { Component } from 'react';
import './App.css';
import '../node_modules/react-vis/main.css';
import {json} from 'd3-request';
import * as CONSTANTS from './constants';
import secrets from './secrets.json';
const {API} = secrets;
</pre>
<p>Note that I can import my json file like a code file. </p>
<p>We start, unsurprisingly, by creating an App component, and by a constructor method.</p>
<pre class="brush: plain; title: ; notranslate">
class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      highlighted: null
    };
    this.highlightX = this.highlightX.bind(this);
    this.processResults = this.processResults.bind(this);
  }
</pre>
<p>We initialize the state, and bind two methods. Nothing we haven&#8217;t seen.</p>
<pre class="brush: plain; title: ; notranslate">
  componentWillMount() {
    json(`${CONSTANTS.QUERY_PREFIX}?id=${CONSTANTS.CITY_ID}&amp;appid=${API}&amp;units=imperial`,
      this.processResults);
  }
</pre>
<p>Things get interesting with the componentWillMount method.<br />
We use our d3-request json function to read the url in the first line, which we compose by joining the URL prefix, the city id, the api key, and I&#8217;ve added &#8216;units=imperial&#8217; so that temperatures are in Farenheit. Feel free to change this to units=metric or remove it (in which case temperatures will be in Kelvin, why not).<br />
The second argument of the json function is what is done with the request &#8211; this is our first private method, processResults, which is what comes next.</p>
<pre class="brush: plain; title: ; notranslate">
 processResults(error, queryResults) {
    if (error) {
      this.setState({error});
    }
    const data = CONSTANTS.KEYS.map(key =&gt; ({
      key,
      values: queryResults.list.map((d, i) =&gt; ({
        i,
        x: d.dt * 1000,
        y: d[key.key1] ? d[key.key1][key.key2] || 0 : 0 
      }))
    })).reduce((prev, curr) =&gt; {
      return {...prev, [curr.key.name]: curr.values}
    }, {
      'city-name': (
        queryResults &amp;&amp;
        queryResults.city &amp;&amp;
        queryResults.city.name
      ) || 'Unkown'
    });
    this.setState({data});
  }
</pre>
<p>If the data can&#8217;t load, error will have a value, and we&#8217;ll pass it to the state.<br />
Else, we&#8217;re going to process the result of the query (queryResults) according to the structure that we want (CONSTANTS.KEYS).<br />
Here, I&#8217;m using a sequence of map and reduce.<br />
Map turns an array into another array of the same shape. Reduce turns an array into something else, such as an object as here.<br />
queryResults is an object which has a list property. queryResults.list is an array of nested objects. This is why each entry of CONSTANTS.KEYS specifies two keys.<br />
To simplify, one of these objects could look like this: </p>
<pre class="brush: plain; title: ; notranslate">
{
  &quot;dt&quot;: 1471413600,
  &quot;main&quot;: {
    &quot;temp&quot;: 57.22,
    &quot;temp_min&quot;: 53.32,
    &quot;temp_max&quot;: 57.22,
    &quot;pressure&quot;: 1017.57,
    &quot;sea_level&quot;: 1025.63,
    &quot;grnd_level&quot;: 1017.57,
    &quot;humidity&quot;: 100,
    &quot;temp_kf&quot;: 2.17
  },
  &quot;weather&quot;: [
    {
      &quot;id&quot;: 500,
      &quot;main&quot;: &quot;Rain&quot;,
      &quot;description&quot;: &quot;light rain&quot;,
      &quot;icon&quot;: &quot;10n&quot;
    }
  ],
  &quot;clouds&quot;: {
    &quot;all&quot;: 24
  },
  &quot;wind&quot;: {
    &quot;speed&quot;: 3.42,
    &quot;deg&quot;: 234.501
  },
  &quot;rain&quot;: {
    &quot;3h&quot;: 0.02
  },
  &quot;sys&quot;: {
    &quot;pod&quot;: &quot;n&quot;
  },
  &quot;dt_txt&quot;: &quot;2016-08-17 06:00:00&quot;
}
</pre>
<p>So, if I&#8217;m interested in the temperature, I have to get it from main, then temp. (two keys)<br />
For each entry of CONSTANTS.KEYS, I&#8217;m <em>mapping</em> queryResults to create a time series of objects with three properties: in x, a date in timestamp format (number of milliseconds since 1970). in y, the value I&#8217;m interested in. and in i, the index of that object in the time series.</p>
<p>When I&#8217;m done mapping CONSTANTS.KEYS, I have an array of such time series, or more exactly: an array of objects with a name property (which comes from CONSTANTS.KEYS) and a values property (the array of objects described above). </p>
<p>Finally, I&#8217;m reducing it to an object using reduce.<br />
The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">reduce method</a> works like this: </p>
<pre class="brush: plain; title: ; notranslate">
myArray.reduce(function(prev, curr) {
  // operation involving the previous result (prev) and the current element of the array (curr)
  return resultOfThatOperation;}, // which becomes prev in the next loop
  initialValueOfReduce) // which will go into prev the first time 
</pre>
<p>What mine does is turn that array into an object. The keys of that object are the name property of each element, and the values are what&#8217;s behind the values property of that object (our time series).<br />
And that final object has an extra property: city-name, the name of the city for which weather is being queried, if it exists. </p>
<p>When this object is created, we send it to the state. </p>
<pre class="brush: plain; title: ; notranslate">
  highlightX(highlighted) {
    this.setState({highlighted});
  }
</pre>
<p>highlightX is our other private method. What it does is send whatever it&#8217;s passed to the state. But since we create it here, it will pass that to the state of App, the top level component. If that state is changed, all the children (ie everything) may be re-rendered.</p>
<p>Finally, we have our render method.<br />
We&#8217;ll skip on the styling &#8211; codewise, we&#8217;ll see that this method calls two components, LargeChart and SmallChart, with similar properties:</p>
<pre class="brush: plain; title: ; notranslate">
&lt;LargeChart
  highlighted={highlighted}
  highlightX={this.highlightX}
  series={data.Temperature}
  title='Temperature'
/&gt;

// ...

&lt;SmallChart
  highlighted={highlighted}
  highlightX={this.highlightX}
  series={data.Pressure}
  title='Pressure'
/&gt;
</pre>
<p>highlighted comes from the state of App.<br />
highlightX is the callback method. We&#8217;ve seen this before &#8211; we give children components the ability to change the state of their parent, and we also pass them the result of that change.<br />
Else, we pass to each component a part of our data object, and a different title. </p>
<p>Let&#8217;s move on to the large chart component: </p>
<pre class="brush: plain; title: ; notranslate">
import React, { Component } from 'react';
import moment from 'moment';
import {
  LineSeries,
  makeWidthFlexible,
  MarkSeries,
  VerticalGridLines,
  XAxis,
  XYPlot,
  YAxis
} from 'react-vis';

const HOUR_IN_MS = 60 * 60 * 1000;
const DAY_IN_MS = 24 * HOUR_IN_MS;

const FlexibleXYPlot = makeWidthFlexible(XYPlot);
</pre>
<p>so far, we&#8217;re importing a bunch of stuff.<br />
the two constants that we create are the numbers of milliseconds in an hour, and in a day, which will be useful in a bit.<br />
FlexibleXYPlot is a special react-vis component that can resize (in width). By using this as opposed to XYPlot with a fixed width, we can make our app layout responsive (<a href="http://jckr.github.io/blog/projects/react-weather/">try resizing the window!</a>) without having to think too hard it.</p>
<pre class="brush: plain; title: ; notranslate">
export default class LargeChart extends Component {
  render() {
  	const {highlighted, highlightX, series} = this.props;
   	const minValue = Math.min(...series.map(d =&gt; d.y));
  	const maxValue = Math.max(...series.map(d =&gt; d.y));

  	const yDomain = [0.98 * minValue, 1.02 * maxValue];
  	const tickValues = series.map(d =&gt; d.x);

    const labelValues = makeLabelValues(series);
</pre>
<p>Eh, we could have made a pure functional component, since this one only has a render method and no state.<br />
First, we come up with the bounds of the domain. We don&#8217;t have to. Note the use of the spread operator for a very concise way to write this.<br />
We create yDomain with a little bit of margin &#8211; we start with 98% of the smallest value, and go to 102% of the maximum value.<br />
If we don&#8217;t define a domain, then react-vis will create it based on the data &#8211; it will start with exactly the smallest value and end with exactly the highest. </p>
<p>tickValues will be all the different x values.<br />
labelValues will be created by a separate function (in the end). We&#8217;ll write a label for every day of our time series at precisely midnight.</p>
<p>Now we&#8217;ll create the chart proper. </p>
<pre class="brush: plain; title: ; notranslate">
&lt;FlexibleXYPlot
    	height={300}
    	margin={{top: 5, bottom: 25, left: 40, right: 0}}
    	onMouseLeave={() =&gt; this.props.highlightX(null)}
    	yDomain={yDomain}
    &gt;
    	&lt;VerticalGridLines 
    		values={labelValues}
    	/&gt;
        &lt;HorizontalGridLines /&gt;
    	&lt;LineSeries 
    		data={series}
    		onNearestX={highlightX}
    		stroke='#11939a'
    		strokeWidth={2}
    	/&gt;
    	{highlighted ? 
    		&lt;LineSeries
    			data={[
    				{x: highlighted &amp;&amp; highlighted.x, y: yDomain[0]},
    				{x: highlighted &amp;&amp; highlighted.x, y: yDomain[1]}
    			]}
    			stroke='rgba(17,147,154,0.7)'
    			strokeWidth={2}
    		/&gt; : null
    	}
       {highlighted ?  
       &lt;MarkSeries
          data={[{
            x: highlighted &amp;&amp; highlighted.x,
            y: highlighted &amp;&amp; series[highlighted.i].y
          }]}
          color='rgba(17,147,154,0.7)'
        /&gt; : null
        }
    	&lt;XAxis 
    		tickSize={4}
    		tickValues={tickValues}
    		labelValues={labelValues}
    		labelFormat={(d) =&gt; moment(new Date(d)).format('MM/DD')}
    	/&gt;
        &lt;YAxis 
        	tickSize={4}
        /&gt;
    	
    &lt;/FlexibleXYPlot&gt;
</pre>
<p>The first interesting thing is the onMouseLeave property of FlexibleXYPlot. If the mouse leaves the chart, we&#8217;ll use our highlightX callback function to pass &#8220;null&#8221; to the state of App.<br />
In other words, when the mouse is not on a chart, the value of highlighted is null. </p>
<p>A bit later, we see that the first LineSeries has an onNearestX property. What it does is that when somebody mouseovers the chart, it sends the underlying datapoint to the state of App. Remember that these datapoints are objects with three property: x, i and y.</p>
<p>So, at a given moment, highlighted is either null, or of the form: {x: (a date in timestamps format), y: (a value), i: (the position of that datapoint in the time series, ie 10 if that&#8217;s the 10th point)}.</p>
<p>Let&#8217;s go on.<br />
There&#8217;s an interesting construct between curly braces. Remember that in JSX, whatever is between curly braces will be evaluated. Here, we have a ternary operator (condition ? true : false). If highlighted exists, then we will create a LineSeries, else nothing.<br />
What this means is that if there&#8217;s a value for highlighted, we are going to draw a vertical line that spans the whole chart, at the level of the mouseover.<br />
We then have a similar construction for a MarkSeries, which, likewise, draws a circle at the same position as the highlighted data point. </p>
<p>Finally, we create the axes. The XAxis has a few interesting properties: tickValues, which we defined above &#8211; all the possible x values, labelValues and labelFormat. labelValues determine <em>where</em> the labels will be drawn. Finally, labelFormat determines <em>what</em> will be drawn, as a function of each value in labelValues.  </p>
<pre class="brush: plain; title: ; notranslate">
export function makeLabelValues(series) {
  const firstDate = new Date(series[0].x);
  const firstDateHour = firstDate.getHours();
  const firstMidnight = series[0].x + (24 - firstDateHour) * HOUR_IN_MS;

  return [0, 1, 2, 3, 4].map(d =&gt; firstMidnight + d * DAY_IN_MS);
}
</pre>
<p>the last part of this module creates those label values. </p>
<p>Our time series has a number of elements (normally 39), every 3 hours. But the first element is probably not the very beginning of a day. We&#8217;d like our labels to be exactly aligned with the start of a day (midnight).<br />
So we are going to figure out what time it is on the first element of the time series, compute when exactly is the next day, and then create an array of 5 values corresponding to the time we just computed, then the time 24 hours after (start of the next day), the time 24 hours after that, etc.<br />
As a result, we&#8217;ll have a list of 5 &#8216;midnights&#8217; exactly a day apart. </p>
<p>Finally, let&#8217;s look at SmallChart. </p>
<p>SmallChart is very similar to LargeChart. The styling is a bit different (these charts are, well, smaller). The Smallchart component also have an onNearestX hook that sends a datapoint to the state of App.<br />
Unlike LargeChart, it doesn&#8217;t draw a vertical line; it just draws a dot on the curve corresponding to the highlighted time.</p>
<p>So, since App sends the same highlighted to all chart components, mousing over any chart makes that dot appear on all charts. How do we know where to draw it?<br />
If I mouseover on a chart, onNearestX will send to its corresponding callback function the underlying datapoint, that has an x and a y property (and possibly others). If I wanted to draw a dot on that same chart, that would be easy &#8211; I already know the x and y coordinates where I would have to draw it. But how can I draw a dot on all the other charts?<br />
This is why I added that i property to the timeseries to begin with. When I mouseover on a point on any chart, the object I send to App&#8217;s state has that i property. In other words, I can know that I&#8217;ve mouseovered the 10th point of the chart (or the 17th, or the 3rd, etc.). When the LargeChart and SmallChart components will draw the dot, they will draw it on top of the 10th (or 17th, or 3rd&#8230; well, the i-th) point of their own chart. </p>
<pre class="brush: plain; title: ; notranslate">
&lt;MarkSeries
  data={[{
    x: highlighted &amp;&amp; highlighted.x,
    y: highlighted &amp;&amp; series[highlighted.i].y
  }]}
  color='rgba(17,147,154,0.7)'
  size='2'
/&gt;
</pre>
<p>That&#8217;s what series[highlighted.i].y means.</p>
<p>And that&#8217;s it! A complete dashboard with linked charts. You can tell that temperature is lower at night, and probably lower when there are clouds, but then again it&#8217;s San Francisco so it&#8217;s probably always 60 more or less.</p>
<p>This project could be much more complex &#8211; we could have added a tooltip like in our previous app&#8230; added extra series&#8230; and arranged info in a lot of different ways. We could also let the user change the city through a text box. Well, you can make your own version! </p>
<p>(if you&#8217;re curious why I haven&#8217;t hosted this app on github, it&#8217;s because we can only access an HTTP version of the OWM API for free, and since github pages are hosted over HTTPS those requests will be blocked.)</p>
<h1>Now, what</h1>
<p>Congratulations for reading that far, you are awesome.<br />
So you want to take your react game to the next level and do amazing visualizations?<br />
You should continue exploring react-vis. I&#8217;ve only used a very basic case. We use it at Uber to create pretty elaborated charts and dashboards.<br />
Our visualization team is also behind three amazing open source libraries which play well with React: <a href="https://github.com/uber/react-map-gl">React-Map-GL</a>, to create maps with MapBox and React; <a href="https://github.com/uber/deck.gl">Deck.gl</a>, to create webGL layers over maps, and <a href="https://github.com/uber/luma.gl">Luma.gl</a>, a WebGL framework. </p>
<p>One of the best features of React is that it has so many existing modules. <a href="https://github.com/chenglou/react-motion">React-motion</a> is, IMO, the best way to handle animation in React as of now, especially when SVG elements are concerned. Check out that <a href="https://medium.com/@nashvail/a-gentle-introduction-to-react-motion-dc50dd9f2459#.6in161dz0">great article</a> by Nash Vail. </p>
<p>The <a href="https://github.com/facebook/react/">React project page</a> is an evident resource. React is alive, keeps adding features, and there is constantly more code out there using react and pushing the envelope. </p>
<p>The <a href="https://github.com/airbnb/javascript">Airbnb style guide</a> is a solid reference for writing good modern javascript. We don&#8217;t follow it at Uber; we have slightly different rules, which are not published. Anyway, the best part of such a system is its consistency, and Airbnb style guide is definitely consistent.</p>
<p><a href="http://react.rocks/">React Rocks!</a> is a great collection of examples and a source of inspiration.</p>
<p>Once your application become complex enough, it&#8217;s difficult to handle states and callbacks everywhere. You can use a store to address this. Right now the state of the art solution is <a href="http://redux.js.org/">redux</a>. The author of Redux, Dan Abramov, gives an <a href="https://egghead.io/courses/getting-started-with-redux">amazing video tutorial</a> which doubles as an excellent showcase for React and ES6.</p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/17/the-big-leagues/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Creating a React visualization web app</title>
		<link>/2016/08/17/creating-a-react-visualization-web-app/</link>
		<comments>/2016/08/17/creating-a-react-visualization-web-app/#comments</comments>
		<pubDate>Wed, 17 Aug 2016 05:36:32 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1761</guid>
		<description><![CDATA[This is the 6th post in my Visualization with React series. Previous post: Beyond rendering Playing with codepen is fun, but chances are that you have other ambitions for your visualization projects. In the real world, well, in my day job at least, React is used to create web apps. So, in that last part, <a class="read-more" href="/2016/08/17/creating-a-react-visualization-web-app/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>This is the 6th post in my <a href="/2016/08/09/visualization-with-react/">Visualization with React</a> series. Previous post: <a href="http://wp.me/po630-sm">Beyond rendering</a></p>
<p>Playing with codepen is fun, but chances are that you have other ambitions for your visualization projects. In the real world, well, in my day job at least, React is used to create web apps. So, in that last part, we&#8217;re going to create our own web app, load some real data, and use some existing modules to visualize it like pros! In this article, we are going to build this:<br />
<img src="http://jckr.github.io/blog/assets/visualization-with-react/example-app-screenshot.png" alt="" /><br />
You can try a demo of the app at <a href="https://jckr.github.io/example-react-app/">https://jckr.github.io/example-react-app/</a>.<br />
All the code is at <a href="https://github.com/jckr/example-react-app">https://github.com/jckr/example-react-app</a>.</p>
<p>What&#8217;s the difference between a web app and a web page you may ask? Well, a web page is an html document with some links to scripts or some inline javascript. A web app is a comprehensive system of code files working together, including a server. All of these files are transformed via a build system, which creates a compiled version that runs on the browser. Such transformations can include JSX support, or supporting ES6/ES7 syntax. Your work can be split in many, easy to read, easy to maintain source files, but your browser will just read one single file written in a version of Javascript it can understand. </p>
<p>That may sound like a lot of work to setup. Up to a few weeks ago, the easiest way to get started was to use a web scaffolding tool such as <a href="http://yeoman.io/">Yeoman</a>. Scaffolding means that all the little parts that need to be installed or configured to get that going are taken care of, leaving you with a structure that you can use to build your web app upon.<br />
Facebook recently released &#8216;create-react-app&#8217;, which is a simpler scaffolding tool, aimed at simple React apps.</p>
<p>You will need access to a command line environment, such as Terminal on MacOS or Cygwin on windows, and have nodejs and npm installed. (see <a href="https://nodejs.org/en/">https://nodejs.org/en/</a>). You will need node version 4 and above. You may want to use <a href="https://github.com/creationix/nvm">nvm</a> to easily change versions of node if needed.</p>
<p>Here&#8217;s an illustrated guide to what you need to do to get started:<br />
<img src="http://jckr.github.io/blog/assets/visualization-with-react/installing-create-react-app.png" alt="" /><br />
First, install create-react-app with the command: npm install create-react-app -g.<br />
<img src="http://jckr.github.io/blog/assets/visualization-with-react/create-a-new-react-app.png" alt="" /><br />
From the parent directory where you want your app to be, use the command: create-react-app + the name of your app. This will also be the name of the directory this app will be in.<br />
<img src="http://jckr.github.io/blog/assets/visualization-with-react/start-the-app.png" alt="" /><br />
The above command will copy a bunch of files. When it&#8217;s done, go to the directory of your app and type npm start&#8230;<br />
<img src="http://jckr.github.io/blog/assets/visualization-with-react/a-new-react-app-created-with-create-react-app.png" alt="" /><br />
And lo and behold, the app will start and a browser window will appear with the results!<br />
From now on, whenever you change one of the source files, the app will reload and reflect the changes.</p>
<p>Remember when we did scatterplots, I never really got into doing the menial work of making gridlines, axes etc. Exactly for this reason &#8211; it can be a lot of manual work.<br />
But now that we are going to build a professional looking web app, we are going to go all the way. </p>
<h2>One component, one file</h2>
<p>The app we are building has 3 components: the App, which is the parent; Scatterplot, which is the chart proper and HintContent, for some fine control about what the tooltip looks like.<br />
There an index.html and an index.js file, which are very simple: </p>
<pre class="brush: xml; title: ; notranslate">
&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
    &lt;title&gt;React App&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>
<pre class="brush: plain; title: ; notranslate">
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import './index.css';

ReactDOM.render(
  &lt;App /&gt;,
  document.getElementById('root')
);
</pre>
<p>There&#8217;s really not much to say about the index.html. All it does it create a div with an id of root, where everything will go.<br />
The index.js ends with the familiar command ReactDOM.render( &#8230; ), which will output our component into the aforementioned root div.</p>
<p>But it starts with a few import statements. What they do is that they link the source files together.<br />
Index starts by importing functionalities from react: React and ReactDOM. This was done in our codepen environment by using the settings.<br />
The next two lines link our index.js file with other files that we control: App and index.css. App contains our highest-level component, and index.css contains the styles.<br />
I&#8217;ve done some changes in index.css for styles I couldn&#8217;t reach with react &#8211; styles of the body, for instance, or some styles of elements created by libraries over which I didn&#8217;t have direct control (more on that later). Else, I&#8217;m using inline styles, in the React tradition.</p>
<p>Let&#8217;s move to our App.js source file, which describes the App component.</p>
<p>Its last line is: </p>
<pre class="brush: plain; title: ; notranslate">
export default App;
</pre>
<p>And this is the line which corresponds to what we had seen earlier in index.js: </p>
<pre class="brush: plain; title: ; notranslate">
import App from './App';
</pre>
<p>With this pair of statements, inside of index.js, App will be equivalent to what it was inside of App.js when exported.<br />
Using this construct, using import and export, files can be kept short, legible and focused on one specific problem.</p>
<p>But let&#8217;s take another look at the first two lines of App.js: </p>
<pre class="brush: plain; title: ; notranslate">
import React, {Component} from 'react';
import {csv} from 'd3-request';
</pre>
<p>What are those curly braces?</p>
<p>If a module (a javascript file which imports or exports) has a <em>default</em> export, then when importing it, you can just use </p>
<pre class="brush: plain; title: ; notranslate">
import WhatEverNameYouWant from 'module'; 
</pre>
<p>Where WhatEverNameYouWant is actually whatever name you want. Typically, it would start by an uppercase letter, but you do you.<br />
But a module can export other things than the default export. In that case, you have to use curly braces. There&#8217;s many articles on the subject such as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">this one</a>. I&#8217;m mostly bringing it up so that you see there&#8217;s a difference between using the curly braces or not.</p>
<p>In our source files, we are going to use export default. We are also going to define <em>one component only</em> per source file, which makes the whole import / export deal easier to follow.</p>
<p>create-react-app has no dependencies beyond react &#8211; which means that it doesn&#8217;t need other modules to be installed. But this project does! It needs d3-request and react-vis.<br />
You can install them from the command line, by typing npm install d3-request &#8211;save, and npm install react-vis. </p>
<h2>The App component &#8211; loading and passing data</h2>
<p>Our app component will do two things: load the data, and when the data is loaded, pass it to the Scatterplot component so it can draw a chart.<br />
I&#8217;ve hinted at the componentWillMount lifecycle method as a great place to load data, so let&#8217;s try that!</p>
<pre class="brush: plain; title: ; notranslate">
class App extends Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
</pre>
<p>I&#8217;m starting with the constructor method. The only reason why I do that is to initialize the state to an empty object. If I didn&#8217;t, the state would initially be <em>undefined</em>. And while it&#8217;s not a deal-breaker, I would have to add more tests so that the app doesn&#8217;t break before there&#8217;s anything actually useful in the state.</p>
<pre class="brush: plain; title: ; notranslate">
  componentWillMount() {
    csv('./src/data/birthdeathrates.csv', (error, data) =&gt; {
      if (error) {
        this.setState({loadError: true});
      }
      this.setState({
        data: data.map(d =&gt; ({...d, x: Number(d.birth), y: Number(d.death)}))
      });
    })
  }
</pre>
<p>ComponentWillMount: there we go.<br />
we are using the same data file as before. Here, I&#8217;ve hardcoded it in a string, but that address could totally come from a property passed to App.<br />
Also, note I&#8217;m using csv from d3. That used to be d3.csv, but not anymore because I&#8217;m importing just <em>csv</em> from d3, or more precisely from its sublibrary &#8216;d3-request&#8217;. One of the big changes of d3 v4, also recently released, is that its code is available as smaller chunks. There are other ways to load a csv file, but d3&#8217;s csv method is super convenient and it&#8217;s also a great way to show how to cherrypick one useful part of a large library.</p>
<p>So, we are loading this file. What&#8217;s next? If loading the file raises an error, I am going to signal it via the state (setState({loadError: true});). Else, I am going to pass the content of the file to the state.<br />
Not just the raw contents: I am going to slightly transform it. Inside the csv method, data is an array of objects corresponding to the columns of my file. There are three columns: country, birth and deaths. I have therefore arrays with three properties, and their values is what is being read by csv from the file, as strings.<br />
The map statement turns that object into: a copy of all these properties (that&#8217;s what {&#8230;d does), plus x and y properties which simply convert the birth and deaths properties of each object to numbers (ie &#8220;36.4&#8221; to 36.4).<br />
So, whether this file succeeds or fails to load, I&#8217;m going to change the state of the component. </p>
<p>What values can the state take? </p>
<p>When the component is first created, state is empty.<br />
Then, componentWillMount attempts to load the file. State is still empty. During that very short time, render will fire (more on that soon).<br />
Then, the file will either load or not. If it loads, state will now hold a data property, and since state changes, the component will re-render. If it doesn&#8217;t load, state will have a loadError property and the component will also re-render.</p>
<p>Which takes us to the rendering of the component. You&#8217;ll see that these 3 situations are taken care of.</p>
<pre class="brush: plain; title: ; notranslate">
render() {
    if (this.state.loadError) {
      return &lt;div&gt;couldn't load file&lt;/div&gt;;
    }
    if (!this.state.data) {
      return &lt;div /&gt;;
    }
    return &lt;div style={{
      background: '#fff',
      borderRadius: '3px',
      boxShadow: '0 1 2 0 rgba(0,0,0,0.1)',
      margin: 12,
      padding: 24,
      width: '350px'
    }}&gt;
      &lt;h1&gt;Birth and death rates of selected countries&lt;/h1&gt;
      &lt;h2&gt;per 1,000 inhabitants&lt;/h2&gt;
      &lt;Scatterplot data={this.state.data}/&gt;
    &lt;/div&gt;;
  }
</pre>
<p>if (this.state.loadError) &#8211; that&#8217;s the situation where the data didn&#8217;t load. That&#8217;s also why I did initiate state to an empty object, because if this.state was undefined, this syntax would cause an error. (this.state &#038;&#038; this.state.error) would be ok, but I might as well just initialize the state.</p>
<p>if (!this.state.data) takes care of the situation where the data didn&#8217;t load yet. We <em>also</em> know that there hasn&#8217;t been an error yet, else the first condition would have been triggered. In a professional setting, that&#8217;s where you&#8217;d put a progress bar or a spinner. Loading a 70 line csv isn&#8217;t going to take long though, so that would be over the top, which is why there&#8217;s just an empty div.</p>
<p>Finally, if neither of these conditions are met, we are going to render a card with a Scatterplot element inside. We&#8217;re going to render a little more than <em>just</em> the Scatterplot element &#8211; we&#8217;re styling the div on which it will stand and adding some titling.</p>
<h2>The Scatterplot component: introducing react-vis</h2>
<p><a href="https://github.com/uber/react-vis/">React-vis</a> is the charting library we use at Uber.<br />
The main idea is that we can create charts by composing elements, just like a web page: </p>
<pre class="brush: plain; title: ; notranslate">
&lt;XYPlot
  width={300}
  height={300}&gt;
  &lt;HorizontalGridLines /&gt;
  &lt;LineSeries
    data={[
      {x: 1, y: 10},
      {x: 2, y: 5},
      {x: 3, y: 15}
    ]}/&gt;
  &lt;XAxis /&gt;
  &lt;YAxis /&gt;
&lt;/XYPlot&gt;
</pre>
<p>&#8230; creates a very simple line chart with horizontal gridlines and axes. Don&#8217;t want the gridline? remove the <HorizontalGridLines /> part. Want vertical gridlines too? Just add <VerticalGridlines /> underneath.<br />
Do you need another line chart? You can add another LineSeries element. Or a VerticalBarSeries. Or a RadialChart (pie or donut charts). And so on and so forth.<br />
React-vis handles all the nitty gritty of making charts, so we don&#8217;t have to.</p>
<p>Let&#8217;s dive into Scatterplot. </p>
<pre class="brush: plain; title: ; notranslate">
import React, {Component} from 'react';
import {
  Hint,
  HorizontalGridLines,
  MarkSeries,
  VerticalGridLines,
  XAxis,
  XYPlot,
  YAxis
} from 'react-vis';
</pre>
<p>scatterplot.js starts by familiar import statements. We only import what we need from &#8216;react-vis&#8217;.</p>
<pre class="brush: plain; title: ; notranslate">
import HintContent from './hint-content.js';
</pre>
<p>Then, we import HintContent &#8211; hint-content.js uses a default export, so no need for curly braces. By the way, that .js extension is not mandatory in the file name.</p>
<pre class="brush: plain; title: ; notranslate">
export default class Scatterplot extends Component {
  constructor(props) {
    super(props);
    this.state = {
      value: null
    };
    this._rememberValue = this._rememberValue.bind(this);
    this._forgetValue = this._forgetValue.bind(this);
  }

  _rememberValue(value) {
    this.setState({value});
  }

  _forgetValue() {
    this.setState({
      value: null
    });
  }
</pre>
<p>We could have made Scatterplot a pure functional component&#8230; if we had passed callback functions for handling mouseover. Those functions could have changed the state of the App component, which would re-render its children &#8211; Scatterplot. Since no component outside of Scatterplot is interested in knowing where the mouse is, that component can have its own state.<br />
We are also adding two private functions. They have to be bound to &#8220;this&#8221; &#8211; we are creating a class, and those functions have to be tied to each instance of that class. The other way  to think about it is: you can add private functions to a React component, but if they use the state, properties or private variables, you <em>will</em> have to bind them to &#8216;this&#8217; in the constructor. </p>
<pre class="brush: plain; title: ; notranslate">
render() {
    const {data} = this.props;
    const {value} = this.state;
    return &lt;div&gt;
      &lt;XYPlot
        margin={{top:5, left: 60, right: 5, bottom: 30}}
        width={320}
        height={290}&gt;
        &lt;VerticalGridLines /&gt;
        &lt;HorizontalGridLines /&gt;
        &lt;XAxis/&gt;
        &lt;YAxis/&gt;
        &lt;MarkSeries
          data={data}
          onValueMouseOver={this._rememberValue}
          onValueMouseOut={this._forgetValue}
          opacity={0.7}
        /&gt;
        {value ?
          &lt;Hint value={value}&gt;
            &lt;HintContent value={value} /&gt;
          &lt;/Hint&gt; :
          null
        }
      &lt;/XYPlot&gt;
      &lt;div style={{
        color: '#c6c6c6',
        fontSize: 11,
        lineHeight: '13px',
        textAlign: 'right',
        transform: 'rotate(-90deg) translate(120px, -160px)'
      }}&gt;Death Rates&lt;/div&gt;
      &lt;div style={{
        color: '#c6c6c6',
        fontSize: 11,
        lineHeight: '13px',
        textAlign: 'right',
        transform: 'translate(-5px,-14px)',
        width: '320px'
      }}&gt;Birth Rates&lt;/div&gt;
    &lt;/div&gt;;
  }
</pre>
<p>What we are returning is a div element. The reason is that at the very end, we are writing the name of the axes on that div. But mostly, that div will hold a XYPlot component, which comes from react-vis. I&#8217;m passing: a margin property, a height and a width. Margin is optional and I&#8217;m using it for control. Height is mandatory, width as well, though react-vis has a responsive component that makes the charts adapt to the width of the page (not used here).<br />
Then, I&#8217;m simply adding: horizontal and vertical gridlines, and horizontal and vertical axes. I&#8217;m using default settings for all of them (full disclosure &#8211; I&#8217;ve changed a few things via the index.css stylesheet). But the way labels and lines are organized is fine by me.<br />
Then, we&#8217;re adding the MarkSeries component, which is all the circles. </p>
<pre class="brush: plain; title: ; notranslate">
 &lt;MarkSeries
  data={data}
  onValueMouseOver={this._rememberValue}
  onValueMouseOut={this._forgetValue}
  opacity={0.7}
/&gt;
</pre>
<p>The data property comes from the properties passed to the Scatterplot component. It needs to have an x and y properties, which is why I transformed our csv file like so. It could also have a size or a color property, but we&#8217;re not going to use these in our example.<br />
I&#8217;m using an opacity property to better show which marks overlap. I could also have made them smaller, but I&#8217;m sticking to the defaults.<br />
Finally, we&#8217;re using the onValueMouseOver and onValueMouseOut properties to pass functions to handle what happens when the user is going to, well, mouse over one of the marks, or remove their mouse cursor from them. Those are our private functions from before:</p>
<pre class="brush: plain; title: ; notranslate">
  _rememberValue(value) {
    this.setState({value});
  }

  _forgetValue() {
    this.setState({
      value: null
    });
  }
</pre>
<p>When a user passes their mouse on a mark, the corresponding datapoint (value) will be passed to the state. And when the user removes their mouse, the value property is reset to null.</p>
<p>finally, right under the MarkSeries component, is where we call our Hint: </p>
<pre class="brush: plain; title: ; notranslate">
  {value ?
    &lt;Hint value={value}&gt;
      &lt;HintContent value={value} /&gt;
    &lt;/Hint&gt; :
    null
   }
</pre>
<p>If value (from the state) is worth something, then we create a Hint component. That one comes from react-vis, and handles positioning of the tooltip plus some default content. But I want to control exactly what I show inside my tooltip, so I&#8217;ve created a component to do just that.<br />
Creating a specialized component like this is great, because it hides this complexity from the Scatterplot component. All that Scatterplot needs to know is that it&#8217;s passing properties to a HintContent component, which returns&#8230; something good.</p>
<p>Because of imports and exports, it&#8217;s generally a good idea to create such small specialized components. </p>
<h2>For the win: the hint content component</h2>
<pre class="brush: plain; title: ; notranslate">
import React from 'react';
export default function HintContent({value}) {
  const {birth, country, death} = value;
  return &lt;div&gt;
    &lt;div style={{
      borderBottom: '1px solid #717171',
      fontWeight: 'bold',
      marginBottom: 5,
      paddingBottom: 5,
      textTransform: 'uppercase'
    }}&gt;{country}&lt;/div&gt;
    {_hintRow({label: 'Birth Rates', value: birth})},
    {_hintRow({label: 'Death Rates', value: death})}
  &lt;/div&gt;;
}

function _hintRow({label, value}) {
  return &lt;div style={{position: 'relative', height: '15px', width: '100%'}}&gt;
    &lt;div style={{position: 'absolute'}}&gt;{label}&lt;/div&gt;
    &lt;div style={{position: 'absolute', right: 0}}&gt;{value}&lt;/div&gt;
  &lt;/div&gt;;
}
</pre>
<p>The HintComponent is a pure functional component and is our default export.<br />
There&#8217;s another function in that module, and we&#8217;re not exporting it. In other words, it won&#8217;t be accessible by other parts of the app. The only place where it can be used is within this file. Traditionally, those start with an underscore.</p>
<p>The only point of the HintComponent is to offer fine control on the appearance of the tooltip (which also receives styles from index.css). But I wanted to control exactly how the various parts of the data point will appear inside.<br />
So, it has 3 rows. The first one contains the name of the country (well, its 3-letter ISO code). I chose to make it bolder and uppercase. Also, it will have a border separating it from the rest of the card.<br />
The next two rows are similar, which is why I created a function to render them as opposed to just retype it.<br />
It&#8217;s a relative div, which takes all the space, with two absolute divs as children. The label one has no position information, so its attached to its top left corner, but the value one has a right attribute of 0, so its attached to its top right corner. So, for each row, the label is going to be left-aligned, and the value, right-aligned. </p>
<p>And that&#8217;s it! </p>
<p>For our <a href="/2016/08/17/the-big-leagues/">grand finale</a>, we are going to create a more complex application with several charts that interact with one another&#8230;</p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/17/creating-a-react-visualization-web-app/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>React components</title>
		<link>/2016/08/11/react-components/</link>
		<comments>/2016/08/11/react-components/#respond</comments>
		<pubDate>Thu, 11 Aug 2016 21:53:04 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1752</guid>
		<description><![CDATA[This article is part of my series Visualization with React. Previous article: Coding with React Using React to create elements out of data is nice, using JSX is hip but until you use your own components, you won&#8217;t use React to the fullest. So let&#8217;s do that. Fair warning: that&#8217;s the speed bump, especially if <a class="read-more" href="/2016/08/11/react-components/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script>This article is part of my series <a href="/2016/08/09/visualization-with-react/">Visualization with React</a>. Previous article: <a href="/2016/08/10/coding-with-react/">Coding with React</a></p>
<p>Using React to create elements out of data is nice, using JSX is hip but until you use your own components, you won&#8217;t use React to the fullest.<br />
So let&#8217;s do that. Fair warning: <strong>that&#8217;s the speed bump</strong>, especially if you&#8217;re not familiar with javascript concepts like &#8216;this&#8217;, which you&#8217;re not really required to master with d3.</p>
<p>In the previous examples, we created an element that held a bunch of elements. We are now going to create a custom Point component, to replace our circles. We&#8217;re going to do more than just replace it: our new component will be able to do more stuff. Each Point element should remember whether it&#8217;s highlighted or not. If it&#8217;s highlighted, it will be displayed in red. Else, it will stay in gray. Clicking on a Point will switch its highlighted status.</p>
<p>The way we are going to maintain that highlighted status is by using the state of the component (remember <a href="http://codepen.io/jckr/pen/mEeRvr">that switch example</a>?).</p>
<p>There are two syntaxes to create components: one uses React.createClass method, and the other uses ES6 classes. I&#8217;m providing this next step using both syntaxes. I don&#8217;t know which one is more common for the time being, but I feel that the ES6 class one will be in the future, so this is the one I personally use.</p>
<p class="codepen" data-height="387" data-theme-id="0" data-slug-hash="BzKxmR" data-default-tab="result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/BzKxmR/">React scatterplot with custom component &#8211; using es6 class</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>Our custom component is an ES6 class (gasp!) and it&#8217;s based on the existing class, React.Component.<br />
So we declare our custom component like this:</p>
<pre class="brush: plain; title: ; notranslate">
class Point extends React.Component {
... a bunch of stuff which is different from React.Component ...
}
</pre>
<p>Specifically we are going to specify two properties of our new class: constructor and render. Constructor describes what happens when an element of this component is first created, and render is what should be displayed on screen for that element.<br />
Don&#8217;t confuse the component and the elements: the component is the type of things that we are going to create, you can think of it as the mold. The elements are what are created with this component, think of it as casts. Creating the component describes how the elements should be created. Later in the code, we are going to create, or instantiate, the individual elements using the component. In Javascript, as in many other languages, by convention, classes like our component have a name that starts with an upper case.</p>
<p>So let&#8217;s look at the first property.</p>
<pre class="brush: plain; title: ; notranslate">
constructor(props) {
super(props);
this.state = {highlighted: false};
}
</pre>
<p>what&#8217;s the argument of constructor, props? In React world, props is short for properties. Until now, we never really had to manipulate properties inside the component.<br />
In this specific example, we don&#8217;t really do anything with props, so we could write just constructor() {&#8230;}. But it&#8217;s a convention, and if at some point we want to do something with these properties right when the component is first created, we might.<br />
The second line is super(props). What this does is that it passes whatever arguments the constructor had to the constructor of the original React.Component class. You don&#8217;t have to know what happens then, just that it&#8217;s a mandatory step.<br />
The third line introduces us to the state. we assign an object to &#8220;this.state&#8221;.<br />
But what is <a title="Understand Javascript's this with clarity and master it" href="http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/">this</a>? the 10000 ft view is that it refers to a specific context or scope (the article under the link above is fantastic if you want to know more).<br />
We&#8217;re going to have many Point elements. Each of them can be highlighted or not. Each of them also corresponds to a different data point. Each of them can access and manipulate data that no other can. This is where <em>this</em> comes from. Properties of this (that is, whatever comes after &#8220;this.&#8221;) are going to be private to that element, in other words, not accessible from the outside.<br />
And there are going to be two very important properties: props and state.</p>
<p><strong>this.props</strong> are the properties of the element, which the element cannot change. They come from its parent element.<br />
<strong>this.state</strong> is the state of the element, which the element can change: and when it does, the element will be re-rendered.</p>
<p>Speaking of rendering, let&#8217;s look at the next property of our class: the render method.<br />
That method must render a React element or null.</p>
<p>So:</p>
<pre class="brush: plain; title: ; notranslate">
render() {
  return &lt;circle
  onClick = {
    this.setState({
      highlighted: !this.state.highlighted
    });
  }}
  r = {
    5
  }
  style = {
    {
      fill: this.state.highlighted ? 'red' : '#222',
      opacity: 0.2,
      transition: 'fill .5s'
    }
  }
  /&gt;;
}
</pre>
<p>Our component will create a element. But it could also be another custom component! Let&#8217;s just keep it simple for now.<br />
cx, this time, will be expressed as a calculation based on this.props.birth. (and likewise cy will be computed from this.props.death).<br />
birth and death are the properties that will have to be passed to the component to create an element (which we&#8217;ll see in the end).</p>
<p>we have a new property: onClick. onClick, unsurprisingly, handles click events. So when a user clicks, that will trigger a function which will do the following:</p>
<pre class="brush: plain; title: ; notranslate">
this.setState({
highlighted: !this.state.highlighted
});
</pre>
<p>The intention here is to assign to the highlighted property of the state the value which is opposite to that it currently holds. That value is stored at this.state.highlighted. Remember that originally, we stored {highlighted: false} in this.state, so this.state.highlighted is where it&#8217;s at. And so, !this.state.highlighted is the opposite of the current highlighted status.<br />
this.setState adds the relevant property to the state. So, this construct effectively reverses the value of this.state.highlighted.<br />
Whenever the state changes, the component is automatically re-rendered without any other action required (we can prevent that if needed, but we&#8217;ll see that later).</p>
<p>Finally, let&#8217;s look at what&#8217;s happening towards the end, with our style.<br />
As we&#8217;ve seen several times before, we pass an object to style. Because of the JSX notation, that&#8217;s <em>two</em> sets of curly braces.<br />
The fill property of the style depends on the state. So, if highlighted is true, it&#8217;s going to be red, else it&#8217;s going to be gray. Just as we said.<br />
I&#8217;m also adding to the style a transition property, so that instead of just blinking from red to gray, our component smoothly fades from one color into the other.</p>
<p>So that&#8217;s our class.<br />
The second part of the code is the same with both syntaxes, so let&#8217;s see how we create a component using React.createClass.</p>
<p class="codepen" data-height="387" data-theme-id="0" data-slug-hash="EyKLEz" data-default-tab="js,result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/EyKLEz/">React scatterplot with custom component &#8211; using createClass</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>So instead of creating a class, we create a variable:</p>
<pre class="brush: plain; title: ; notranslate">
const Point = React.createClass({
... object with properties ...
});
</pre>
<p>So this time, we pass to React.createClass an object that describes the component that we&#8217;re going to create.<br />
As above, we care about two things: that the elements it creates have a state, which starts as not highlighted, and how they should be rendered.<br />
When we use React.createClass, the way to initialize a state is to use a property called getInitialState.<br />
You have to assign to that property a function that returns an object: that object is the initial state.</p>
<pre class="brush: plain; title: ; notranslate">
...
getInitialState: function getInitialState() {
return {highlighted: false};
},
...
</pre>
<p>A word of caution: React.createClass takes an object as an argument, so its properties are separated by commas. There are no commas between the properties of a class, with the first syntax.</p>
<p>The second property of our object is render. Render gets a function that will output a React element or null. The syntax is very close to the above.<br />
getInitialState, like render, are called lifecycle methods. This is because they are called at specific moments of the life of our component. There are more than 2, and they are one of the most interesting parts of React. We&#8217;ll cover them in our next article.</p>
<p>Now let&#8217;s look at the second part of our code. Now that we&#8217;ve got a custom component, what of it?<br />
well, let&#8217;s use it to create elements!</p>
<pre class="brush: plain; title: ; notranslate">
const svg = &lt;svg height={300} width={300}&gt;{
 birthdeathrates.map(d =&gt; &lt;Point birth={d.birth} death={d.death} /&gt;)
}&lt;/svg&gt;;
</pre>
<p>What&#8217;s different here is that line with the element.<br />
Remember that before, we created a element and we specified its cx and cy properties. This time, we don&#8217;t pass cx or cy, instead we just pass a value for birth and a value for death. The component can do the rest!</p>
<h1>Pure functional components</h1>
<p>Our Point component is somewhat complicated because we maintain its state. Because we care about its state, we need to initialize it, we need to capture events that could affect it, and have our output depend on it.<br />
By contrast, if all we had were properties (which, again, do not change), what the component does could be much simpler: it takes an input, and produces an output. The same input produces the same output. Just like each time when you add two numbers, the result is the same if the numbers you add are the same.<br />
In javascript terms, if you had a function that didn&#8217;t use global variables, randomness or external APIs, when you pass the same argument to that function, you get the same result. This is what&#8217;s called a <a title="pure functions in javascript" href="http://www.nicoespeon.com/en/2015/01/pure-functions-javascript/">pure function</a>. Pure functions have a lot of good things going for them, not least their stability and predictability and simplicity.<br />
So let&#8217;s suppose we didn&#8217;t care about the state of our Point component.<br />
React let us write it as a pure functional component.<br />
Here&#8217;s how:</p>
<p class="codepen" data-height="387" data-theme-id="0" data-slug-hash="BzKVJq" data-default-tab="html,result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/BzKVJq/">React scatterplot with pure functional component</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<pre class="brush: plain; title: ; notranslate">
function Point({
  birth,
  death
}) {
  return &lt;circle
  cx = {
    birth * 10
  }
  cy = {
    300 - death * 10
  }
  r = {
    5
  }
  style = {
    {
      fill: '#222',
      opacity: 0.2
    }
  }
  /&gt;;
}
</pre>
<p>Our component is now just a function! we pass it an object with properties {birth, death} and you can use them directly in the body of the function. No need for this.props.birth or whatever.<br />
The second part of the code doesn&#8217;t change, the elements are still created exactly the same way.</p>
<h1>Combining components: I&#8217;ll call you back</h1>
<p>In a real world situation, you&#8217;ll probably have many custom components being parts of one another and passing data back and forth.<br />
So, let&#8217;s step up in complexity.<br />
Let&#8217;s use the same dataset, but this time we&#8217;ll make a bar chart.<br />
Initially, we&#8217;ll show birth rates. But we&#8217;ll also add a switch! and if the user touches the switch, we&#8217;ll show death rates instead.<br />
So. Let&#8217;s think this through a little bit.</p>
<p>We&#8217;ll have a Chart component that is going to be at the top level.<br />
That component will have a Switch component as a child.<br />
It will also have several Bar components that will correspond to the actual data. We can make the Bar components out of our birthdeathrates dataset as before.</p>
<pre class="brush: xml; title: ; notranslate">
&lt;Chart&gt;
  &lt;Switch /&gt;
  &lt;Bar /&gt;
  &lt;Bar /&gt;
  &lt;Bar /&gt;
  ...
&lt;/Chart&gt;
</pre>
<p>There will be an event attached to the switch, so that when it&#8217;s clicked, the Bars can change.<br />
Now the real question is: which component&#8217;s state should be changed by the switch?</p>
<p>We&#8217;ve seen how the switch could change its own state. But the Bar components wouldn&#8217;t be able to read it.<br />
Ideally, the switch will trigger some kind of change in the Bar component, but likewise, it cannot reach the state of those.</p>
<p>So: we&#8217;ll have to find a way to get our switch to update the state of the Chart component. When the state of Chart updates, it re-renders. That means that it can pass new properties to its children. It can tell its Bars to use the death property instead of the birth one.<br />
But how to access the state of the parent from one of its children? That&#8217;s possible using callback functions.</p>
<p>If we are within the parent element, we can access its state.<br />
So, we could create a function that would do:</p>
<pre class="brush: plain; title: ; notranslate">
updateMetric(metric) {
  this.setState({metric}); // this.setState({metric: metric}) in short hand notation, possible with babel
}
</pre>
<p>That function would work within our future Chart component. Now what if&#8230; we passed that function to Switch as a property? then, when executed, it would change the state <em>within Chart.</em> That would trigger a re-render, and Chart could pass different props to all of its children.</p>
<p>Let&#8217;s make it work.</p>
<p class="codepen" data-height="387" data-theme-id="0" data-slug-hash="JKXZmN" data-default-tab="js,result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/JKXZmN/">React bar chart with callback</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>Lots of stuff going on here!</p>
<pre class="brush: plain; title: ; notranslate">
class Chart extends React.Component {
   constructor(props) {
     super(props);
        
     this.state = {
       metric: 'birth',
     };
   }
// ...
</pre>
<p>This is the constructor of our class. We&#8217;ve seen it before, the only special thing is that we give it an initial start here by giving a value to this.state.</p>
<pre class="brush: plain; title: ; notranslate">
render() {
    const metric = this.state.metric;
    const data = this.props.data.sort((a,b) =&gt; b[metric] - a[metric])
      .map((d, i) =&gt; ({...d, rank: i}))
      .sort((a, b) =&gt; b.country &gt; a.country);
</pre>
<p>Here, metric gets the value of whatever we put in the state.<br />
And data is: whatever is passed to the props as data, first sorted by the value of the corresponding metric, then given a rank property which is just its order in that sorted list, and finally sorted alphabetically. So whatever the metric, the same country will always be at the same position in this array, only its rank property, which was computed while the list was sorted, would be different. </p>
<pre class="brush: plain; title: ; notranslate">
    return &lt;div className='chart'&gt;
      {[
       &lt;span className='label'&gt;Birth rate&lt;/span&gt;,
       &lt;Switch metric={metric} updateMetric={(d) =&gt;
            this.setState({metric: d})
       }/&gt;,
       &lt;span className='label'&gt;Death rate&lt;/span&gt;,
       &lt;div&gt;
         {data.map(d =&gt; 
          &lt;Bar country={d.country} value={d[metric]} rank={d.rank}/&gt;
         )}
      &lt;/div&gt;
      ]}
    &lt;/div&gt;; 
</pre>
<p>Nothing that we&#8217;ve never seen before in that render function &#8211; we&#8217;re just creating divs or instances of components that remain to be described, and we pass them props. The only new thing is that updateMetric property of Switch. Instead of passing a value or an array, we pass a function. And in that function, we call this.setState.<br />
Because we are still within the Chart component, this.setState will change the state of a Chart component. But wait: we are actually passing that function to another component, Switch! This component, a child of Chart, receives a function that lets it change the state of its parent.<br />
That&#8217;s the callback function. </p>
<p>Here&#8217;s that Switch component: </p>
<pre class="brush: plain; title: ; notranslate">
function Switch({metric, updateMetric}) {
  return &lt;div className = 'switch__track'
     onClick = {() =&gt; updateMetric(metric === 'birth' ? 'death' : 'birth')}
    &gt;
      &lt;div className = {'switch__thumb ' + metric} /&gt;
    &lt;/div&gt;
};
</pre>
<p>Switch doesn&#8217;t have a state of its own, so we can just use a functional component. Switch receives updateMetric as a property. Switch doesn&#8217;t know anything about this function &#8211; it doesn&#8217;t have to. It doesn&#8217;t need to know that this function will affect its parent. All it does is launch this function when it&#8217;s being clicked &#8211; that&#8217;s what the line with onClick does. </p>
<p>Here&#8217;s another example presented without comments with similar data, with a slightly different ways to order the components.<br />
This time, the top level component is Dashboard, which has 2 Chart components, which each have several Bar components as children. Mousing over Bar components updates the state of the Dashboard components, which re-renders its Charts children and their Bar children.</p>
<p data-height="265" data-theme-id="0" data-slug-hash="RRLWQz" data-default-tab="js,result" data-user="jckr" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/jckr/pen/RRLWQz/">react dual bar chart</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/11/react-components/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Making my 2015 new year cards</title>
		<link>/2015/02/18/making-my-2015-new-year-cards/</link>
		<comments>/2015/02/18/making-my-2015-new-year-cards/#respond</comments>
		<pubDate>Wed, 18 Feb 2015 02:11:57 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1646</guid>
		<description><![CDATA[Getting the data For this year&#8217;s greeting cards I had decided to take a radical turn from my previous 2 greeting cards projects which were entirely based on data from interaction with whomever was getting the card and just focus on creating something closer to generative art. I decided to use people&#8217;s names as the <a class="read-more" href="/2015/02/18/making-my-2015-new-year-cards/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<h2>Getting the data</h2>
<p>For this year&#8217;s greeting cards I had decided to take a radical turn from my previous 2 greeting cards projects which were entirely based on data from interaction with whomever was getting the card and just focus on creating something closer to generative art. I decided to use people&#8217;s names as the basis of the shape I would use. The other departure I took from my previous project is that I wanted to send physical cards. I also like the idea of the cards being a surprise, so I didn&#8217;t want to tell people &#8220;hey, I&#8217;m going to generate a card from your name. Can you give me your address?&#8221; Instead, I set up a google form and asked people several questions.</p>
<p>What is their name (obviously)? What is their address? How long have they lived here? What is their home town? Where were they born? What is their birthday? and finally, I gave them the chance to write whatever they want.</p>
<p>While I always thought I would only use name + address to create the cards, I also wanted to make a visualization on the ensemble of people who would fill my form, and among other things I thought of a map of where my friends are versus where they are from.</p>
<p>I sent about 300 messages asking people to fill the form, and got about 100 replies. The form was also a way to commit to do that project&#8230; Because I proposed to so many people to get a card, there was no way I could back off afterwards <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> whereas if I had just created something online and sent it via mail, I could have definitely stopped mid-way.</p>
<h2>Layer as tiles</h2>
<p>I was pretty much set on creating cards as a layer of tiles from the get go. Each word in a person&#8217;s name could be a layer, and each letter could be an attribute. Attributes could change things like patterns, colors, size, orientation, all kind of things! Eventually I decided to use the 5 first letters of people&#8217;s names, and only use 2 layers, even if the person&#8217;s first name (or last name) is composed of two or more words.</p>
<p>When designing patterns, I wanted something that could tile on a card. Squares, while not the only possibility, were the easiest. So I started to come up with many patterns that could be placed on squares and that would tile (ie the right of one pattern would connect with its left end, and the top to its bottom). I decided (arbitrarily) that both the height and width would scale together, as opposed to vary independently (turning the squares into rectangles). Also, I wanted two colors per layer, but one would be more prominently used than the other. Finally, I allowed the layers to be rotated as opposed to be necessarily strictly parallel to the borders of the card.</p>
<p>Since words are made of letters, I went for simplicity. There would be 5 attributes (pattern, main color, secondary color, scale and orientation), and for each one, each of the 26 possible letters corresponded to one value. And while there were &#8220;only&#8221; 26 possible patterns, I experimented much much more &#8211; possibly 100 or so.</p>
<h2>Letters as patterns</h2>
<p>My patterns fell in several categories. There were very simple geometric shapes (A, G, I, O, R). Some were hand-drawn (L and S). Some were more sophisticated geometric shapes (B, D, E, F, H, J, K, M, P, V, W, Y). Finally, some were inspired by islamic art (C, N, Z).</p>
<p><img class="aligncenter" src="http://jckr.github.io/blog/projects/cards2015/patterns.png" alt="" width="950" height="325" /></p>
<p>Finally, there are some letters I didn&#8217;t assign patterns to, because there was just no name starting with those letters in my dataset <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> (Q, U and X).</p>
<p>In my explorations / experimentations one thing I kept in mind was the weight of the pattern. The M, or the O, for instance, are really light. But the K or the F are heavier. I tend to attribute the lighter patterns to letters that started first names, while giving the heavier patterns to letters that mostly started last names (and were in the back).</p>
<p>Pinterest was a great source of inspiration for <a href="https://www.pinterest.com/jcukier/datavis-patterns/">patterns</a>. At some point in the process I really wanted to use islamic patterns. I have a couple of books on the subject and I always really liked their look and feel, their &#8220;tileliness&#8221; and also that they are built with ruler and compass. Many of these patterns, even if very intricate, can easily be reproduced with computers (ie, drawing an hexagon requires using a compass 7 times, but with a computer all you need to do is compute the cosine and sine of 6 points and link them). And I thought there was beauty in the process of building them. So I created an &#8216;islamic pattern builder&#8221; as a side project &#8211; which will get its own blog post.</p>
<p>Here is a <a href="http://jckr.github.io/blog/projects/cards2015/make-cards.html">slightly modified card maker</a> compared to the one I used (it only exports a card in 600&#215;1080 as opposed to 1875 x 3375)</p>
<h2>Wrapping it up</h2>
<p>Eventually I put together the cards. Minor setback &#8211; I don&#8217;t have a color printer at home, so I would have to have the cards printed. Since I had to use a vendor anyway, I thought I might as well look for someone who could also send them, and that&#8217;s how I ended up choosing <a href="http://lob.com/">lob.com</a>. Lob.com allowed me to send 6&#215;11&#8243; cards which seemed cool (although, to be honest, I didn&#8217;t have a good sense of how big that was) and took as input 300 dpi png bitmaps. So I had to create 3375 x 1875 images, that&#8217;s up to 10 Mb per card! I initially hesitated between creating my cards with d3 and processing and chose d3 because it was easier for me to manipulate shapes using svg. I soon regretted that decision because exporting large bitmaps is not easy from the browser. Chrome won&#8217;t let you do that &#8211; exporting a png over a certain size (I think 2.56mb) will crash it. So my way around it was to export it as webp, chrome&#8217;s preferred compression format (which was with one exception always below its threshold) and then, convert them to png. Then, we ran into some unexpected issues and delays <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> but eventually all the cards were sent and people are telling me that they are getting them <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h2>Making the ensemble visualization</h2>
<p>I always intended to show things about all the cards. But I also wanted to keep all the information that had been shared with me private. I made the front side of the cards public in a <a href="https://www.pinterest.com/jcukier/new-years-cards-2015/">pinterest board</a> but it would be really difficult to reverse engineer them to come up with a name. I made a map, by geocoding all the information I was given, but I also clustered all of the addresses and rounded all geocoding, so it&#8217;s not possible to go from one of the pixels of the map (or the data file) to an actual address.</p>
<p>I also contributed the visualization I had made to show the distribution of names and initials.</p>
<p>I was conflicted about whether using what people shared with me in the free text section of my form. On one hand, I wanted to find a way to show it, but on the other, showing even fractions of a phrase would challenge the confidentiality of what was written. But still, I wanted to restitute what I was given. Some of the text that was sent to me was really awesome. So I opted for a word cloud kind of setting. This is the first time since word clouds have gained mainstream acceptance that I used one <img src="https://s.w.org/images/core/emoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> I thought it was appropriate &#8211; I&#8217;d show only words, not phrases. Also the aesthetics was interesting &#8211; with only 2 angles (0 or 30 degrees) and a cool set of colors. I&#8217;m using Jason Davies wordcloud generator for d3.</p>
<p>And there you have it &#8211; here&#8217;s the <a href="http://jckr.github.io/blog/projects/cards2015/index.html">final visualization</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/2015/02/18/making-my-2015-new-year-cards/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Interactive map of the subway</title>
		<link>/2013/01/14/interactive-map-of-the-subway/</link>
		<comments>/2013/01/14/interactive-map-of-the-subway/#comments</comments>
		<pubDate>Sun, 13 Jan 2013 22:51:21 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1533</guid>
		<description><![CDATA[My last project is an interactive map of the Paris subway. Interactive subway map Quite some time ago, I had seen Tom Carden&#8217;s Tube Travel Times and was fascinated. So while I initially had tried to do something different I ended up borrowing a lot of his design, so it wouldn&#8217;t be fair to start <a class="read-more" href="/2013/01/14/interactive-map-of-the-subway/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>My last project is an interactive map of the Paris subway.<br />
<a href="http://jckr.github.io/blog/projects/metro/map.html"><img src="http://jckr.github.io/blog/projects/metro/sshot.png" alt="Interacive subway map" /></a></p>
<p><a href="http://jckr.github.io/blog/projects/metro/map.html">Interactive subway map</a></p>
<p>Quite some time ago, I had seen Tom Carden&#8217;s <a href="http://www.tom-carden.co.uk/p5/tube_map_travel_times/applet/">Tube Travel Times</a> and was fascinated. So while I initially had tried to do something different I ended up borrowing a lot of his design, so it wouldn&#8217;t be fair to start this post without acknowledging that.<br />
Then again, there are a few original things in this worth writing about.<br />
A subway system can be seen as a network of nodes and edges. Nodes would be the stations, and edges, the subway lines that connect them. Finding the shortest path between two parts of the graph is a classic problem of computer science. That path is the sum of the length of all the edges it takes to traverse the graph from the source to the destination.<br />
However a typical subway journey, and I should know, is not entirely spent in a train. You first have to get from the street to the platform, wait for your train; in the event of a connection, you have to go from one platform to another, wait for another train; and eventually you have to return to the street level.<br />
So in my representation of the subway system in addition to the stations themselves, I&#8217;ve added nodes for all the platforms within a station and edges between them. So if you have to go from one station A to station B, which is three stops away on a given subway line, you would really traverse 5 edges: station A to platform, stop 1, stop 2, stop 3, then platform to station B.<br />
While the Paris subway agency, RATP, has recently publicized its open data intent, the travel times between two stations are not public. I actually had reliable and accurate measured travel times for 90% of the network, on the basis of which I could estimate the rest. The great unknown that remains is the complexity of the stations, some are very straightforward so going from the street to a train is a matter of seconds, while some are downright mazes. While I think I have travelled through almost every stations by now, I definitely not have stopped in many of them. So as part of the project I am asking users to complement my data on the stations they know well. Actually, I didn&#8217;t use much of the datasets that RATP published. The position of the stations on the canonical plan has a lot of inaccuracies. For the geographical positions I used my own measures rather than the published data (I had been playing on and off with subway data for close to 5 years now, <a href="http://www.openprocessing.org/sketch/22252">http://www.openprocessing.org/sketch/22252</a>). I did use the trafic data to give an idea of the occupancy of a given section, and the official color codes as well. Because I am using my own measures, I have not added other railway systems like the RER or tramway for which I don&#8217;t have enough data. </p>
<p>So when a user selects a station, the rest of the network moves according to their (shortest path) distance to the selected station. So at the heart of the exercise there is a shortest path calculation from any station to any other. Including stations, platforms, connections, entrances and exits, that&#8217;s a network of 680 nodes and 1710 edges (for 299 stations, I didn&#8217;t include a couple of the very last ones). And it&#8217;s a directed network, because there are some sections which go in only one direction. At most, a network that big could have close to 500,000 edges, so it&#8217;s fairly sparse.<br />
There are several algorithms to compute shortest paths in the code. I am using the best known one, Dijkstra, which works on path with no negative edge length. The way it is implemented here, with binary heaps, makes it so fast that it&#8217;s not noticeable. Not using that improvement, or relying on a more versatile but slower shortest path algorithm, would result in considerably greater computing times. </p>
<p>When a user selects one station a few things happen. First, all of the others are arranged around the selected station. Imagine the station is the fixed point in a polar coordinate system, all the other stations retain their angular coordinate but their radii now depends on the shortest path time. That idea came directly from Tom&#8217;s applet. Another thing I took from him is the addition of rings in the background which give an indication of the travelling time to those destinations. But I settled for that after much fumbling and with the conviction that there was no better solution.<br />
What also happens is that all the edges which are not part of any shortest path disappear. So subway lines are no longer continuous.<br />
Once a station is selected, more things happen when hovering on a second station, the actual shortest path is revealed while all others fade out, and the station marks are hidden except those of the start, destination and all connections on the way, for which names are displayed.<br />
Finally, an interace appears that let users enter estimations for the times I don&#8217;t know so well about the stations. I haven&#8217;t added any hard figures there so I am only asking for impressions, but I believe that with some usage the time estimations can get much more accurate. </p>
<hr>
<strong>Edit 1</strong><br />
the vis has been quite successful, so I decided to awesomize it a bit.<br />
Now by clicking on any colored line, it&#8217;s possible to &#8220;block&#8221; any given subway section. The shortest routes become those which do not go through that section. You can simulate what happens, for instance, when a given line is down.<br />
The other change is that I&#8217;ve added walking distances. For each station I&#8217;ve computed the beeline distance with its 5 nearest neighbors. I&#8217;ve translated that distance into time (knowing that pedestrians can&#8217;t traverse buildings, have to mind trafic etc.).<br />
But in many cases it is still quicker to go from one station to the next on foot than by train.</p>
]]></content:encoded>
			<wfw:commentRss>/2013/01/14/interactive-map-of-the-subway/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>Dimensionality reduction</title>
		<link>/2012/09/10/dimensionality-reduction/</link>
		<comments>/2012/09/10/dimensionality-reduction/#comments</comments>
		<pubDate>Mon, 10 Sep 2012 09:13:45 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[dimensionality reduction]]></category>
		<category><![CDATA[politics]]></category>
		<category><![CDATA[principal components analysis]]></category>
		<category><![CDATA[Tableau]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1465</guid>
		<description><![CDATA[Following my Tableau politics contest entry, here is another view I had developed but which I didn&#8217;t include in the already full dashboard. In the main view I have tried to show how the values of candidates relate to those of the French. It&#8217;s difficult to convey that graphically when these values are determined by <a class="read-more" href="/2012/09/10/dimensionality-reduction/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>Following my <a href="http://jckr.github.io/blog/blog/2012/09/05/which-way-to-the-right/">Tableau politics contest entry</a>, here is another view I had developed but which I didn&#8217;t include in the already full dashboard. </p>
<p><iframe style="border: 0px;" src="http://public.tableausoftware.com/views/politics/DR_EN" scrolling="no" width="710px" height="810px"></iframe></p>
<p>In the <a href="http://public.tableausoftware.com/views/politics/DashEN">main view</a> I have tried to show how the values of candidates relate to those of the French. It&#8217;s difficult to convey that graphically when these values are determined by the answers to as many as 19 questions (and there are many many more that could be used to that effect).</p>
<p>Enter a technique called dimensionality reduction. The idea is to turn a dataset with many dimensions into a dataset with much fewer dimensions, as little as one, two or three. So we compute new variables, so that they capture virtually all the variability of the original dataset. In other words, if two records have different values in the original dataset, they should have different values in the transformed dataset too. </p>
<p>If you&#8217;re not allergic to words like eigenvalues the math <a href="http://en.wikipedia.org/wiki/Principal_component_analysis">is actually pretty simple</a>. But let&#8217;s not go into that. The point is that with this technique <strong>you can represent a complex dataset as a two-dimensional dataset with very little loss</strong>.</p>
<p>Of course the technique doesn&#8217;t tell you what these new variables represent. Getting a feel for the data I postulate that the one on the X axis represents the toughness of a candidate (pro-security measures, no sensitivity for minorities, etc.) and the one on the Y axis is happiness with previous government. Or possibly, lover of the capitalistic doctrine.</p>
<p>Now you get a better feel for how close or distant the various candidates are from individual voters. You can also see which &#8220;spaces&#8221; remain empty or which are competitive. The top-right quadrant, for instance, looks tempting, but it is really nearly empty (about 200 respondents on over 1500). The right half of the matrix, that is the one which is sensitive to strength, has only one possible competitor but also few voters (~400 respondents). It makes more sense to remain an acceptable choice for the top half (750 voters) and especially the top left (550). In other words the Sarkozy mark should drift slightly towards the top left for optimal impact.</p>
]]></content:encoded>
			<wfw:commentRss>/2012/09/10/dimensionality-reduction/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Tableau 2012 politics contest &#8211; justification and making-of</title>
		<link>/2012/09/05/tableau-2012-politics-contest-justification-and-making-of/</link>
		<comments>/2012/09/05/tableau-2012-politics-contest-justification-and-making-of/#comments</comments>
		<pubDate>Wed, 05 Sep 2012 18:14:30 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[contest]]></category>
		<category><![CDATA[politics]]></category>
		<category><![CDATA[sarkozy]]></category>
		<category><![CDATA[Tableau]]></category>
		<category><![CDATA[UMP]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1458</guid>
		<description><![CDATA[what led me to those choices I was technically happy of my entry for the sports contest. I had done what I wanted: obtain a hard-to-find, interesting dataset, attempt to create an exotic, hard-to-make and never-tableau&#8217;d-before shape with aesthetic appeal and insights. Yet the rules stated that the entries shall be judged on the story-telling <a class="read-more" href="/2012/09/05/tableau-2012-politics-contest-justification-and-making-of/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<h2>what led me to those choices</h2>
<p>I was technically happy of my entry for the <a href="http://jckr.github.io/blog/blog/2012/06/30/tableau-2012-sports-visualization-contest-entry/">sports contest</a>. I had done what I wanted: obtain a hard-to-find, interesting dataset, attempt to create an exotic, hard-to-make and never-tableau&#8217;d-before shape with aesthetic appeal and insights.</p>
<p>Yet the rules stated that the entries shall be judged on the story-telling front. While there were interesting insights, indeed, they didn&#8217;t constitute a story, a structured narration with a beginning and an end. Having <a href="http://thevcl.com/storytelling/">worked</a> <a href="http://flowingdata.com/2011/11/04/telling-stories-with-data-visweek-2011/">on that subject</a> on occasion, I think there is an inherent contradiction between a dashboard tool that lets a user freely manipulate a bunch of data and that articulated story where the user is more led throughout a process.</p>
<p>So that&#8217;s what led most of the work.</p>
<p>The second idea was that there is an unspoken, but IMO unnecessary rule about making Tableau dashboards compact things, highly interactive and interconnected. First, the elephant in the room: Tableau public is slow. It&#8217;s too slow. So too many interactions do not make a pleasant experience. Second, it is true that in Tableau one <em>can</em> assemble a dashboard out of interconnected worksheets, where clicking on one makes things happen in another. But just because you can doesn&#8217;t mean you <em>should</em>. Remember the &lt;BLINK&gt; element in the webpage of the 1990s? And this is this interconnectivity that causes dashboards to be compact and fit over the fold. If clicking on one element causes changes on another, you&#8217;d better be able to see both even on a laptop screen.</p>
<p>So the second idea was to create instead a long dashboard where a user would be held by the hand as she&#8217;s taken from point A to point B. Along the way, there would be texts and images to explain what&#8217;s going on, data &#8211; not necessarily interconnected, worksheets with little interactivity which can be understood at first sight, and which can stand some manipulation but don&#8217;t need to.</p>
<p>When visualization and storytelling intersect <a href="http://www.slideshare.net/vozome/dont-take-my-word-for-it-10279298">there is one form that I like</a> which is to start with a preconception and to let the user find through manipulation that this idea is wrong. So I tried to use that in the dashboard as well.</p>
<h2>The subject</h2>
<p>That&#8217;s actually the #1 issue in French politics right now. Which strategy should the main right-wing party adopt? Typically, during the presidential campaign, both large parties fight for the votes of the center and are less radical than usual. But during this campaign the UMP, the party of the former president Nicolas Sarkozy, steered hard to the right in an attempt to steal back the voters gone to the far-right.</p>
<p>Apparently, that strategy was successful, even if he lost the presidential rate, he managed to somehow catch up against his rival.</p>
<p>Yet there are those who argue that if the party was more moderate, it would have been more successful and possibly win.</p>
<p>Anyway. The presidential race is over. But now the party is deciding which way to go next by electing its next leader.</p>
<p>Fortunately, there is data that can be used to determine whether the far-right or the moderate strategy can be more fruitful. This is what it is about.</p>
<h2>Making the viz</h2>
<p>Tableau dashboards can go up to 4000px in height, so that&#8217;s what I shot for.</p>
<p>So let&#8217;s say it loud and clear, it&#8217;s hell to manipulate large dashboards in Tableau, even with a very strong computer. When you add a new worksheet the legend part and the quickfilter part are added whenever there is room which could be thousands of pixels away. Since you can&#8217;t drag an element across screens you may have to proceed in babysteps. Once there is a certain number of elements, be they text, blanks or very simple and stable worksheets, adding another element takes a very long time, so does moving them around, etc.</p>
<p>As usual fixed size is your only friend, fixed heights, fixed widths, alternating horizontal and vertical layout containers.</p>
<p>So up to the last 2 worksheets there is really nothing to write home about. Only this: when you interact on the published workbook on the web it is painstakingly slow as the dashboard is reloaded and recomputed in its entirety. While this is ok for most of the worksheet, for the most complex one (the one with many sliders) it&#8217;s just unacceptable because the sheet won&#8217;t have time to be redrawn between two interactions.</p>
<p>So I came up with an idea: create a secondary dashboard with just that sheet, publish it independently, and then, in the previous dashboard, I have added a web page object. And that web page pointed to that other dashboard. So in effect, there is a dashboard within a dashboard, so when there is interactions in the complex worksheet, the secondary, smaller dashboard is the only one which is reloaded and recomputed, which is noticeably faster. Still not faster as in fast, but usable.</p>
<p>now publishing aspects aside this worksheet is interesting. The idea is to update a model based on 19 criteria. For every record, the outcome depends the &#8220;closeness&#8221; of the answers of the record and those of the candidates. The 19 parameters control the position of one of the candidates: Nicolas Sarkozy. So what I&#8217;ve done is calculate, outside of Tableau, the &#8220;distance&#8221; between each record and each of the other 8, and in the data file, I&#8217;ve specified that minimal distance and the name of the corresponding candidate. Then, in Tableau, I compute in real time the distance between the record and the parameters, and if that score is inferior to the threshold in the data file, then Sarkozy is deemed to be the closest, else it is the one from the data file. The worksheet tallies up the number of records which are closest to each candidate. Also, in order to keep the parameters legible I have constrained them to 9 values, when they really represent numbers between -2 and 2.</p>
<p>Also for the record, I have made a French and an English version. Why? Because I hope to get the French version published in a media and weight in on the debate, while I need the English version for the contest. This raises a lot of issues, all the worksheets need to exist in 2 versions, many variables need to be duplicated as well. As a sidenote the marks concerning a candidate are colored in tableau blue /orange in English in order to highlight candidate Sarkozy, but according to the campaign colors of the candidates in the French version.</p>
<p>That&#8217;s about it. I hope you enjoy my viz!</p>
]]></content:encoded>
			<wfw:commentRss>/2012/09/05/tableau-2012-politics-contest-justification-and-making-of/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Which way to the right?</title>
		<link>/2012/09/05/which-way-to-the-right/</link>
		<comments>/2012/09/05/which-way-to-the-right/#comments</comments>
		<pubDate>Wed, 05 Sep 2012 18:14:03 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[contest]]></category>
		<category><![CDATA[iron viz]]></category>
		<category><![CDATA[politics]]></category>
		<category><![CDATA[right-wing]]></category>
		<category><![CDATA[sarkozy]]></category>
		<category><![CDATA[Tableau]]></category>
		<category><![CDATA[UMP]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1445</guid>
		<description><![CDATA[Here is my entry for the Tableau 2012 politics contest. Source of the data: Economic statistics from OECD, opinion data from TNS Sofres. Making-of and explanation post to follow.]]></description>
				<content:encoded><![CDATA[<p>Here is my entry for the Tableau 2012 politics contest.</p>
<p><iframe style="border: 0px;" src="http://public.tableausoftware.com/views/politics/DashEN" scrolling="no" width="802px" height="4000px"></iframe></p>
<p>Source of the data:</p>
<p>Economic statistics from OECD, opinion data from TNS Sofres.</p>
<p>Making-of and explanation post to follow.</p>
]]></content:encoded>
			<wfw:commentRss>/2012/09/05/which-way-to-the-right/feed/</wfw:commentRss>
		<slash:comments>10</slash:comments>
		</item>
		<item>
		<title>VAST challenge 2011</title>
		<link>/2011/07/01/vast-challenge-2011/</link>
		<comments>/2011/07/01/vast-challenge-2011/#comments</comments>
		<pubDate>Thu, 30 Jun 2011 22:09:33 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[data visualization]]></category>
		<category><![CDATA[protovis]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[contest]]></category>
		<category><![CDATA[disease]]></category>
		<category><![CDATA[terrorism]]></category>
		<category><![CDATA[twitter]]></category>
		<category><![CDATA[vast]]></category>
		<category><![CDATA[VAST challenge]]></category>
		<category><![CDATA[Vastopolis]]></category>
		<category><![CDATA[video]]></category>
		<category><![CDATA[visweek]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=930</guid>
		<description><![CDATA[This year I have participated to the VAST Challenge (VAST stands for visual analytics science and technology). The VAST symposium is part of the yearly VisWeek conferences. Anyway. The rules required contestants to send videos with voiceovers, so without further ado here they are. Watch me in HD instead!! Watch me in HD too!! If <a class="read-more" href="/2011/07/01/vast-challenge-2011/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>This year I have participated to the <a href="http://hcil.cs.umd.edu/localphp/hcil/vast11/index.php/">VAST Challenge</a> (VAST stands for visual analytics science and technology). The VAST symposium is part of the yearly VisWeek conferences. </p>
<p>Anyway. The rules required contestants to send videos with voiceovers, so without further ado here they are. </p>
<p><object width="560" height="349"><param name="movie" value="http://www.youtube.com/v/i5g7_iX9tVQ?version=3&amp;hl=fr_FR"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/i5g7_iX9tVQ?version=3&amp;hl=fr_FR" type="application/x-shockwave-flash" width="560" height="349" allowscriptaccess="always" allowfullscreen="true"></embed></object><br />
<a href="http://www.youtube.com/watch?v=i5g7_iX9tVQ&#038;hd=1">Watch me in HD instead!!</a></p>
<p><object width="560" height="349"><param name="movie" value="http://www.youtube.com/v/CMPZJLms9tU?version=3&amp;hl=fr_FR&amp;rel=0"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/CMPZJLms9tU?version=3&amp;hl=fr_FR&amp;rel=0" type="application/x-shockwave-flash" width="560" height="349" allowscriptaccess="always" allowfullscreen="true"></embed></object><br />
<a href="http://www.youtube.com/watch?v=CMPZJLms9tU&#038;hd=1">Watch me in HD too!!</a></p>
<p>If you want to play with the tools you can download them here: <a href="http://dl.dropbox.com/u/5259106/mc1.zip">mini-challenge 1</a>, <a href="http://dl.dropbox.com/u/5259106/mc3.zip">mini-challenge 3</a>. </p>
<p>Unfortunately, I couldn&#8217;t find the time to complete mini-challenge 2 and the grand challenge. I&#8217;m making this on my free time and I had to balance all kinds of commitments, so I couldn&#8217;t secure enough time to finish. Unlike previous years, though, I managed to find enough time to start ! so, in the words of Charlie Sheen: winning.</p>
<p>So what is this about?<br />
In the fictional Vastopolis, a mysterious infection strikes. Where does it come from and how is this transmitted? To answer these questions we have one million tweets sent by residents in the past 3 weeks. and among that million, there are quite a few about people reporting symptoms. </p>
<p>The first thing that I did was coming up for a method to tell whether one tweet was actually about a disease or not. so I scored them. I made a list of words that were required to consider that one message related to sickness, they were fairly univoquial like sick, flu, pneumonia, etc. Each of those words added one point to a &#8220;sickness&#8221; score. Then there was a second list of more ambiguous words like &#8220;a lot&#8221;, &#8220;pain&#8221;, &#8220;fire&#8221; etc. I added one point for each of these words or phrase, if a message already contains a required word. So, there were a few false negative, a few false positive, but all in all it was fairly accurate. </p>
<p>Fairly soon I had the idea to show the sums of all the scores of a part of the map, rather than showing each individual tweet. But originally, the sectors were quite large and I showed data by day.<br />
 <a href="http://jckr.github.io/blog/wp-content/uploads/2011/06/earlyshot.png"><img src="http://jckr.github.io/blog/wp-content/uploads/2011/06/earlyshot.png" alt="" title="earlyshot" class="aligncenter size-full wp-image-931" /></a></p>
<p>Then, I worked with finer sectors and by 6 hours chunks. That&#8217;s how I could exhibit how people moved towards the center of the map by day, and back to its edges every night. With finer geographic details I could also see some spikes in various areas of the map during the period that I couldn&#8217;t see before, which were not necessarily related to the disease.</p>
<p><a href="http://jckr.github.io/blog/wp-content/uploads/2011/06/nextshot.png"><img src="http://jckr.github.io/blog/wp-content/uploads/2011/06/nextshot.png" alt="" title="nextshot" class="aligncenter size-full wp-image-932" /></a></p>
<p>Eventually, I wanted to read what the tweets corresponded to, so I loaded the full text of the messages so that clicking on a square would reveal what was said at that moment. In this dataset, every spike in volume corresponds with an event that&#8217;s been added by the designers, so it was fun to discover everything happening there, from baseball games to accidents or buildings catching fire. Often, there were articles in the mini-challenge 3 dataset that would give more information about what really happened.</p>
<p>so, what was mini-challenge 3 about? nothing less than diagnosing possible terrorist threat. This time we were given not one million tweets, but thousands of articles which were much longer than 140 characters! From reading a few sample articles, I saw that most didn&#8217;t talk about terrorism or vastopolis at all. But couldn&#8217;t they contain clues that could link 2 and 2? </p>
<p>my first idea was to find all entities in the articles, that is names of people, or names of organizations (which follow a certain syntax) and arrange them in a network. The problem is that there were just too many names and groups (thousands of both) and I couldn&#8217;t tell from such a list which sounded suspicious. Although, a group called &#8220;network of hate&#8221; is probably not a charity. I&#8217;m sure it is possible to solve the challenge like this, but I chose another way to get my first leads.</p>
<p>I just did like in mini-challenge 1 and scored my articles, but I gave them several scores instead of just one by comparing them to several series of words. One series, for instance, was all the proper names in Vastopolis, like names of neighborhoods, because articles <em>about</em> Vastopolis are probably more interesting. The other series corresponded to various kind of threats. </p>
<p>That allowed me to create the scatterplot form which I used both to represent articles and to narrow the selection by selecting an area if needed. Then, as time went by I added more and more features to the tool, for instance an interface to read articles with keywords highlighted, the possibility to filter articles by keyword in addition to a graphical interface, being able to see all the articles as a list and select from that list, not just from the scatterplot, and finally the possiblity to mark articles as interesting and regroup them in another list&#8230;</p>
<p>That was about when I felt I could run out of time, so I didn&#8217;t add the other features I had planned or worked on making a decent interface. Also, I spent a lot of time not just trying to solve the challenge, but reading all the stories that were planted in the dataset, linking them to the tweets of MC1, etc. </p>
<p>Anyway. I quite enjoyed working on that and really, really appreciated the humongous work that went into creating the vast challenge universe. I&#8217;m looking forward seeing what other teams came up with. On a side note, it&#8217;s probably my last protovis projects as it makes sense to completely switch to D3 now&#8230;</p>
]]></content:encoded>
			<wfw:commentRss>/2011/07/01/vast-challenge-2011/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>An analysis of two New York Times interactive visualization</title>
		<link>/2011/05/11/an-analysis-of-two-new-york-times-interactive-visualization/</link>
		<comments>/2011/05/11/an-analysis-of-two-new-york-times-interactive-visualization/#comments</comments>
		<pubDate>Wed, 11 May 2011 19:07:16 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=858</guid>
		<description><![CDATA[In the field of information visualization, professing one&#8217;s admiration for the work of the New York Times is not a very bold statement. However, my point is that they are admired mostly for the wrong reason (excellence in visual design and aesthetics). And by that, I don&#8217;t mean that it is not important to produce <a class="read-more" href="/2011/05/11/an-analysis-of-two-new-york-times-interactive-visualization/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>In the field of information visualization, professing one&#8217;s admiration for the work of the New York Times is not a very bold statement. However, my point is that they are admired mostly for the wrong reason (excellence in visual design and aesthetics). And by that, I don&#8217;t mean that it is not important to produce a visually pleasing experience, but rather that the work of the NYT graphics team deserves even more praise for its conception than its execution.</p>
<p>In the two examples I have chosen I&#8217;m highlighting aspects of their work that should be emulated with more dedication than their trademark visual style.</p>
<h2>The examples</h2>
<p><div style="width: 978px" class="wp-caption alignnone"><img title="You fix the budget" src="http://jckr.github.io/blog/stuff/images/youfixthebudget.png" alt="You fix the budget" width="968" height="685" /><p class="wp-caption-text">You fix the budget, New York Times, November 13th 2010</p></div></p>
<p>Those will be: <a href="http://www.nytimes.com/interactive/2010/11/13/weekinreview/deficits-graphic.html">You Fix the Budget</a>, published in November 13th 2010, and the recent <a href="http://www.nytimes.com/interactive/2011/05/03/us/20110503-osama-response.html">The Death of a Terrorist: A Turning Point?</a> published May 3rd, 2011.</p>
<p><div style="width: 964px" class="wp-caption alignnone"><img title="Death of a terrorist - a turning point" src="http://jckr.github.io/blog/stuff/images/Image_2.png" alt="Death of a terrorist - a turning point" width="954" height="576" /><p class="wp-caption-text">Death of a terrorist - a turning point, New York Times, May 3rd 2011</p></div></p>
<h3>Putting the user in charge</h3>
<p>In both examples the visualizations work by asking the user their opinion in a very simple, non-intrusive manner. In the budget example the user can check or uncheck boxes. Each box is attached to a highly legible text that can easily entice a reaction. The title alone (i.e. &#8220;cut foreign aid in half&#8221;) which is always short and to the point, is enough for the user to take a position &#8211; agree (and check the box) or disagree. In a possible second phase, the user can read a more detailed description and see how much money can be saved by enacting such or such measure.</p>
<p>All in all, the experience is <strong>not directive</strong> and feels user-controlled. On typical information <strong>visualizations </strong>(say, <a href="http://www.gapminder.org/world/">gapminder</a>) even if there are many controls the user is left on the spectator seat: the data unfold, they can be presented differently but the output cannot be changed. Conversely,  this is a <strong>simulation</strong>: by capturing a certain number of key inputs from the user, there can be different outcomes.</p>
<p>The same can be said about the Ussama Bin Laden one. The user simply positions their mood on a map. In one gesture they answer two questions. Then, they can speak their mind.  While this doesn&#8217;t take a lot of energy from the user the system is able to collect, in this simple interaction, a very precise answer that can be aggregated with everyone else&#8217;s.</p>
<p>Each user input has an impact on the overall shape of the visualization. By using it, people are naturally re-shaping it. Again, the question is non-directive (although it seems in all fairness that extreme positions are made more appealing with this presentation). There is no right, or wrong answer. The authors of the visualization are not giving a lecture on how people should feel or react to the event, likewise, they were not weighing too heavily on one side or the other of the political spectrum in the budget puzzle. I did feel a slight bias but I think they did their best to make it objective. But by <strong>letting the user experiment</strong> with the options at their disposal they encourage them to make their own opinion.</p>
<h3>The visualization reacts to me</h3>
<p>So we&#8217;ve established that the user in charge in both cases. The visualization reinforces that feeling by providing clear feedback when the user interacts with it, even it this is not the &#8220;end&#8221; of the experience. For instance, every cross checked and unchecked causes mini-panels to rotate in the budget puzzle, which are an evidence that something is happening, or that the system is taking the user into account. Technically, these transitions are absolutely not necessary but they really support that idea that the user is in charge and that even the most innocuous input is taken into account.</p>
<h3>This relates to me</h3>
<p>When discussing budget it&#8217;s easy to get carried away in a swirl of millions, billions, and the like. This is why it is not uncommon to see, even in the most serious publications, writers who, by an honest mistake, divide or multiply an economic indicator by a factor of thousand or a million. It is not very effective to present such big numbers without a referent, especially to a non-specialist audience. I don&#8217;t know what a billion dollar is. This is too abstract. A million people? this is awfully like 2 million people or 100,000 people in my opinion.</p>
<p>I think it is pointless to try to &#8220;educate&#8221; the citizens and hope they will remember &#8220;important statistics&#8221;  like GDP. Those large and abstract numbers <strong>don&#8217;t relate to them</strong> and they don&#8217;t need them to live their daily lives. That said, every citizen can make an informed decision based on their values if they are presented facts in a way that speak to them. For instance, whether medicare budget should be cut by $10 billion per year is a difficult question. But whether the eligibility age should be risen to 68 years is framing the question in a way that <strong>does relate to users</strong>.</p>
<p>For the death of a terrorist one, my initial reaction was to look for the words of people who would be in the same quadrant as me. Do they feel as I do? How about those who are in very different parts of the matrix? how do they put their feelings into words? <strong>I relate to both of these groups</strong>, differently but in a way that interests me and encourages me to interact further. Also, I see that I am not part of the majority. That again tells me something which is based on my relationship with the visualization and the respondents. This relationship is enabled by the author, but again not directed.</p>
<h2>Going further &#8211; game mechanisms in visualization</h2>
<p style="text-align: left;">Letting the user manipulate parameters that change not only how data is represented, but change the data proper, is not unlike videogames. Many games are really a layer of abstraction over an economic simulation, like Sim City or (gasp) Farmville. There is now <a href="http://gamification-research.org/chi2011/papers/">ample research</a> in gamification, which is the introduction of game mechanisms in non-game contexts. Such game mechanisms can make visualizations more compelling, more engaging for the users and, by putting them in the right state of mind, these mechanisms can improve the transmission of ideas and opinions.</p>
<h2 style="text-align: left;"></h2>
]]></content:encoded>
			<wfw:commentRss>/2011/05/11/an-analysis-of-two-new-york-times-interactive-visualization/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
	</channel>
</rss>
