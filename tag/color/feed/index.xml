<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>color &#8211; jeromecukier.net</title>
	<atom:link href="http://localhost/tag/color/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Just another WordPress site</description>
	<lastBuildDate>Wed, 17 Aug 2016 05:36:39 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.10</generator>
	<item>
		<title>d3: scales, and color.</title>
		<link>/2011/08/11/d3-scales-and-color/</link>
		<comments>/2011/08/11/d3-scales-and-color/#comments</comments>
		<pubDate>Thu, 11 Aug 2011 10:03:21 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[d3]]></category>
		<category><![CDATA[protovis]]></category>
		<category><![CDATA[tips]]></category>
		<category><![CDATA[color]]></category>
		<category><![CDATA[color palettes]]></category>
		<category><![CDATA[hsl]]></category>
		<category><![CDATA[linear]]></category>
		<category><![CDATA[logarithmic]]></category>
		<category><![CDATA[ordinal]]></category>
		<category><![CDATA[power]]></category>
		<category><![CDATA[quantitative]]></category>
		<category><![CDATA[rgb]]></category>
		<category><![CDATA[scales]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">http://www.jeromecukier.net/?p=1026</guid>
		<description><![CDATA[In protovis, scales were super-useful in just about everything. That much hasn&#8217;t changed in d3, even though d3.scale is a bit different from pv.Scale. (do note that d3.scale is in lowercase for starters). Scales: the main idea Simply put: scales transform a number in a certain interval (called the domain) into a number in another <a class="read-more" href="/2011/08/11/d3-scales-and-color/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>In <a href="http://mbostock.github.com/protovis/docs/scale.html">protovis</a>, scales were super-useful in just about everything. That much hasn&#8217;t changed in d3, even though <a href="https://github.com/mbostock/d3/wiki/Scales">d3.scale</a> is a bit different from pv.Scale. (do note that <strong>d3.scale</strong> is in lowercase for starters).</p>
<h2>Scales: the main idea</h2>
<p>Simply put: scales transform a number in a certain interval (called the <em>domain</em>) into a number in another interval (called the <em>range</em>).<br />
<img src="http://www.jeromecukier.net/wp-content/uploads/2011/08/d3scale1.png" alt="an example of how scales work" /><br />
For instance, let&#8217;s suppose you <em>know</em> your data is always over 20 and always below 80. You would like to plot it, say, in a bar chart, which can be only 120 pixels tall.<br />
You could, obviously, do the math:</p>
<pre class="brush: jscript; title: ; notranslate">.attr(&quot;height&quot;, function(d) {return (d-20)*2;})</pre>
<p>But what if you suddenly have more or less space? or your data changes? you&#8217;d have to go back to the entrails of your code and make the change. This is very error prone. So instead, you can use a scale: </p>
<pre class="brush: jscript; title: ; notranslate">var y=d3.scale.linear().domain(20,80).range(0,120);
...
.attr(&quot;height&quot;, y)</pre>
<p>this is much simpler, elegant, and easy to maintain. Oh, and the latter notation is equivalent to
<pre class="brush: jscript; title: ; notranslate">.attr(&quot;height&quot;, function(d) {return y(d);})</pre>
<p>&#8230; only more legible and shorter.<br />
And, there are tons of possibility with scales. </p>
<h2>Fun with scales</h2>
<p>In d3, quantitative scales can be of several types: </p>
<ul>
<li>linear scales (including <em>quantize</em> and <em>quantile</em> scales,</li>
<li>logarithmic scales,</li>
<li>power scales (including <em>square root</em> scales)</li>
</ul>
<p>While they behave differently, they have a lot in common. </p>
<h3>Domain and range</h3>
<p>For all scales, with the exception of quantize and quantile scales which are a bit different, domain and range work the same.<br />
First, note that <strong>unlike in protovis</strong>, domain and range take an array as argument. Compare:</p>
<pre class="brush: jscript; title: ; notranslate">var y=pv.Scale.linear().range(20,60).domain(0,120);
var y=d3.scale.linear().range([20,60]).domain([0,120]);</pre>
<p>This is because <strong>contrary to protovis</strong>, where domain could be a whole dataset, in d3, domain contains the bounds of the interval that is going to be transformed.<br />
Typically, this is two numbers. If this is more, we are talking about a polypoint scale: there are as many segments in the intervals as there are numbers in the domain (minus one). The range must have as many numbers, and so as many segments. When using the scale, if a number is in the n-th segment of the domain, it is transformed into a number in the n-th segment of the range.<br />
<img src="http://www.jeromecukier.net/wp-content/uploads/2011/08/d3scaleMultipoint.png" alt="illustration of a multipoint scale" /><br />
With this example, 30 finds itself in the first segment of the domain. So it&#8217;s transformed to a value in the first segment of the range. 60, however, is in the 2nd segment, so it&#8217;s transformed into a value in the 2nd segment of the range.<br />
Also, bounds of domain and range need not be numbers, as long as they can be converted to numbers. One useful examples are colors. Color names can be used as range, for instance, to create <em>color ramps</em>:</p>
<pre class="brush: jscript; title: ; notranslate">var ramp=d3.scale.linear().domain([0,100]).range([&quot;red&quot;,&quot;blue&quot;]);</pre>
<p>This will transform any value betwen 0 and 100 into the corresponding color between red and blue.</p>
<h3>Clamping</h3>
<p>What happends if the scale is asked to process a number outside of the domain? That&#8217;s what clamping controls. If it is set, then the bounds of the range are the minimum and maximum value that can be returned by the scale. Else, the same transformation applies to all numbers, whether they fall within the domain or not.<br />
<img src="http://www.jeromecukier.net/wp-content/uploads/2011/08/d3clamping.png" alt="Clamping example" /><br />
Here, with clamping, the result of the linear transformation is 120, but without it, it&#8217;s 160. </p>
<pre class="brush: jscript; title: ; notranslate">var clamp=d3.scale.linear().domain([20,80]).range([0,120]);
clamp(100); // 160
clamp.clamp(true);
clamp(100); // 120</pre>
<h3>Scales and nice numbers</h3>
<p>More often than not, the bounds of the domain and/or those of the ranges will be calculated. So, chances are they won&#8217;t be round numbers, or numbers a human would like. Scales, however, come with a bunch of method to address that. d3 keeps in mind that scales are often used to position marks along an axis.</p>
<h4>.nice()</h4>
<p>When applied to a scale, the nice method expends the domain to &#8220;nicer&#8221; numbers. You wouldn&#8217;t want your axis to start at -2.347 and end at 7.431, right?<br />
So, there. </p>
<pre class="brush: jscript; title: ; notranslate">var data=[-2.347, 4, 5.23,-1.234,6.234,7.431]; // or whatever.
var y=d3.scale.linear().range([0,120]);
y.domain([d3.min(data), d3.max(data)]); // domain takes bounds as arguments, not all numbers
y.domain() // [-2.347, 7.431];
y.nice() // [-3, 8]</pre>
<h4>.ticks(n)</h4>
<p>Given a domain, and a number n (which, <strong>contrary to protovis, is mandatory in d3</strong>), the ticks method will split your domain in (more or less) n convenient, human-readable values, and return an array of these values. This is especially useful to label axes. Passing these values to the scale allows them to position ticks nicely on an axis. </p>
<pre class="brush: jscript; title: ; notranslate">var y=d3.scale.linear([20,80]).range([0,120]);
...
var ticks=axis.selectAll(&quot;line&quot;)
  .data(y.ticks(4)) // 20, 40, 60 and 80
  .enter().append(&quot;svg:line&quot;);
ticks
  .attr(&quot;x1&quot;,0).attr(&quot;x2&quot;,5)
  .attr(&quot;y1&quot;,y).attr(&quot;y2&quot;,y) // short and simple. 
  .attr(&quot;stroke&quot;,&quot;black&quot;);</pre>
<h4>.rangeRound()</h4>
<p>If used instead of .range(), this will guarantee that the output of the scales are integers, which is better to position marks on the screen with pixel precision than numbers with decimals. </p>
<h4>.invert()</h4>
<p>The invert function turns the scale upside down: for one given number in the range, it returns which number of the domain would have been transformed into that number.<br />
For instance: </p>
<pre class="brush: jscript; title: ; notranslate">var y=d3.scale.linear([20,80]).range([0,120]);
y(50); // 60
y.invert(60); // 50</pre>
<p>That&#8217;s quite useful, for instance, when a user mouses over a chart, and you would like to know to what value the mouse coordinates correspond. </p>
<h3>Power scales and log scales</h3>
<p>The <em>linear</em>scale is a function of the form y=ax+b which works for both ends of the domain and range. In the example we&#8217;ve used most often until now, this function is really f(x): y=2x-40.<br />
Power and logarithm scales work the same, only we are looking for a function of the form y=ax<sup>k</sup>+b, or y=a.log(x)+b.<br />
For the power scales, you can specify an exponent (k) with the .exponent() method. For instance, if we specify an exponent of 2, here is what the scale would look like:<br />
<img src="http://www.jeromecukier.net/wp-content/uploads/2011/08/d3scalePower.png" alt="an example of a power scale" /><br />
The equation is now f(x): y=x²/50-8. So 20 still becomes 0 and 80 still becomes 120, but other than that the values at the beginning of the domain would be lower than with the linear scale, and those at the end of the scale will be higher.<br />
For convenience, d3 includes a d3.scale.sqrt() (the square root scale) so you never have to type d3.scale.pow.exponent(0.5) in full.<br />
Also note that if you are using a log scale, you <strong>cannot</strong> have 0 in the domain. </p>
<h3>Quantize and quantile</h3>
<p>quantize and quantile are specific linear scales.<br />
quantize works with a discrete, rather than continuous, range: in other terms, the output of quantize can only take a certain number of values.<br />
For instance: </p>
<pre class="brush: jscript; title: ; notranslate">var q=d3.scale.quantize().domain([0,10]).range([0,2,8]); 
q(0); // 0
q(3); // 0
q(3.33); // 0
q(3.34); // 2
q(5); // 2
q(6.66); // 2
q(6.67); // 8
q(8); // 8
q(1000); // 8</pre>
<p>quantile on the other hand matches values in the domain (which, this time, is the full dataset) with their respective quantile. The number of quantiles is specified by the range.<br />
For instance: </p>
<pre class="brush: jscript; title: ; notranslate">
var q=d3.scale.quantile().domain([0,1,5,6,2,4,6,2,4,6,7,8]).range([0,100]);
q.quantiles(); // [4.5], only one quantile - the median
q(0); // 0
q(4); // 0
q(4.499); // 0
q(4.5); // 100 - over the median
q(5); // 100
q(10000); // 100
q.range([0,25,50,75,100]);
q.quantiles(); // [2, 4, 5.6, 6];
q(0); // 0 
q(2); // 25 - greater than the first quantile limit
q(3); // 25
q(4); // 50
q(6); // 100
q(10000); // 100</pre>
<h3>Ordinal scales</h3>
<p>All the scales we&#8217;ve seen so far have been quantitative, but how about ordinal scales?<br />
The big difference is that ordinal scales have <strong>a discrete domain</strong>, in other words, they turn a limited number of values into something else, without caring for what&#8217;s between those values.<br />
Ordinal scales are very useful for positioning marks along an x axis. Let&#8217;s suppose you have 10 bars to position for your bar chart, each corresponding to a category, a month or whatever.<br />
For instance: </p>
<pre class="brush: jscript; title: ; notranslate">
var x=d3.scale.ordinal()
  .domain([&quot;Sunday&quot;,&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;,&quot;Saturday&quot;]) // 7 items
  .rangeBands([0,120]);
x(&quot;Tuesday&quot;); // 34.285714285714285
</pre>
<p>There are 3 possibilites for range. Two are similar: the .rangePoints() and .rangeBands() methods, which both work with an array of two numbers &#8211; i.e. .rangeBands([0,120]). The last one is to specify all values in the range with .range(). </p>
<h4>rangePoints() and rangeBands()</h4>
<p>With .rangePoints(<em>interval</em>), d3 fits n points within the interval, n being the number of categories in the domain. In that case, the value of the first point is the beginning of the interval, that of the last point is the end of the interval.<br />
With .rangeBands(<em>interval</em>), d3 fit n <em>bands</em> within the interval. Here, the value of the last item in the domain is less than the upper bound of the interval.<br />
Those methods <strong>replace the protovis methods</strong> .split() and .splitBanded().<br />
<img src="http://www.jeromecukier.net/wp-content/uploads/2011/08/d3ordinalRange.png" alt="difference between rangeBands and rangePoints" /><br />
This chart illustrates the difference between using rangeBands and rangePoints. </p>
<pre class="brush: jscript; title: ; notranslate">var x=d3.scale.ordinal()
  .domain([&quot;Sunday&quot;,&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;,&quot;Saturday&quot;]);
x.rangePoints([0,120]);
x(&quot;Saturday&quot;); // 120
x.rangeBands([0,120]);
x(&quot;Saturday&quot;); // 102.85714285714286
x(&quot;Saturday&quot;)+x.rangeBand(); // 120</pre>
<h4>the range method</h4>
<p>Finally, we can also use the .range method with several values.<br />
We can specify the domain, or not. Then, if we use such a scale on a value which is not part of the domain (or if the domain is left empty), this value is added to the domain. If there are <em>n</em> values in the range, and more in the domain, then the n+1<sup>th</sup> value of the doamin is matched with the 1st value in the range, etc.</p>
<pre class="brush: jscript; title: ; notranslate">var x=d3.scale.ordinal().range([&quot;hello&quot;, &quot;world&quot;]); 
x.domain(); // [] - empty still.
x(0); // &quot;hello&quot;
x(1); // &quot;world&quot;
x(2); // &quot;hello&quot;
x.domain(); // [0,1,2]
</pre>
<h4>Color palettes</h4>
<p><strong>Unlike in protovis</strong>, which had them under pv.Colors &#8211; i.e. pv.Colors.category10(), in d3, built-in color palettes can be accessed through scales. Well, even in protovis they had been ordinal scales all along, only not called this way.<br />
There are <a href="https://github.com/mbostock/d3/wiki/Ordinal-Scales#category10">4 built-in color palette</a> in protovis: d3.scale.category10(), d3.scale.category20(), d3.scale.category20b(), and d3.scale.category20c().</p>
<p>A palette like d3.scale.category10() works exactly like an ordinal scale. </p>
<pre class="brush: jscript; title: ; notranslate">
var p=d3.scale.category10();
var r=p.range(); // [&quot;#1f77b4&quot;, &quot;#ff7f0e&quot;, &quot;#2ca02c&quot;, &quot;#d62728&quot;, &quot;#9467bd&quot;, 
                      // &quot;#8c564b&quot;, &quot;#e377c2&quot;, &quot;#7f7f7f&quot;, &quot;#bcbd22&quot;, &quot;#17becf&quot;]
var s=d3.scale.ordinal().range(r); 
p.domain(); // [] - empty
s.domain(); // [] - empty, see above
p(0); // &quot;#1f77b4&quot;
p(1); // &quot;#ff7f0e&quot;
p(2); // &quot;#2ca02c&quot;
p.domain(); // [0,1,2];
s(0); // &quot;#1f77b4&quot;
s(1); // &quot;#ff7f0e&quot;
s(2); // &quot;#2ca02c&quot;
s.domain(); // [0,1,2];</pre>
<p>It&#8217;s noteworthy that in d3, color palette return strings, not pv.Color objects like in protovis.<br />
Also: </p>
<pre class="brush: jscript; title: ; notranslate">
d3.scale.category10(1); // this doesn't work
d3.scale.category10()(1); // this is the way.</pre>
<h2>Colors</h2>
<p>Compared to protovis, d3.color is simpler. The main reason is that protovis handled color and transparency together with the pv.Color object, whereas in SVG, those two are distinct attributes: you handle the background color of a filled object with <em>fill</em>, its transparency with <em>opacity</em>, the color of the outline with <em>stroke</em> and the transparency of that color with <em>stroke-opacity</em>. </p>
<p>d3 has two color objects: d3_Rgb and d3_Hsl, which describe colors in the two of the most popular color spaces: red/green/blue, and hue/saturation/light. </p>
<p>With d3.color, you can make operations on such objects, like converting colors between various formats, or make colors lighter or darker.</p>
<p>d3.rgb(<em>color</em>), and d3.hsl(<em>color</em>) create such objects.<br />
In this context, <em>color</em> can be (straight from <a href="https://github.com/mbostock/d3/wiki/Colors">the manual</a>):</p>
<ul>
<li>rgb decimal &#8211; &#8220;rgb(255,255,255)&#8221;</li>
<li>hsl decimal &#8211; &#8220;hsl(120,50%,20%)&#8221;</li>
<li>rgb hexadecimal &#8211; &#8220;#ffeeaa&#8221;</li>
<li>rgb shorthand hexadecimal &#8211; &#8220;#fea&#8221;</li>
<li>named &#8211; &#8220;red&#8221;, &#8220;white&#8221;, &#8220;blue&#8221;</li>
</ul>
<p>Once you have that object, you can make it brighter or darker with the appropriate method.<br />
You can use .toString() to get it back in rgb hexadecimal format (or hsl decimal), and .rgb() or .hsl() to convert it to the object in the other color space. </p>
<pre class="brush: jscript; title: ; notranslate">
var c=d3.rgb(&quot;violet&quot;) // d3_Rgb object
c.toString(); // &quot;#ee82ee&quot;
c.darker().toString(); // &quot;#a65ba6&quot;
c.darker(2).toString(); // &quot;#743f74&quot; - even darker
c.brighter().toString();// &quot;ffb9ff&quot;
c.brighter(0.1).toString(); // &quot;#f686f6&quot; - only slightly brighter
c.hsl(); // d3_Hsl object
c.hsl().toString() // &quot;hsl(300, 76, 72)&quot;</pre>
]]></content:encoded>
			<wfw:commentRss>/2011/08/11/d3-scales-and-color/feed/</wfw:commentRss>
		<slash:comments>21</slash:comments>
		</item>
	</channel>
</rss>
