<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>selection &#8211; jckr.github.io/blog</title>
	<atom:link href="http://localhost/tag/selection/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Just another WordPress site</description>
	<lastBuildDate>Wed, 17 Aug 2016 05:36:39 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.10</generator>
	<item>
		<title>d3: adding stuff. And, oh, understanding selections</title>
		<link>/2011/08/09/d3-adding-stuff-and-oh-understanding-selections/</link>
		<comments>/2011/08/09/d3-adding-stuff-and-oh-understanding-selections/#comments</comments>
		<pubDate>Tue, 09 Aug 2011 12:49:23 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[d3]]></category>
		<category><![CDATA[protovis]]></category>
		<category><![CDATA[tips]]></category>
		<category><![CDATA[charts]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[selection]]></category>
		<category><![CDATA[svg]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1012</guid>
		<description><![CDATA[From data to graphics d3 and protovis are built around the same principle. Take data, put it into an array, and for each element of data a graphical object can be created, whose properties are derived from the data that was provided. Only d3 and protovis have a slightly different way of adding those graphical <a class="read-more" href="/blog/2011/08/09/d3-adding-stuff-and-oh-understanding-selections/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<h2>From data to graphics</h2>
<p><img src="https://jckr.github.io/blog/wp-content/uploads/2011/08/d3principle.png" alt="the d3 principle (and also the protovis principle)" /><br />
d3 and protovis are built around the same principle. Take data, put it into an array, and for each element of data a graphical object can be created, whose properties are derived from the data that was provided.</p>
<p>Only d3 and protovis have a slightly different way of adding those graphical elements and getting data. </p>
<p>In protovis, you start from a panel, a protovis-specific object, to which you add various marks. Each time you add a mark, you can either:</p>
<ul>
<li><strong>not</strong> specify data and add just one, </li>
<li> or <strong>specify</strong> data and create as many as there are items in the array you pass as data.</li>
</ul>
<p>.</p>
<h2>How de did it in protovis</h2>
<pre class="brush: jscript; title: ; notranslate">
var vis=new pv.Panel().width(200).height(200); 
vis.add(pv.Panel).top(10).left(10)
  .add(pv.Bar)
    .data([1,4,3,2,5])
    .left(function() {return this.index*20;})
    .width(15)
    .bottom(0)
    .height(function(d) {return d*10;});
vis.render();</pre>
<p><img src="https://jckr.github.io/blog/wp-content/uploads/2011/08/protoBar.png" alt="this simple bar chart in protovis" /><br />
you first create a panel (first line), you may add an element without data (here, another panel, line 2), and add to this panel bars: there would be 5, one for each element in the array in line 4. </p>
<h2>And in d3?</h2>
<p>In d3, you also have a way to add either one object without passing data, or a series of objects &#8211; one per data element. </p>
<pre class="brush: jscript; title: ; notranslate">
var vis=d3.select(&quot;body&quot;).append(&quot;svg:svg&quot;).attr(&quot;width&quot;,200).attr(&quot;height&quot;,200);
var rect=vis.selectAll(&quot;rect&quot;).data([1,4,3,2,5]).enter().append(&quot;svg:rect&quot;);
rect.attr(&quot;height&quot;,function(d) {return d*20;})
  .attr(&quot;width&quot;, 15)
  .attr(&quot;x&quot;,function(d,i) {return i*20;})
  .attr(&quot;y&quot;,function(d) {return 100-20*d;}
  .attr(&quot;fill&quot;,&quot;steelblue&quot;);
</pre>
<p>In the first line, we are creating an svg document which will be the root of our graphical creation. It behaves just as the top-level panel in protovis. </p>
<p>However we are not creating this out of thin air, but rather we are bolting it onto an existing part of the page, here the <body> tag. Essentially, we are looking through the page for a tag named <body> and once we find it (which should be the case often), that&#8217;s where we put the svg document. </p>
<p>Oftentimes, instead of creating our document on <body>, we are going to add it to an existing &lt;div&gt; block, for instance: </p>
<pre class="brush: jscript; title: ; notranslate">
&lt;div id=&quot;chart&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var vis=d3.select(&quot;#chart&quot;).append(&quot;svg:svg&quot;);
...
&lt;/script&gt;
</pre>
<p>Anyway. To <strong>add one element</strong>, regardless of data, what you do is: </p>
<p>The logic is : d3.select(<em>where we would like to put our new object</em>).append(<em>type of new object</em>).</p>
<p>Going back to our code: </p>
<pre class="brush: jscript; title: ; notranslate">
var vis=d3.select(&quot;body&quot;).append(&quot;svg:svg&quot;).attr(&quot;width&quot;,200).attr(&quot;height&quot;,200);
var rect=vis.selectAll(&quot;rect&quot;).data([1,4,3,2,5]).enter().append(&quot;svg:rect&quot;);
rect.attr(&quot;height&quot;,function(d) {return d*20;})
  .attr(&quot;width&quot;, 15)
  .attr(&quot;x&quot;,function(d,i) {return i*20;})
  .attr(&quot;y&quot;,function(d) {return 100-20*d;}
  .attr(&quot;fill&quot;,&quot;steelblue&quot;);
</pre>
<p>On line 2, we see a different construct:</p>
<p><em>an existing selection, or a part of the page</em><br />
.selectAll(<em>something</em>)<br />
.data(<em>an array</em>)<br />
.enter()<br />
.append(<em>an object type</em>)</p>
<p>This sequence of methods (selectAll, data, enter and append) are the way to add a series of elements. If all you need to know is to create a bar chart, just remember that, but if you plan on taking your d3 skills further than where you stopped with protovis, look at the end of the post for a more thorough explanation of the selection process. </p>
<h2>Attributes and accessor functions</h2>
<p>At this stage, we&#8217;ve added our new rectangles, and now we are going to shape and style them. </p>
<pre class="brush: jscript; title: ; notranslate">rect.attr(&quot;height&quot;,function(d) {return d*20;})
  .attr(&quot;width&quot;, 15)
  .attr(&quot;x&quot;,function(d,i) {return i*20;})
  .attr(&quot;y&quot;,function(d) {return 100-20*d;}
  .attr(&quot;fill&quot;,&quot;steelblue&quot;);
</pre>
<p>All the attributes of a graphical element are controlled by the method attr(). You specify the attribute you want to set, and the value you want to give.<br />
In some cases, the value doesn&#8217;t depend on the data. All the bars will be 15 pixels wide, and they will all be of the steelblue color.<br />
In some others, the value do depend on the data. We decide that the height of each bar is 20 times the value of the underlying data, in pixels (so 1 becomes 20, 5 becomes 100 etc.). Like in protovis, once data has been attributed to an element, function(<em>variable name</em>) enables to return a dynamic value in function on that element. By convention, we usually write function(d) {&#8230;;} (d for data) although it could be anything. Those functions are still called <strong>accessor functions</strong>.<br />
so for instance: </p>
<pre class="brush: jscript; title: ; notranslate">.attr(&quot;height&quot;,function(d) {return d*20;})</pre>
<p>means that the height will be 20 times the value of the underlying data element (exactly what we said above).<br />
In protovis, we could position the mark relatively to any corner of its parent, so we had a .top method and a .bottom method. But with SVG, objects are positioned relatively to the top-left corner. So when we specify the y position, it is also relative to the top of the document, not necessarily to the axis (and not in this case).<br />
so &#8211;
<pre class="brush: jscript; title: ; notranslate">.attr(&quot;y&quot;, function(d) {return 100-d*20;})</pre>
<p>if we use scales (see next post), all of this will have no impact whatsoever anyway.<br />
Finally, there is an attribue here which doesn&#8217;t so much depend on the <em>value</em> of the data, but of its <em>rank</em> in the data items: the x position.<br />
for this, we write: function(d,i) {return i*20;}<br />
Here is a <strong>fundamental difference with protovis</strong>. In protovis, when we passed a second argument to such a function, it meant the data of the parent element (grand parent for the third, etc.). But here in d3, the second parameter is the position of the data element in its array. By convention, we write it i (for index).<br />
And since you have to know: there is no easy way to retrieve the data of the parent element. </p>
<h2>Bonus: understanding selections</h2>
<p>To add many elements at once we&#8217;ve used the sequence: selectAll, data, enter, append.<br />
Why use 4 methods for what appears to be one elementary task? If you don&#8217;t care about manipulating nodes individually, for instance for animations, you can just remember the sequence. But if you want to know more, here is what each method does. </p>
<h3>selectAll</h3>
<p><img src="https://jckr.github.io/blog/wp-content/uploads/2011/08/d3selectAll.png" alt="the selectAll method" /><br />
First, we select a point on which to add your new graphical objects. When you are creating your objects and use the selectAll method, it will return an <em>empty selection</em> but based on that given point. You may also use selectAll in another context, to update your objects for instance. But here, an empty selection is expected. </p>
<h3>data</h3>
<p><img src="https://jckr.github.io/blog/wp-content/uploads/2011/08/d3data.png" alt="the data method" /><br />
Then, you attribute data. This works quite similarly to protovis: d3 expects an array. d3 takes the concept further (with the concept of <em>data joins</em>) but you need not concern yourself with that until you look at transitions.<br />
Anyway, at this stage you have an empty selection, based on a given point in the page, but with data.</p>
<h3>enter</h3>
<p><img src="https://jckr.github.io/blog/wp-content/uploads/2011/08/d3enter.png" alt="the enter method" /><br />
The enter method updates the selection with nodes which have data, but no graphical representation. Using enter() is like creating stubs where the graphical elements will be grafted. </p>
<h3>append</h3>
<p><img src="https://jckr.github.io/blog/wp-content/uploads/2011/08/d3append.png" alt="the append method" /><br />
Finally, by appending we actually create the graphical objects. Each is tied to one data element, so it can be further styled (for instance, through &#8220;attr&#8221;) to derive its characteristics from the value of that data.</p>
]]></content:encoded>
			<wfw:commentRss>/2011/08/09/d3-adding-stuff-and-oh-understanding-selections/feed/</wfw:commentRss>
		<slash:comments>11</slash:comments>
		</item>
	</channel>
</rss>
