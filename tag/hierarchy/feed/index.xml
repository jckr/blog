<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>hierarchy &#8211; jeromecukier.net</title>
	<atom:link href="http://localhost/tag/hierarchy/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Just another WordPress site</description>
	<lastBuildDate>Wed, 17 Aug 2016 05:36:39 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.10</generator>
	<item>
		<title>Working with data in protovis &#8211; part 4 of 5</title>
		<link>/2011/02/11/working-with-data-in-protovis-part-4-of-5/</link>
		<comments>/2011/02/11/working-with-data-in-protovis-part-4-of-5/#comments</comments>
		<pubDate>Fri, 11 Feb 2011 00:51:39 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[charts]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[protovis]]></category>
		<category><![CDATA[tips]]></category>
		<category><![CDATA[aggregation]]></category>
		<category><![CDATA[hierarchy]]></category>
		<category><![CDATA[maps]]></category>
		<category><![CDATA[nesting]]></category>
		<category><![CDATA[rollup]]></category>
		<category><![CDATA[trees]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=502</guid>
		<description><![CDATA[Previous: array functions in javascript and protovis Reshaping complex arrays This really is what protovis data processing is all about. In today&#8217;s tutorial, I am going to refer extensively to protovis&#8217;s Becker&#8217;s Barley example. One reason for that is that it&#8217;s also used in the API documentation of the methods we are going to cover, <a class="read-more" href="/2011/02/11/working-with-data-in-protovis-part-4-of-5/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p><a href="http://jckr.github.io/blog/?p=494">Previous: array functions in javascript and protovis</a></p>
<h2>Reshaping complex arrays</h2>
<p>This really is what protovis data processing is all about.<br />
In today&#8217;s tutorial, I am going to refer extensively to protovis&#8217;s <a href="http://vis.stanford.edu/protovis/ex/barley.html">Becker&#8217;s Barley</a> example. One reason for that is that it&#8217;s also used in the <a href="http://vis.stanford.edu/protovis/jsdoc/symbols/pv.Nest.html">API documentation of the methods</a> we are going to cover, and also because I am posting <a href="http://jckr.github.io/blog/?p=534">a line-by-line explanation of this example</a> that you can refer to.</p>
<p>So far we’ve seen that :</p>
<ul>
<li>Associative arrays are great as data elements, as their various values can be used for various attributes.<br />
For instance, if the current data element is an associative array of this shape: </p>
<pre class="brush: jscript; title: ; notranslate">{ yield: 27.00000, variety: &quot;Manchuria&quot;, year: 1931, site: &quot;University Farm&quot; }</pre>
<p>one could imagine a bar chart where the length of the  bar would come from the yield, their fillStyle color from the variety, the label from the site, etc.</li>
<li>arrays of associative arrays are very practical to manipulate thanks to accessor functions.<br />
An array of the shape:</p>
<pre class="brush: jscript; title: ; notranslate">var barley = [
  { yield: 27.00000, variety: &quot;Manchuria&quot;, year: 1931, site: &quot;University Farm&quot; },
  { yield: 48.86667, variety: &quot;Manchuria&quot;, year: 1931, site: &quot;Waseca&quot; },
  { yield: 27.43334, variety: &quot;Manchuria&quot;, year: 1931, site: &quot;Morris&quot; },
  { yield: 39.93333, variety: &quot;Manchuria&quot;, year: 1931, site: &quot;Crookston&quot; },
  { yield: 32.96667, variety: &quot;Manchuria&quot;, year: 1931, site: &quot;Grand Rapids&quot; },
  { yield: 28.96667, variety: &quot;Manchuria&quot;, year: 1931, site: &quot;Duluth&quot; },
  { yield: 43.06666, variety: &quot;Glabron&quot;, year: 1931, site: &quot;University Farm&quot; },
  { yield: 55.20000, variety: &quot;Glabron&quot;, year: 1931, site: &quot;Waseca&quot; },
  { yield: 28.76667, variety: &quot;Glabron&quot;, year: 1931, site: &quot;Morris&quot; },
  { yield: 38.13333, variety: &quot;Glabron&quot;, year: 1931, site: &quot;Crookston&quot; },
  { yield: 29.13333, variety: &quot;Glabron&quot;, year: 1931, site: &quot;Grand Rapids&quot; },
  { yield: 29.66667, variety: &quot;Glabron&quot;, year: 1931, site: &quot;Duluth&quot; },
  { yield: 35.13333, variety: &quot;Svansota&quot;, year: 1931, site: &quot;University Farm&quot; },
…
  { yield: 29.33333, variety: &quot;Wisconsin No. 38&quot;, year: 1932, site: &quot;Duluth&quot; }
]</pre>
<p>could be easily sorted according to any of the keys – yield, variety, year, site, etc.</li>
<li>it is easy to access the data of an element’s parent, and in some cases it can greatly simplify the code.</li>
</ul>
<h3>Nesting</h3>
<p>For this last reason, you may want to turn one flat array of associative arrays into an array of arrays of associative arrays. This process is called <strong>nesting</strong>.</p>
<p><a href="http://jckr.github.io/blog/wp-content/uploads/2011/02/nesting.png"><img src="http://jckr.github.io/blog/wp-content/uploads/2011/02/nesting.png" alt="" title="nesting" width="700" height="250" class="aligncenter size-full wp-image-528" /></a></p>
<h4>Simple nesting</h4>
<p>If you turn a <strong>single array</strong> like the one on the left-hand side to <strong>an array of arrays</strong> like on the right-hand side, you could easily do 3 smaller charts, one next to the other, by creating them inside of panels. You could have some information at this panel level (for instance the variety) and the rest at a lower level. </p>
<p>Fortunately, there are protovis methods that can turn your flat list into a more complex array of arrays. And since protovis methods are meant to be chained, you can even go on and create arrays of arrays of arrays of arrays if needs be.<br />
Even better – combined with the other data processing functions, you don’t only change the structure of your array, but you can also filter and control the order of the elements to show everything that you want and only what you want.</p>
<p>And how complicated can this be?<br />
To do the above, all you have to type is </p>
<pre class="brush: jscript; title: ; notranslate">barley=pv.nest(barley).key(function(d) d.variety).entries();</pre>
<p>What this does is that it nests your <em>barley</em> array, according to the <em>variety</em> key. entries() at the end is required to obtain the array of arrays needed.</p>
<p>Here is an example of what can be done with both kinds of data structures in just a few lines of code (which won&#8217;t include the data proper. The long, flat array is stored in the variable barley, as above).<br />
Without nesting:<br />
<a href="http://jckr.github.io/blog/wp-content/uploads/2011/02/BarleyWithoutNesting.png"><img src="http://jckr.github.io/blog/wp-content/uploads/2011/02/BarleyWithoutNesting.png" alt="" title="BarleyWithoutNesting" width="606" height="198" class="aligncenter size-full wp-image-594" /></a></p>
<pre class="brush: jscript; title: ; notranslate">var vis = new pv.Panel()
    .width(600)
    .height(200)
;
vis.add(pv.Bar)
	.data(barley)
	.left(function() this.index*5)
	.width(4)
	.bottom(0)
	.height(function(d) d.yield*2)
	.fillStyle(function(d) d.year==1931?&quot;steelBlue&quot;:&quot;Orange&quot;)
;
vis.render();</pre>
<p>As the pv.Bar goes through the array, there is not much it can do to structure it. We can just size the bars according to the value of yield, and color them according to another key (here the year).</p>
<p>Now using nesting:<br />
<a href="http://jckr.github.io/blog/wp-content/uploads/2011/02/BarleyWithNesting2.png"><img src="http://jckr.github.io/blog/wp-content/uploads/2011/02/BarleyWithNesting2.png" alt="" title="BarleyWithNesting2" width="711" height="160" class="aligncenter size-full wp-image-598" /></a></p>
<pre class="brush: jscript; highlight: [1,8,15]; title: ; notranslate">barley2=pv.nest(barley).key(function(d) d.variety).entries();
barley2=pv.nest(barley).key(function(d) d.variety).entries();
var vis = new pv.Panel()
    .width(710)
    .height(150)
;
var cell=vis.add(pv.Panel)
	.data(barley2)
	.left(function() this.index*70)
	.width(70)
	.top(0)
	.height(150);
cell.anchor(&quot;top&quot;).add(pv.Label).textAlign(&quot;center&quot;).font(&quot;9px sans-serif&quot;).text(function(d) d.key)
cell.add(pv.Bar)
		.data(function(d) d.values)
		.left(function() 5+this.index%6*10)
		.width(8)
		.bottom(0)
		.height(function(d) d.yield*2)
		.fillStyle(function(d) d.year==1931?&quot;steelBlue&quot;:&quot;Orange&quot;)
		.add(pv.Label).text(function(d) d.site).textAngle(-Math.PI/2)
			.textAlign(&quot;left&quot;).left(function() 15+this.index%6*10).textStyle(&quot;#222&quot;)
	;
vis.render();
</pre>
<p>Here we used the same simple nesting command as above (the original example uses a more complicated one which allows for more refinement in the display). This structure allows us to create first panels, which we can style by displaying the name of the sites for instance, then, within these panels, the corresponding bars.</p>
<p>Doing this with the data in its original form would have been possible, but would have required writing a much longer program. So the whole idea of nesting is to <strong>take some time to plan the data structure once, so that the code is as short and useful as possible</strong>.</p>
<h4>Going further with nesting</h4>
<p>However, it is possible to go beyond that: </p>
<ul>
<li>by nesting further, which can be done by adding other .key() methods:</p>
<pre class="brush: jscript; title: ; notranslate">barley=pv.nest(barley)
  .key(function(d) d.variety)
  .key(function(d) d.year)
  .entries();</pre>
</li>
</ul>
<p>And/or</p>
<ul>
<li>by sorting keys or values using the sortKeys() and sortValues() methods, respectively. </p>
<p>For instance, we can change the order in which the variety blocks are displayed with sortKeys():</p>
<table>
<tr>
<td>
<pre class="brush: jscript; title: ; notranslate">barley=pv.nest(barley)
  .key(function(d) d.variety)
  .entries();</pre>
</td>
<td>
<pre class="brush: jscript; highlight: [3]; title: ; notranslate">barley=pv.nest(barley)
  .key(function(d) d.variety)
  .sortKeys()
  .entries();</pre>
</td>
</tr>
<tr>
<td><a href="http://jckr.github.io/blog/wp-content/uploads/2011/02/sort-unsorted.png"><img src="http://jckr.github.io/blog/wp-content/uploads/2011/02/sort-unsorted.png" alt="" title="sort-unsorted" width="300" height="250" class="aligncenter size-full wp-image-524" /></a></td>
<td><a href="http://jckr.github.io/blog/wp-content/uploads/2011/02/sort-sorted.png"><img src="http://jckr.github.io/blog/wp-content/uploads/2011/02/sort-sorted.png" alt="" title="sort-sorted" width="300" height="250" class="aligncenter size-full wp-image-525" /></a></td>
</tr>
</table>
</li>
</ul>
<p>By using sortKeys without argument, the natural order is used (alphabetical, since our key is a string). But we could provide a comparison function if we wanted a more sophisticated arrangement.</p>
<h4>Nesting and hierarchy</h4>
<p>If you run the double nesting command we discussed above, </p>
<pre class="brush: jscript; title: ; notranslate">barley=pv.nest(barley)
  .key(function(d) d.variety)
  .key(function(d) d.year)
  .entries();</pre>
<p>you&#8217;ll get as a result something of the form: </p>
<pre class="brush: jscript; title: ; notranslate">var barley=[
  {key:&quot;Manchuria&quot;, values: [
    {key:&quot;1931&quot;, values: [
      {site:&quot;University farm&quot;, variety: &quot;Manchuria&quot;, year: 1931, yield: 27},
      {site:&quot;Waseca&quot;, variety: &quot;Manchuria&quot;, year: 1931, yield: 48.86667},
      {site:&quot;Morris&quot;, variety: &quot;Manchuria&quot;, year: 1931, yield: 27.43334},
      {site:&quot;Crookston&quot;, variety: &quot;Manchuria&quot;, year: 1931, yield: 39.93333},
      {site:&quot;Grand Rapids&quot;, variety: &quot;Manchuria&quot;, year: 1931, yield: 32.96667},
      {site:&quot;Duluth&quot;, variety: &quot;Manchuria&quot;, year: 1931, yield: 28.96667}
    ]},
    {key:&quot;1932&quot;, values: [  
      {site:&quot;University farm&quot;, variety: &quot;Manchuria&quot;, year: 1932, yield: 26.9},
      {site:&quot;Waseca&quot;, variety: &quot;Manchuria&quot;, year: 1932, yield: 33.46667},
      {site:&quot;Morris&quot;, variety: &quot;Manchuria&quot;, year: 1932, yield: 34.36666},
      {site:&quot;Crookston&quot;, variety: &quot;Manchuria&quot;, year: 1932, yield: 32.96667},
      {site:&quot;Grand Rapids&quot;, variety: &quot;Manchuria&quot;, year: 1932, yield: 22.13333},
      {site:&quot;Duluth&quot;, variety: &quot;Manchuria&quot;, year: 1932, yield: 22.56667}
    ]}
  ]},
  {key: &quot;Glabron&quot;, ...
]
</pre>
<p>and so on and so forth for all the varieties of barley. Now how can we use this structure in a protovis script? why not use multi-dimensional arrays instead, and if so, how would the code change?</p>
<p>Well. You&#8217;d start using this structure by creating a first panel and and passing it the nested structure as data.<br />
Assuming your root panel is called vis, you&#8217;d start likewise:</p>
<pre class="brush: jscript; highlight: [2]; title: ; notranslate">
vis.add(pv.Panel)
    .data(barley)</pre>
<p>now, since barley has been nested first by variety, it is now an array of 10 elements. You are going to create 10 individual panels. At some point you should worry about dimensioning and positioning them. But here we are only focusing on passing data to subsequent elements.</p>
<p>Next, you are going to create another set of panels (or any mark, really, this doesn&#8217;t change anything for the data)</p>
<pre class="brush: jscript; first-line: 3; highlight: [4]; title: ; notranslate">.add(pv.Panel)
    .data(function(d) d.values)</pre>
<p>This is how you drill down to the next level of data, by using an accessor function with the key &#8220;values&#8221;.<br />
Congratulations! you have created 2 panels in each of our 10 individual panels, one per year. </p>
<p>Finally, you are going to create a final mark (let&#8217;s say, a pv.Bar)</p>
<pre class="brush: jscript; first-line: 5; highlight: [6]; title: ; notranslate">.add(pv.Bar)
    .data(function(d) d.values)</pre>
<p>Again, you use an accessor function of the same form. This will create a bar chart with 6 bars.<br />
The data element corresponding to each bar is of the form:
<pre class="brush: jscript; light: true; title: ; notranslate">{site:&quot;University farm&quot;, variety: &quot;Manchuria&quot;, year: 1932, yield: 26.9}</pre>
<p>So, when you style the chart, you can access these properties with accessor functions, and write for instance:</p>
<pre class="brush: jscript; first-line: 7; title: ; notranslate">    .height(function(d) d.yield)
    .add(pv.Label).text(function(d) d.variety)</pre>
<p>etc.</p>
<p>To sum it up: you can create a hierarchical structure in protovis that corresponds to the shape of your nested array by adding elements and passing data using an accessor function with the key &#8220;values&#8221;.<br />
At the lowest level of your structure you can access all the properties of the original array using accessor functions.</p>
<p>Now, what if instead we used a multi-dimensional, normal array without keys and values? don&#8217;t they have structure and hierarchy, too?<br />
This is not only possible, but also advised when your dataset is getting really big, as you would plague your users with annoying loading times. This changes the structure of the code though. </p>
<p>An equivalent multi-dimensional array would be something like: </p>
<pre class="brush: jscript; title: ; notranslate">
var yields =
[ // this is the level of the variety
  [ // this is the level of the year
    [ 27, 48.86667, 27.43334, 39.93333, 32.96667, 28.96667], 
    [ 26.9, 33.46667, 34.36666, 32.96667, 22.13333, 22.56667]
  ],
  [ 
    [ 43.06666, 55.2, 28.76667, 38.13333, 29.13333, 29.66667],
    [ 36.8, 37.73333, 35.13333, 26.16667, 14.43333, 25.86667]
  ],
  [
    [ 35.13333, 47.33333, 25.76667, 40.46667, 29.66667, 25.7],
    [ 27.43334, 38.5, 35.03333, 20.63333, 16.63333, 22.23333]
  ],
  [
    [ 39.9, 50.23333, 26.13333, 41.33333, 23.03333, 26.3],
    [ 26.8, 37.4, 38.83333, 32.06666, 32.23333, 22.46667]
  ],
  [
    [ 36.56666, 63.8333, 43.76667, 46.93333, 29.76667, 33.93333],
    [ 29.06667, 49.2333, 46.63333, 41.83333, 20.63333, 30.6]
  ],
  [
    [ 43.26667, 58.1, 28.7, 45.66667, 32.16667, 33.6],
    [ 26.43334, 42.2, 43.53334, 34.33333, 19.46667, 22.7]
  ],
  [
    [ 36.6, 65.7667, 30.36667, 48.56666, 24.93334, 28.1],
    [ 25.56667, 44.7, 47, 30.53333, 19.9, 22.5]
  ],
  [
    [ 32.76667, 48.56666, 29.86667, 41.6, 34.7, 32],
    [ 28.06667, 36.03333, 43.2, 25.23333, 26.76667, 31.36667]
  ],
  [
    [ 24.66667, 46.76667, 22.6, 44.1, 19.7, 33.06666],
    [ 30, 41.26667, 44.23333, 32.13333, 15.23333, 27.36667]
  ],
  [
    [ 39.3, 58.8, 29.46667, 49.86667, 34.46667, 31.6],
    [ 38, 58.16667, 47.16667, 35.9, 20.66667, 29.33333]
  ]
]</pre>
<p>and that&#8217;s the whole lot. It is indeed shorter. now this array is only the yields, you may want to create an array of the possible values of varieties, sites and years for good measure.</p>
<pre class="brush: jscript; title: ; notranslate">var varieties=[&quot;Manchuria&quot;, &quot;Glabron&quot;, &quot;Svansota&quot;, &quot;Velvet&quot;, &quot;Trebi&quot;,
     &quot;No. 457&quot;, &quot;No. 462&quot;, &quot;Peatland&quot;, &quot;No. 475&quot;, &quot;Wisconsin No. 38&quot;], 
    sites=[&quot;University Farm&quot;, &quot;Waseca&quot;, &quot;Morris&quot;, &quot;Crookston&quot;, &quot;Grand Rapids&quot;, &quot;Duluth&quot;],
    years=[1931,1932];</pre>
<p>And by the way, it is very possible to create these arrays out of the original array using the map() method or equivalent.</p>
<p>how can we create an equivalent structure?<br />
we start like the above:</p>
<pre class="brush: jscript; title: ; notranslate">vis.add(pv.Panel)
     .data(yields)</pre>
<p>Likewise, our 3-dimensional array is really an array of 10 arrays of 2 arrays of 6 elements. So we are also creating 10 panels. Let&#8217;s continue and create panels for the years:</p>
<pre class="brush: jscript; first-line: 3; highlight: [4]; title: ; notranslate">.add(pv.Panel)
    .data(function(d) d)</pre>
<p>To drill down one level in an array, you have to use this form. you say that you are giving the children of your object what&#8217;s inside the data property of their parent. </p>
<p>So naturally, you follow by</p>
<pre class="brush: jscript; first-line: 5; highlight: [6]; title: ; notranslate">.add(pv.Bar)
    .data(function(d) d)</pre>
<p>now how you style your bars will be slightly different than before. What you passed your first panel was an array of yields. So that&#8217;s what you get now from your data. If you want something else, you&#8217;ll have to get it with this.index for instance.</p>
<pre class="brush: jscript; first-line: 7; title: ; notranslate">    .height(function(d) d) // that's the yield
    .add(pv.Label).text(function() varieties[this.index])</pre>
<p>All in all it&#8217;s trickier to work with arrays. The code is less explicit, and if you change one array even by accident, you&#8217;ll have to check that others are still synchronized. But it could make your vis much faster.</p>
<h3>Aggregating</h3>
<p>Sometimes, what you want out of an array is not a more complex array, but a simpler list of numbers. For instance, what if you could obtain the sum of all the values in the array for such or such property? This is also possible in protovis, and in fact, it looks a lot like what we&#8217;ve done. The difference is that instead of using the method entries(), we will use the method rollup().</p>
<p>Let&#8217;s suppose we have a flat array that looks like this: these are scores of students on 3 exams. </p>
<pre class="brush: jscript; light: true; title: ; notranslate">var scores=[
{student:&quot;Adam&quot;, exam:1, score: 77},
{student:&quot;Adam&quot;, exam:2, score: 34},
{student:&quot;Adam&quot;, exam:3, score: 85},
{student:&quot;Barbara&quot;, exam:1, score: 92},
{student:&quot;Barbara&quot;, exam:2, score: 68},
{student:&quot;Barbara&quot;, exam:3, score: 97},
{student:&quot;Connor&quot;, exam:1, score: 84},
{student:&quot;Connor&quot;, exam:2, score: 54},
{student:&quot;Connor&quot;, exam:3, score: 37},
{student:&quot;Daniela&quot;, exam:1, score: 61},
{student:&quot;Daniela&quot;, exam:2, score: 58},
{student:&quot;Daniela&quot;, exam:3, score: 64}
]</pre>
<p>Now, we would like to get, in one simple object, the average for each student.<br />
We know we could reshape the array if we wanted by using pv.Nest and entries(): </p>
<pre class="brush: jscript; title: ; notranslate">pv.nest(scores).key(function(d) d.student).entries()</pre>
<p>This would be something of the shape: </p>
<pre class="brush: jscript; light: true; title: ; notranslate">
[{key:&quot;Adam&quot;, values:[
    {exam:1, score: 77, student: &quot;Adam&quot;},
    {exam:2, score: 34, student: &quot;Adam&quot;},
    {exam:3, score: 85, student: &quot;Adam&quot;}
    ]
  },
  {key:&quot;Barbara&quot;, values:[
    {exam:1, score: 92, student: &quot;Barbara&quot;},
    {exam:2, score: 68, student: &quot;Barbara&quot;},
    {exam:3, score: 97, student: &quot;Barbara&quot;}
   ]
  },
etc.
</pre>
<p>Useful, for instance, if we&#8217;d want to chart the progress of each student separately. </p>
<p>Now if instead of using entries() at the end, we use rollup(), we could get this: </p>
<pre class="brush: jscript; light: true; title: ; notranslate">{
Adam: 65.33333333333333
Barbara: 85.66666666666667
Connor: 58.333333333333336
Daniela: 61}
</pre>
<p>The exact statement is </p>
<pre class="brush: jscript; title: ; notranslate">pv.nest(scores)
  .key(function(d) d.student)
  .rollup(function(data) pv.mean(data, function(d) d.score))</pre>
<p>To understand how this works, it helps to visualize what the pv.nest would have returned if we had asked for entries.<br />
What rollup does is that it would go through each of the values that correspond to the keys, and return one aggregate value, depending on the function. </p>
<p>For the first student, &#8220;Adam&#8221;, the corresponding values array is like this: </p>
<pre class="brush: jscript; light: true; title: ; notranslate">[
    {exam:1, score: 77, student: &quot;Adam&quot;},
    {exam:2, score: 34, student: &quot;Adam&quot;},
    {exam:3, score: 85, student: &quot;Adam&quot;}
    ]</pre>
<p>so rollup will just look at each element of this array and apply the function.<br />
This is what (data) in &#8220;function(data)&#8221; corresponds to.<br />
Next, we tell protovis what to do with these elements. Here, we are interested in the average, so we take pv.mean (not pv.average, <a href="http://jckr.github.io/blog/?p=494">remember</a>?)<br />
However, we can&#8217;t directly compute the average of an array of associative arrays &#8211; we must tell protovis exactly what to average. This is why we use an accessor function, function(d) d.score.</p>
<p>Of course, pv.mean used in this example can be replaced by just about any function.</p>
<p>In the name of clarity, especially if there is only one property that can be aggregated, you can declare a function outside of the rollup() method. This is useful if you are going to aggregate your array by different dimensions:</p>
<pre class="brush: jscript; title: ; notranslate">function meanScore(data) pv.mean(data, function(d) d.score);
var avgStudent=pv.nest(scores)
  .key(function(d) d.student)
  .rollup(meanScore);
var avgExam=pv.nest(scores)
  .key(function(d) d.exam)
  .rollup(meanScore);</pre>
<h3>Flattening</h3>
<p>Protovis also provides methods that turn a &#8220;nested&#8221; array back into a flat array. And methods that turn a normal array into a tree.<br />
The main advantage of having a flat array is that you can nest it in a different way. This is useful, for instance, if you got your data in a nested form that doesn&#8217;t work for you. Likewise, a tree is easier to reshape in protovis than an array.</p>
<p>To create a flat array out of a nested one, you have to use pv.flatten and specify all the keys of the array and conclude by array().</p>
<pre class="brush: jscript; light: true; title: ; notranslate">barley=pv.flatten(barley).key(&quot;variety&quot;).key(&quot;site&quot;).key(&quot;year&quot;).key(&quot;yield&quot;).array()</pre>
<p>It&#8217;s important to note that you need to specify all the keys, not just the keys that correspond to actual nesting. So again, if you start from a flat array, and you do</p>
<pre class="brush: jscript; light: true; title: ; notranslate">barley=pv.nest(barley).key(&quot;variety&quot;).entries()</pre>
<p>to reverse this, you&#8217;ll have to enter the full formula, using key four times:</p>
<pre class="brush: jscript; light: true; title: ; notranslate">barley=pv.flatten(barley).key(&quot;variety&quot;).key(&quot;site&quot;).key(&quot;year&quot;).key(&quot;yield&quot;).array()</pre>
<p>Finally, pv.tree &#8211; well, I haven&#8217;t seen this method used outside the <a href="http://vis.stanford.edu/protovis/jsdoc/symbols/pv.Tree.html">documentation</a>. It&#8217;s not used in any live example, not covered by any question in the forum, and I haven&#8217;t found any trace of it in the internet. So I&#8217;d rather leave you with the explanation in the documentation which is fairly clear than come up with my own. If you find yourself in a situation like in the documentation, where you have a flat array of associative arrays, which have a property that could be interpreted as a hierarchy, then you could use this method to turn your array in something more useful to protovis.</p>
<h3>Putting it all together</h3>
<p>Instead of coming up with a specific new example for this section I refer you to my explanation of the <a href="http://jckr.github.io/blog/?p=534">Becker&#8217;s Barley example</a>.<br />
On the same subject, see a comparison of how to <a href="http://jckr.github.io/blog/?p=550">re-create Becker&#8217;s Barley with protovis and Tableau</a></p>
<p>next: <a href="http://jckr.github.io/blog/?p=623">working with layouts</a></p>
]]></content:encoded>
			<wfw:commentRss>/2011/02/11/working-with-data-in-protovis-part-4-of-5/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Working with data in protovis – part 2 of 5</title>
		<link>/2011/02/08/working-with-data-in-protovis-part-2-of-5/</link>
		<comments>/2011/02/08/working-with-data-in-protovis-part-2-of-5/#comments</comments>
		<pubDate>Tue, 08 Feb 2011 17:51:01 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[charts]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[protovis]]></category>
		<category><![CDATA[tips]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[hierarchy]]></category>
		<category><![CDATA[inheritance]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=479</guid>
		<description><![CDATA[Previous post: simple arrays Multi-dimensional arrays, associative arrays and protovis Even for a simple chart, chances are that you’ll have more than a single series of numbers to represent. For instance, you could have labels to describe what they mean, several series, and so on and so forth. So, let’s say we want to add <a class="read-more" href="/2011/02/08/working-with-data-in-protovis-part-2-of-5/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>Previous post: <a href="http://jckr.github.io/blog/?p=429">simple arrays</a></p>
<h2>Multi-dimensional arrays, associative arrays and protovis</h2>
<p>Even for a simple chart, chances are that you’ll have more than a single series of numbers to represent. For instance, you could have labels to describe what they mean, several series, and so on and so forth.<br />
So, let’s say we want to add these labels to our original examples, so we know what those bars represent.</p>
<table>
<tbody>
<tr>
<td>
<pre class="brush: jscript; title: ; notranslate">var categories = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;];
var vis = new pv.Panel()
  .width(150)
  .height(150);

vis.add(pv.Bar)
  .data([1, 1.2, 1.7, 1.5, .7, .3])
  .width(20)
  .height(function(d) d * 80)
  .bottom(0)
  .left(function() this.index * 25)
  .anchor(&quot;bottom&quot;).add(pv.Label)
    .text(function() categories[this.index]);

vis.render();
</pre>
</td>
<td><a href="http://jckr.github.io/blog/wp-content/uploads/2011/02/categories.png"><img src="http://jckr.github.io/blog/wp-content/uploads/2011/02/categories.png" alt="" title="categories" width="144" height="135" class="aligncenter size-full wp-image-483" /></a></td>
</tr>
</tbody>
</table>
<p>While this did the trick, nothing guarantees that the data proper and the category name will stay coordinated. If one data point is deleted or removed and this is not replicated on the categories, they will no longer match. A more integrated way to proceed would be to group category and data information, like this:</p>
<pre class="brush: jscript; highlight: [16,20]; title: ; notranslate">var data = [
  {key:&quot;a&quot;, value:1},
  {key:&quot;b&quot;, value:1.2},
  {key:&quot;c&quot;, value:1.7}, 
  {key:&quot;d&quot;, value:1.5},
  {key:&quot;e&quot;, value:.7},
  {key:&quot;f&quot;, value:.3}
];
var vis = new pv.Panel()
  .width(150)
  .height(150);

vis.add(pv.Bar)
  .data(data)
  .width(20)
  .height(function(d) d.value * 80)
  .bottom(0)
  .left(function() this.index * 25)
  .anchor(&quot;bottom&quot;).add(pv.Label)
    .text(function(d) d.key);

vis.render();</pre>
<p>This time, we group the values and the category names in a single variable, an array of associative arrays.<br />
When drawing the bar chart, protovis will go through this array and retrieve an associative array for each bar.<br />
We have to change the way the height function is written. The data element being accessed is no longer of the form 1 or 1.7, but {key:”a”, value:1} or {key:”c”, value:1.7}. So to get the number part of it, we must write <strong>d.value</strong>.</p>
<p>Likewise, instead of accessing an array of categories for the text part, we can use the current data element via an accessor function, and write <strong>d.key</strong>.</p>
<h2>Hierarchy and inheritance</h2>
<p>So we’ve seen that arrays, or associative arrays, can have several levels and can be nested one into another.<br />
Interestingly, protovis elements, like panels, charts, mark etc. also work in a <em>hierarchy</em>. For instance, when you start working with protovis you create a panel object. Then, you add other objects to that panel, like a bar chart (our example), or another panel. You can add other objects to your new objects, or attach them to your first panel.<br />
This diagram shows the hierarchy between elements in the previous example.</p>
<table>
<tr>
<td>
<pre class="brush: jscript; title: ; notranslate">var categories = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;];
var vis = new pv.Panel()
  .width(150)
  .height(150)

var bar = vis.add(pv.Bar)
  .data([1, 1.2, 1.7, 1.5, .7, .3])
  .width(20)
  .height(function(d) d * 80)
  .bottom(0)
  .left(function() this.index * 25)
  .anchor(&quot;bottom&quot;).add(pv.Label)
  .text(function() categories[this.index]);

vis.render();</pre>
</td>
<td><a href="http://jckr.github.io/blog/wp-content/uploads/2011/02/hierarchy.png"><img src="http://jckr.github.io/blog/wp-content/uploads/2011/02/hierarchy.png" alt="" title="hierarchy" width="220" height="170" class="aligncenter size-full wp-image-485" /></a></td>
</tr>
</table>
<p>The bar object is considered to be the child of vis, who is its parent.</br><br />
You may know that in protovis, children objects inherit properties of their parents.</br><br />
For instance, if width wasn’t specified for the bar object, it would have the width of its parent, 150. Each mark would cover the whole screen.</p>
<p>For data, when a new object is added, data is either specified at that level, or obtained from the parent element of this object.</p>
<p>Let’s take our example and tweak it a bit.<br />
<table>
<tr>
<td>
<pre class="brush: jscript; highlight: [5]; title: ; notranslate">var vis = new pv.Panel().width(150).height(150);
var bar = vis.add(pv.Bar)
  .data([1, 1.2, 1.7, 1.5, .7, .3]).width(20) .bottom(0)
  .height(function(d) d * 80).left(function() this.index * 25)
  .anchor(&quot;top&quot;).add(pv.Label)
vis.render();</pre>
<td>
<td><a href="http://jckr.github.io/blog/wp-content/uploads/2011/02/part3.png"><img src="http://jckr.github.io/blog/wp-content/uploads/2011/02/part3.png" alt="" title="part3" width="154" height="154" class="aligncenter size-full wp-image-487" /></a></td>
</tr>
</table>
<p>Here, I didn’t specify a data or a text value for the labels I added. They just took the value of its parent element – the marks of the pv.Bar object.<br />
Here’s another variation:</p>
<table>
<tr>
<td>
<pre class="brush: jscript; highlight: [4]; title: ; notranslate">
var vis = new pv.Panel().width(150).height(150);
vis.add(pv.Panel)
  .data([1, 1.2, 1.7, 1.5, .7, .3]) .left(function() this.index * 25)
  .add(pv.Bar).width(20) .bottom(0)
  .height(function(d) d * 80)
  .anchor(&quot;top&quot;).add(pv.Label)
vis.render();</pre>
</td>
<td><a href="http://jckr.github.io/blog/wp-content/uploads/2011/02/part4.png"><img src="http://jckr.github.io/blog/wp-content/uploads/2011/02/part4.png" alt="" title="part4" width="154" height="154" class="aligncenter size-full wp-image-488" /></a></td>
</tr>
</table>
<p>Here, I’m adding panels, then a bar in each panel.<br />
From the root panel, I’m adding a group of panel with this data: [1, 1.2, 1.7, 1.5, .7, .3].<br />
Since there are 6 elements here, I’m adding 6 panels.<br />
Here, the left method applies to each of the panel. The first one is to the left, the next one is 25 pixels further, etc.<br />
I’m then adding a bar object to each panel. Is that one group of bar? Technically yes, but each has only one element! Each pv.Bar <em>implicitly</em> gets the data element of its parent, so the first bar gets [1], the next one gets [1.2], etc. The height of each bar is determined by multiplying the value of that element by 80.<br />
Note that since the fillStyle properties are not defined for the bars, they get the ones which are attributed by default, which explains the color changes.</p>
<p>Further refinement: accessing the data of its parent!</p>
<table>
<tr>
<td>
<pre class="brush: jscript; highlight: [5]; title: ; notranslate">
var vis = new pv.Panel().width(150).height(150);
vis.add(pv.Panel)
  .data([1, 1.2, 1.7, 1.5, .7, .3]) .left(function() this.index * 25)
  .add(pv.Bar).width(20) .bottom(0)
  .height(function(a,b) b * 80)
  .anchor(&quot;top&quot;).add(pv.Label)
vis.render();
</pre>
</td>
<td><a href="http://jckr.github.io/blog/wp-content/uploads/2011/02/part4.png"><img src="http://jckr.github.io/blog/wp-content/uploads/2011/02/part4.png" alt="" title="part4" width="154" height="154" class="aligncenter size-full wp-image-488" /></a></td>
</tr>
</table>
<p>Well, the output is exactly the same, but how I obtained the data is different. Instead of getting the data using the standard accessor function, I passed two arguments: function(a, b).<br />
What this does is that the first argument corresponds to the current data element of this object, and the second, to that of its parent.</p>
<p>In this example, they happen to be the same, but this is how you can access the data of the parent objects.</p>
<h2>Putting it all together</h2>
<p>Let&#8217;s see how we can use protovis and the properties of hierarchy! This example is less trivial than the ones we&#8217;ve seen so far but with what we&#8217;ve seen it is quite accessible.<br />
The challenge: re-create <a href="http://eagereyes.org/communication/Engaging-readers-with-square-pie-waffle-charts.html">square pie charts</a>.<br />
How it&#8217;s done: </p>
<pre class="brush: jscript; title: ; notranslate">var data=[36,78,63,24],  // arbitrary numbers
cellSize = 16,
cellPadding = 1,
squarePadding=5,
colors=pv.Colors.category20().range()
;

var vis=new pv.Panel()
    .width(4*(10*cellSize+squarePadding))
    .height(10*cellSize)
    ;

var square = vis.add(pv.Panel)
    .data(data)
    .width(10*cellSize)
    .height(10*cellSize)
    .left(function() this.index*(cellSize*10+squarePadding))
    ;

var row = square.add(pv.Panel)
	.data([0,1,2,3,4,5,6,7,8,9])
	.height(cellSize)
	.bottom(function(d) d*cellSize)
	;

var cell = row.add(pv.Panel)
    .data([0,1,2,3,4,5,6,7,8,9])
    .height(cellSize-2*cellPadding)
    .width(cellSize-2*cellPadding)
    .top(cellPadding)
    .left(function(d) d*cellSize+cellPadding)
    .fillStyle(function(a,b,c) (b*10+a)&lt;c?colors[this.parent.parent.index].color:&quot;lightGrey&quot;)
;

square.anchor(&quot;center&quot;)
  .add(pv.Label)
    .text(function(d) d)
    .textStyle(&quot;rgba(0,0,0,.1)&quot;)
    .font(&quot;100px sans-serif&quot;);

vis.render();</pre>
<p>First, we initiate the data (4 arbitrary numbers from 1 to 100), and various parameters which will help size the square pie &#8211; size of the cells, space between them, space between the square pie charts. We also initiate a color palette.<br />
Then, we are going to create 4 panels or groups of panels, each a child of the previous one.<br />
First comes the <strong>vis</strong> panel, which groups everything,<br />
Then the <strong>square </strong>panels, which correspond to each square pie. This is to this panel that our data is assigned.<br />
Then come the <strong>row </strong>panels, and, finally, the <strong>cell </strong>panels.<br />
The numbers which we want to represent are assigned to the square panel. So, what data are we passing to the row and the cell panels? The only thing we want is to have 10 rows and 10 cells per row. So, we can use an array with 10 items. We are going to use [0,1,2,3,4,5,6,7,8,9] so the data value of the row and that of the cell will correspond to the coordinate of the row and the cell, respectively. In other words, the 5th row will be assigned the data value of 4, and the 7th cell in that row will get the data value of 6. We could retrieve the same numbers using &#8220;this.index&#8221; but this can lead to obfuscated formulas.</p>
<p>Note that in the next part of the tutorial, we&#8217;ll see that in Protovis, there is a more elegant way to write [0,1,2,3,4,5,6,7,8,9] or similar series of numbers. But, we&#8217;ll leave this more explicit form for now.</p>
<p>Back to our row panel. We position it with bottom(function(d) d*cellSize). Here, again, d represents the rank of the row, so the 1st row will get 0, and its bottom value will be 0, the next row will get 1, and its bottom value will be 1*cellSize or 16, etc. </p>
<p>Likewise, in the cell panel, the cells are positioned with left(function(d) d*cellSize+cellPadding). This is the same principle. (here, cellPadding is just used to fine-tune the position of the cell).</p>
<p>This is in the final line that we are really going to use hierarchy.</p>
<pre class="brush: jscript; title: ; notranslate">.fillStyle(function(a,b,c) (b*10+a)&lt;c?colors[this.parent.parent.index].color:&quot;lightGrey&quot;)</pre>
<p>here, a represents the data value of the cell &#8211; in other words, the column number.<br />
b, the data value of the cell&#8217;s parent, the row. This is the row number.<br />
and c is the data value of the parent of the parent of the row, the square &#8211; this is the number that we are trying to represent.</p>
<p>so, what we are going to determine is whether b*10+a&lt;c. If that&#8217;s the case, we color the cell, else, we leave it in pale grey. To get the color we need, we go back to the palette that we defined at the beginning, and take the color corresponding to the square number (0 to 3 from left to right).<br />
The square number can be obtained by this.parent.parent.index.</p>
<p>Finally, we add the numbers in large transparent gray digits on top of the squares.</p>
<p>Here is the result:<br />
<a href="http://jckr.github.io/blog/wp-content/uploads/2011/02/squarePies.png"><img src="http://jckr.github.io/blog/wp-content/uploads/2011/02/squarePies.png" alt="" title="squarePies" width="660" height="160" class="aligncenter size-full wp-image-559" /></a></p>
<p>Next: <a href="http://jckr.github.io/blog/?p=49">Javascript and protovis array functions</a></p>
]]></content:encoded>
			<wfw:commentRss>/2011/02/08/working-with-data-in-protovis-part-2-of-5/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
	</channel>
</rss>
