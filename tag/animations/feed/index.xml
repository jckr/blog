<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>animations &#8211; jckr.github.io/blog</title>
	<atom:link href="http://localhost/tag/animations/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Just another WordPress site</description>
	<lastBuildDate>Wed, 17 Aug 2016 05:36:39 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.10</generator>
	<item>
		<title>animations and transitions</title>
		<link>/2012/07/16/animations-and-transitions/</link>
		<comments>/2012/07/16/animations-and-transitions/#comments</comments>
		<pubDate>Mon, 16 Jul 2012 09:44:09 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[d3]]></category>
		<category><![CDATA[tips]]></category>
		<category><![CDATA[animations]]></category>
		<category><![CDATA[transitions]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1351</guid>
		<description><![CDATA[That post originally appeared on visual.ly, I&#8217;m reproducing it here for clarity and ease of retrieval In interactive visualisation, there is the word reactive. Well, maybe not literally, but close enough. The fact is that reactivity, or the propension of a visualisation to respond to user actions, can really help engage the user in a <a class="read-more" href="/blog/2012/07/16/animations-and-transitions/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p><strong>That post originally appeared on <a href="blog.visual.ly/creating-animations-and-transitions-with-d3-js/">visual.ly</a>, I&#8217;m reproducing it here for clarity and ease of retrieval</strong></p>
<p>In interactive visualisation, there is the word reactive. Well, maybe not literally, but close enough.<br />
The fact is that reactivity, or the propension of a visualisation to respond to user actions, can really help engage the user in a visualisation, and help them understand its results. Both of which are usually good things. And how can this reactivity be achieved? Through animations. </p>
<p>So I&#8217;ll go ahead and state that <strong>animation, if done right, can make any interactive data visualization better.</strong>.<br />
How is that?</p>
<ul>
<li>When coupled with interaction, it&#8217;s a very useful way to give feedback to the user. What has changed since their last command? If what&#8217;s on screen animates from one state to another, it&#8217;s obvious, it stands out and it makes sense. Or, when showing any form of real-time data, animation is pretty much required.</li>
<li>Animation can bring focus on the important things as a chart loads. Our vision is very sensitive to movement, so using these <em>introduction transitions</em> sensibly helps a lot to ease the effort required to get the right information off a chart.<br />
Compare these two charts:<br />
<iframe src="https://jckr.github.io/blog/stuff/transitions.html#15" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
<iframe src="https://jckr.github.io/blog/stuff/transitions.html#16" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
Which is better at getting the viewer&#8217;s attention on the last bar?<br />
<em>[side note on examples: they all use the same model. Click on the button to start an animation. If there is nothing on the chart, clicking the button will make something appear.]</em>
</li>
<li>animation works well with metaphors, like growing, expanding, moving, dwindling, etc. so it can really enhance the expressiveness of a visualization that tries to convey any of these ideas (those and many others)	</li>
</ul>
<p>That&#8217;s said, animation can definitely ruin your visualization, too. Here are three general problems. </p>
<ul>
<li>Animation is very prominent. That can be good to call attention to a specific, unambiguous part of your chart. But what happens when there is too much animation? without other cues it gets difficult for a viewer to determine where to focus their attention.</li>
<li> Animation across many states (like a video of animated data) make them difficult to compare to one another, as opposed to showing still images of various states side by side. (see <a href="http://www.cc.gatech.edu/~john.stasko/papers/infovis08-anim.pdf" title="Effectiveness of Animation in Trend Visualization"></a> for more on this.</li>
<li>If the animation is not continuous, if the chart is somehow wiped out during it, this caused <a href="http://nivea.psycho.univ-paris5.fr/Mudsplash/Nature_Supp_Inf/Movies/Movie_List.html">change blindness</a> which pretty much negates any benefit you may have hoped to reap from animation.<br />
Look at this example.<br />
<iframe src="https://jckr.github.io/blog/stuff/transitions.html#17" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
When animated, the line goes through a blank state which makes is close to impossible to track changes between the original and final state. The only way to detect change is to focus on one given point and memorize its original position, but this is very ineffective.
</li>
</ul>
<h3>Now how to do it?</h3>
<p>So we&#8217;ve seen how animation is helpful in data visualization. Now, let&#8217;s do it!<br />
For this purpose, let&#8217;s use <a href="http://d3-js.org/">d3</a>. d3 has many, many possibilities when it comes to data animation which are relatively painless to implement.</p>
<h4>The principle</h4>
<p>If you know how to draw in d3, you almost know how to animate. (and if you don&#8217;t know yet, <a href="http://alignedleft.com/tutorials/">Alignedleft</a> has a splendid collection of tutorials to get you started, and the <a href="https://github.com/mbostock/d3/wiki/Tutorials">d3 site</a> lists more including some by <a href="http://jckr.github.io/blog/blog/category/d3/">yours truly</a>.)<br />
Animations are called transitions in d3 for a reason. A technical definition of animation can be that over a certain lapse of time, one or more characteristics of an object would <i>transition</i> from one value to another. </p>
<p>And what do we mean by characteristics? Well, just about anything that can be expressed numerically. </p>
<h4>A few examples of transitions</h4>
<p><iframe src="https://jckr.github.io/blog/stuff/transitions.html#0" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
Unsuprisingly, when you update the position of an item smoothly over time, it moves. In svg, position is determined for most shapes, such as our blue rectangle here, by the x and y attributes, which correspond to the top-left corner of the shape. For circles, you use cx and cy, or the coordinates of the center. For paths, such as our red triangle, you actually specify the position of all of the points in the &#8220;d&#8221; attribute.</p>
<p><iframe src="https://jckr.github.io/blog/stuff/transitions.html#1" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
Likewise, when you change size, your object grows (or shrinks!). You can use width and height for shapes like rectangles, or r for circles. </p>
<p><iframe src="https://jckr.github.io/blog/stuff/transitions.html#2" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
Color is really a numerical attribute too, and it&#8217;s indeed possible (and very useful) to transition from one color to another. In svg, color is a style attribute that is defined by fill or stroke.</p>
<p><iframe src="https://jckr.github.io/blog/stuff/transitions.html#3" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
Not unlike color, it&#8217;s very useful to be able to vary opacity. When opacity is set to 0, the corresponding object is completely transparent. So transitioning on opacity is very useful to make objects fade in or out. </p>
<h4>How this is done</h4>
<p>Now that we&#8217;ve seen what transitions can do, let&#8217;s see how to code this in d3.<br />
Let&#8217;s go back to our first example. In fact, let&#8217;s make it even simpler.</p>
<p><iframe src="https://jckr.github.io/blog/stuff/transitions.html#4" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
To create a square like this in d3, we would write something like:</p>
<pre class="brush: jscript; title: ; notranslate">
var mySquare=svg.append(&quot;rect&quot;)
  .attr(&quot;x&quot;,60)
  .attr(&quot;y&quot;,60)
  .attr(&quot;width&quot;,60)
  .attr(&quot;height&quot;,60);
</pre>
<p>4 attributes. Simple enough.<br />
so if we want to make it move to the right, we are going to update the x attribute. That&#8217;s how we do it: </p>
<pre class="brush: jscript; title: ; notranslate">
mySquare
  .transition()
  .attr(&quot;x&quot;,320);
</pre>
<p>It&#8217;s that simple: use the transition method, then specify all you want to see changed just as if you were creating a new item. And using that one principle, we can easily reproduce any of the above examples.</p>
<pre class="brush: jscript; title: ; notranslate">
mySquare
  .transition()
  .attr(&quot;width&quot;,120); // will make it bigger

mySquare
  .style(&quot;fill&quot;,&quot;white&quot;) // if the fill is originally left blank and comes
                         //  from a style sheet, it will start as black 
  .transition()
  .style(&quot;fill&quot;,&quot;blue&quot;);

mySquare
  .transition()
  .style(&quot;opacity&quot;,0);
</pre>
<p>Now, in our simple examples, this is not exactly what happens. The transitions occur after an event, namely, when the user clicks on the button. And indeed, transitions are most useful when linked to events and interaction. But this doesn&#8217;t add a whole new layer of complexity.<br />
We can just write: </p>
<pre class="brush: jscript; title: ; notranslate">
button.on(&quot;click&quot;, function() {
  mySquare.transition().attr(&quot;x&quot;,320);
})
</pre>
<p>And now, our animation only starts when the button is clicked. Obviously, since the transition is within a function, we could even determine where the square should go programmatically, but let&#8217;s keep it simple for the examples. </p>
<h4>Animation 102</h4>
<p>So far, we&#8217;ve seen how we can do simple animations in d3 and even throw in a little interaction. We&#8217;ve seen that it&#8217;s really as simple as creating elements in the same place. But here are some good news. Transitions in d3 are extremely versatile and can be customized with a lot of finesse without getting overly complex to write. It&#8217;s more a matter of knowing what to do.</p>
<p><iframe src="https://jckr.github.io/blog/stuff/transitions.html#5" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
After using the transition() method, it&#8217;s possible to specify a value for duration and delay. Duration is the number of milliseconds the transition will last, while delay is the number of milliseconds the system will wait before launching it.<br />
The syntax is: </p>
<pre class="brush: jscript; title: ; notranslate">
mySquare.transition()
  .attr(&quot;x&quot;,320)
  .duration(1000) // this is 1s
  .delay(100)     // this is 0.1s
</pre>
<p>The default is a 250ms duration, and no delay.<br />
I find 250ms to be a bit harsh. In most cases, transitions should be noticeable, so I oftentimes find myself increasing the duration to 500 or 1000. But unless there is a very good reason for that, durations should not be too long. If you use them to support your data, you don&#8217;t want the transition to take center stage by having them take several seconds.<br />
Consider the following two examples (which you&#8217;ll have to start with the button)<br />
<iframe src="https://jckr.github.io/blog/stuff/transitions.html#13" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
<iframe src="https://jckr.github.io/blog/stuff/transitions.html#14" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
Isn&#8217;t the second one simply atrocious? You may find hard to believe that it only wasted 25 seconds of your time. </p>
<p><iframe src="https://jckr.github.io/blog/stuff/transitions.html#6" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
Easing is the technical name of the actual function that turns time into attribute changes. From the previous examples, you may have noticed that the values change slowly first, and then faster, then slowly at the end? Well, it turns out that you can use different functions to get different results. In my practice, I&#8217;ve only seen the use for the 3 displayed here although there are <a href="https://github.com/mbostock/d3/wiki/Transitions#wiki-d3_ease">many others</a>. And yes, you can write your own, although we are not going to cover this here.<br />
The syntax is similar to the above: </p>
<pre class="brush: jscript; title: ; notranslate">
mysquare.transition()
  .attr(&quot;x&quot;,320)
  .ease(&quot;elastic&quot;)
</pre>
<p>(and by the way, the order in which you change attributes or specify animation parameters has no effect, so feel free to use .ease first then .attr).</p>
<p><iframe src="https://jckr.github.io/blog/stuff/transitions.html#7" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
For path objects, through transitions you can update the position of each point. This allows you to effectively turn one shape into another.<br />
This can be especially interesting for line charts (or any chart which is a path)<br />
<iframe src="https://jckr.github.io/blog/stuff/transitions.html#8" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
Like this, if the values that you are plotting change, you can spot these changes very efficiently. If, instead, you just erase your chart redraw your data if would be very difficult to spot where the data has changed.<br />
For both of these examples, the &#8220;d&#8221; attribute of the path is updated (so they are not intrinsically different from the simplest example).</p>
<p><iframe src="https://jckr.github.io/blog/stuff/transitions.html#9" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
Sometimes (and actually: often), you want to fire a transition right after another transition.<br />
But in case you were wondering, the following doesn&#8217;t work: </p>
<pre class="brush: jscript; title: ; notranslate">
mysquare.transition()
  .attr(&quot;x&quot;,320);
mysquare.transition()
  .attr(&quot;y&quot;,200);
</pre>
<p>You may think that this will move the square right, then down. But no: it will start to move the square right, then fire the second transition which will move it down. Since they have the same duration and no delay, what will happen is that only the second will have a visible effect.<br />
If the second transition had a delay, smaller than the first transition&#8217;s duration, the first one will be in effect for a while until the delay expires. Then, the second transition will take over. However, chances are you don&#8217;t want to do that, because how much of the first transition will have been accomplished depends on the users machine, browser etc. and is therefore unpredictable.<br />
So how about giving the second transition a delay which corresponds exactly to the duration of the first one? This will usually work, however, the delays and durations are not extremely accurate. Firing the transition proper takes a certain time (which is roughly 15ms on my machine and which may vary) so it is difficult to chain two transitions very precisely this way.<br />
In more complex programs than our simplistic examples, sometimes, several events try to trigger transitions on the same object. When this happens, the first transaction is fired, and runs its course unless another transition starts. That second transition would interrupt, then replace the first one. What this means is that the attributes that were in the process of being changed by the first transition will remain as they were when the second transition starts, somewhere between their start and target value.<br />
If you want to make sure that all your transitions update their attribute up to the value they are supposed to reach, you may want to re-specify the attributes of the first transition in subsequent ones, like so:</p>
<pre class="brush: jscript; title: ; notranslate">
mysquare.transition()
  .attr(&quot;x&quot;,320);
mysquare.transition()
  .delay(250)
  .attr(&quot;y&quot;,200)
  .attr(&quot;x&quot;,320); // even if the first transition doesn't complete, 
                  // this one will and will update x to 320.
</pre>
<p>There is a more certain way to chain two transitions. With the following syntax, another event will start exactly at the end of a transition. That other event can be another transition (which is the case in the above example).</p>
<pre class="brush: jscript; title: ; notranslate">
mysquare
 .transition() 

 ...

 .each(&quot;end&quot;, function() { ... });
</pre>
<p>here, what&#8217;s in the callback function on the last line, introduced by .each(&#8220;end&#8221;, will be fired exactly as the transition ends. </p>
<p>What can be done then? Here are 3 common scenarios.</p>
<p><iframe src="https://jckr.github.io/blog/stuff/transitions.html#9" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
(btw, if you&#8217;re wondering what&#8217;s the difference between this and the previous example, there is none &#8211; it&#8217;s just to save you some scrolling).<br />
One possibility is to launch another transition on the same item. Here, the square moves right, then down.<br />
Here&#8217;s how it&#8217;s done: </p>
<pre class="brush: jscript; title: ; notranslate">
mysquare
  .transition()
  .attr(&quot;x&quot;,320)
  .each(&quot;end&quot;,function() { // as seen above
    d3.select(this).       // this is the object 
      transition()         // a new transition!
        .attr(&quot;y&quot;,180);    // we could have had another
                           // .each(&quot;end&quot; construct here.
   });
</pre>
<p>Another possibility is to delete the object after the transition has run its course. This is super useful, especially when you are creating a lot of temporary objects. An interesting combo is when you decrease opacity all the way to 0, making it invisible, then using remove() if you don&#8217;t need it anymore.</p>
<pre class="brush: jscript; title: ; notranslate">
mysquare
  .transition()
  .attr(&quot;x&quot;,320)
  .each(&quot;end&quot;,function() { 
    d3.select(this).       // so far, as above
      remove();            // we delete the object instead 
   });
</pre>
<p>Finally, we can create a new object. That can be a nice way to add a special effect. Here&#8217;s an example: </p>
<p><iframe src="https://jckr.github.io/blog/stuff/transitions.html#10" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
Here, at the end of the transition, a circle is created, a transition is started on that circle, which decreases opacity to 0, then the circle is removed. </p>
<p><iframe src="https://jckr.github.io/blog/stuff/transitions.html#11" width=502px height=202px scrolling=no style="border:0px"></iframe><br />
And here is a last example with several effects combined.</p>
<h4>Going further</h4>
<p>Believe it or not, we barely scratched the surface of what can be achieved with animations in d3.<br />
There are two other uses of transition that we haven&#8217;t seen because they are slightly more complex, so I&#8217;ll just mention them here.<br />
Up to now, we have always seen transitions based on the properties of one specific object. We make the x property of that one square vary from what it was to 200.<br />
Sometimes, though, you want many parts of your visualization to be updated according to the changes in one variable.<br />
That is possible, too, by using the .tween and .interpolate methods. All of this is explained in the <a href="https://github.com/mbostock/d3/wiki/Transitions#wiki-tween">d3 documentation</a>.<br />
Another possibility is the use of the <a href="https://github.com/mbostock/d3/wiki/Transitions#wiki-d3_timer">d3 timer</a> method, which allows to call a function repeatedly, which can also be used to create animation.</p>
<p>The point I was hoping to make was that it&#8217;s possible to do a lot with relatively simple code and technique if you know what you are trying to do. Especially, chaining transitions, particularly when adding and removing objects when appropriate, goes a long way in creating powerful effects.</p>
]]></content:encoded>
			<wfw:commentRss>/2012/07/16/animations-and-transitions/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
	</channel>
</rss>
