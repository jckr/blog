<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>jerome &#8211; jckr.github.io/blog</title>
	<atom:link href="http://localhost/author/jerome/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Just another WordPress site</description>
	<lastBuildDate>Wed, 17 Aug 2016 05:36:39 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.10</generator>
	<item>
		<title>The big leagues</title>
		<link>/2016/08/17/the-big-leagues/</link>
		<comments>/2016/08/17/the-big-leagues/#comments</comments>
		<pubDate>Wed, 17 Aug 2016 05:36:39 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1765</guid>
		<description><![CDATA[This is the 7th and last post in my Visualization with React series. Previous post: Creating a React visualization web app We can finally take the little wheels off and create a real React app. That&#8217;s what we&#8217;ll make: You can try the app for yourself here. The code is available on github. This time, <a class="read-more" href="/2016/08/17/the-big-leagues/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>This is the 7th and last post in my <a href="/2016/08/09/visualization-with-react/">Visualization with React</a> series. Previous post: <a href="/2016/08/17/creating-a-react-visualization-web-app/">Creating a React visualization web app</a></p>
<p>We can finally take the little wheels off and create a real React app.<br />
That&#8217;s what we&#8217;ll make:<br />
<img src="http://jckr.github.io/blog/assets/visualization-with-react/react-weather-app" alt="App screenshot" /><br />
You can <a href="http://jckr.github.io/blog/projects/react-weather/">try the app for yourself here</a>. The code is available on <a href="https://github.com/jckr/react-weather">github</a>. </p>
<p>This time, instead of loading data from a paltry CSV file, we&#8217;ll go live and hit the <a href="http://openweathermap.org/">openweathermap</a> API and get live weather data.</p>
<p>The app may be more complex than anything we&#8217;ve done before, but it&#8217;s really more of the same, so I&#8217;ll be probably quicker. </p>
<p>First, look at the secrets.json file. As you can guess, it can&#8217;t work as is &#8211; if you want to try this at home, you must get your own (free) API key from openweathermap. </p>
<p>Next, let&#8217;s take a look at our constants.js file.<br />
At this stage, you might ask: why not put the API key in that constants file? Well, it&#8217;s good practice to never store your API keys in your code. So, I put it in a separate file.<br />
Constants.js is pretty simple. It has: a url prefix (that of the openweathermap api). If they change it, I can just edit the constants file. The CITY_ID holds the identifier of San Francisco. You can replace it by whatever you want (it&#8217;s not too difficult to find the city_id for any given city at the OWM web site).<br />
Finally, I have a json object called KEYS where I store what I&#8217;m interested in getting from the API. </p>
<p>Let&#8217;s move to the App.js file, which is the top-level react file.</p>
<pre class="brush: plain; title: ; notranslate">
import React, { Component } from 'react';
import './App.css';
import '../node_modules/react-vis/main.css';
import {json} from 'd3-request';
import * as CONSTANTS from './constants';
import secrets from './secrets.json';
const {API} = secrets;
</pre>
<p>Note that I can import my json file like a code file. </p>
<p>We start, unsurprisingly, by creating an App component, and by a constructor method.</p>
<pre class="brush: plain; title: ; notranslate">
class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      highlighted: null
    };
    this.highlightX = this.highlightX.bind(this);
    this.processResults = this.processResults.bind(this);
  }
</pre>
<p>We initialize the state, and bind two methods. Nothing we haven&#8217;t seen.</p>
<pre class="brush: plain; title: ; notranslate">
  componentWillMount() {
    json(`${CONSTANTS.QUERY_PREFIX}?id=${CONSTANTS.CITY_ID}&amp;appid=${API}&amp;units=imperial`,
      this.processResults);
  }
</pre>
<p>Things get interesting with the componentWillMount method.<br />
We use our d3-request json function to read the url in the first line, which we compose by joining the URL prefix, the city id, the api key, and I&#8217;ve added &#8216;units=imperial&#8217; so that temperatures are in Farenheit. Feel free to change this to units=metric or remove it (in which case temperatures will be in Kelvin, why not).<br />
The second argument of the json function is what is done with the request &#8211; this is our first private method, processResults, which is what comes next.</p>
<pre class="brush: plain; title: ; notranslate">
 processResults(error, queryResults) {
    if (error) {
      this.setState({error});
    }
    const data = CONSTANTS.KEYS.map(key =&gt; ({
      key,
      values: queryResults.list.map((d, i) =&gt; ({
        i,
        x: d.dt * 1000,
        y: d[key.key1] ? d[key.key1][key.key2] || 0 : 0 
      }))
    })).reduce((prev, curr) =&gt; {
      return {...prev, [curr.key.name]: curr.values}
    }, {
      'city-name': (
        queryResults &amp;&amp;
        queryResults.city &amp;&amp;
        queryResults.city.name
      ) || 'Unkown'
    });
    this.setState({data});
  }
</pre>
<p>If the data can&#8217;t load, error will have a value, and we&#8217;ll pass it to the state.<br />
Else, we&#8217;re going to process the result of the query (queryResults) according to the structure that we want (CONSTANTS.KEYS).<br />
Here, I&#8217;m using a sequence of map and reduce.<br />
Map turns an array into another array of the same shape. Reduce turns an array into something else, such as an object as here.<br />
queryResults is an object which has a list property. queryResults.list is an array of nested objects. This is why each entry of CONSTANTS.KEYS specifies two keys.<br />
To simplify, one of these objects could look like this: </p>
<pre class="brush: plain; title: ; notranslate">
{
  &quot;dt&quot;: 1471413600,
  &quot;main&quot;: {
    &quot;temp&quot;: 57.22,
    &quot;temp_min&quot;: 53.32,
    &quot;temp_max&quot;: 57.22,
    &quot;pressure&quot;: 1017.57,
    &quot;sea_level&quot;: 1025.63,
    &quot;grnd_level&quot;: 1017.57,
    &quot;humidity&quot;: 100,
    &quot;temp_kf&quot;: 2.17
  },
  &quot;weather&quot;: [
    {
      &quot;id&quot;: 500,
      &quot;main&quot;: &quot;Rain&quot;,
      &quot;description&quot;: &quot;light rain&quot;,
      &quot;icon&quot;: &quot;10n&quot;
    }
  ],
  &quot;clouds&quot;: {
    &quot;all&quot;: 24
  },
  &quot;wind&quot;: {
    &quot;speed&quot;: 3.42,
    &quot;deg&quot;: 234.501
  },
  &quot;rain&quot;: {
    &quot;3h&quot;: 0.02
  },
  &quot;sys&quot;: {
    &quot;pod&quot;: &quot;n&quot;
  },
  &quot;dt_txt&quot;: &quot;2016-08-17 06:00:00&quot;
}
</pre>
<p>So, if I&#8217;m interested in the temperature, I have to get it from main, then temp. (two keys)<br />
For each entry of CONSTANTS.KEYS, I&#8217;m <em>mapping</em> queryResults to create a time series of objects with three properties: in x, a date in timestamp format (number of milliseconds since 1970). in y, the value I&#8217;m interested in. and in i, the index of that object in the time series.</p>
<p>When I&#8217;m done mapping CONSTANTS.KEYS, I have an array of such time series, or more exactly: an array of objects with a name property (which comes from CONSTANTS.KEYS) and a values property (the array of objects described above). </p>
<p>Finally, I&#8217;m reducing it to an object using reduce.<br />
The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">reduce method</a> works like this: </p>
<pre class="brush: plain; title: ; notranslate">
myArray.reduce(function(prev, curr) {
  // operation involving the previous result (prev) and the current element of the array (curr)
  return resultOfThatOperation;}, // which becomes prev in the next loop
  initialValueOfReduce) // which will go into prev the first time 
</pre>
<p>What mine does is turn that array into an object. The keys of that object are the name property of each element, and the values are what&#8217;s behind the values property of that object (our time series).<br />
And that final object has an extra property: city-name, the name of the city for which weather is being queried, if it exists. </p>
<p>When this object is created, we send it to the state. </p>
<pre class="brush: plain; title: ; notranslate">
  highlightX(highlighted) {
    this.setState({highlighted});
  }
</pre>
<p>highlightX is our other private method. What it does is send whatever it&#8217;s passed to the state. But since we create it here, it will pass that to the state of App, the top level component. If that state is changed, all the children (ie everything) may be re-rendered.</p>
<p>Finally, we have our render method.<br />
We&#8217;ll skip on the styling &#8211; codewise, we&#8217;ll see that this method calls two components, LargeChart and SmallChart, with similar properties:</p>
<pre class="brush: plain; title: ; notranslate">
&lt;LargeChart
  highlighted={highlighted}
  highlightX={this.highlightX}
  series={data.Temperature}
  title='Temperature'
/&gt;

// ...

&lt;SmallChart
  highlighted={highlighted}
  highlightX={this.highlightX}
  series={data.Pressure}
  title='Pressure'
/&gt;
</pre>
<p>highlighted comes from the state of App.<br />
highlightX is the callback method. We&#8217;ve seen this before &#8211; we give children components the ability to change the state of their parent, and we also pass them the result of that change.<br />
Else, we pass to each component a part of our data object, and a different title. </p>
<p>Let&#8217;s move on to the large chart component: </p>
<pre class="brush: plain; title: ; notranslate">
import React, { Component } from 'react';
import moment from 'moment';
import {
  LineSeries,
  makeWidthFlexible,
  MarkSeries,
  VerticalGridLines,
  XAxis,
  XYPlot,
  YAxis
} from 'react-vis';

const HOUR_IN_MS = 60 * 60 * 1000;
const DAY_IN_MS = 24 * HOUR_IN_MS;

const FlexibleXYPlot = makeWidthFlexible(XYPlot);
</pre>
<p>so far, we&#8217;re importing a bunch of stuff.<br />
the two constants that we create are the numbers of milliseconds in an hour, and in a day, which will be useful in a bit.<br />
FlexibleXYPlot is a special react-vis component that can resize (in width). By using this as opposed to XYPlot with a fixed width, we can make our app layout responsive (<a href="http://jckr.github.io/blog/projects/react-weather/">try resizing the window!</a>) without having to think too hard it.</p>
<pre class="brush: plain; title: ; notranslate">
export default class LargeChart extends Component {
  render() {
  	const {highlighted, highlightX, series} = this.props;
   	const minValue = Math.min(...series.map(d =&gt; d.y));
  	const maxValue = Math.max(...series.map(d =&gt; d.y));

  	const yDomain = [0.98 * minValue, 1.02 * maxValue];
  	const tickValues = series.map(d =&gt; d.x);

    const labelValues = makeLabelValues(series);
</pre>
<p>Eh, we could have made a pure functional component, since this one only has a render method and no state.<br />
First, we come up with the bounds of the domain. We don&#8217;t have to. Note the use of the spread operator for a very concise way to write this.<br />
We create yDomain with a little bit of margin &#8211; we start with 98% of the smallest value, and go to 102% of the maximum value.<br />
If we don&#8217;t define a domain, then react-vis will create it based on the data &#8211; it will start with exactly the smallest value and end with exactly the highest. </p>
<p>tickValues will be all the different x values.<br />
labelValues will be created by a separate function (in the end). We&#8217;ll write a label for every day of our time series at precisely midnight.</p>
<p>Now we&#8217;ll create the chart proper. </p>
<pre class="brush: plain; title: ; notranslate">
&lt;FlexibleXYPlot
    	height={300}
    	margin={{top: 5, bottom: 25, left: 40, right: 0}}
    	onMouseLeave={() =&gt; this.props.highlightX(null)}
    	yDomain={yDomain}
    &gt;
    	&lt;VerticalGridLines 
    		values={labelValues}
    	/&gt;
        &lt;HorizontalGridLines /&gt;
    	&lt;LineSeries 
    		data={series}
    		onNearestX={highlightX}
    		stroke='#11939a'
    		strokeWidth={2}
    	/&gt;
    	{highlighted ? 
    		&lt;LineSeries
    			data={[
    				{x: highlighted &amp;&amp; highlighted.x, y: yDomain[0]},
    				{x: highlighted &amp;&amp; highlighted.x, y: yDomain[1]}
    			]}
    			stroke='rgba(17,147,154,0.7)'
    			strokeWidth={2}
    		/&gt; : null
    	}
       {highlighted ?  
       &lt;MarkSeries
          data={[{
            x: highlighted &amp;&amp; highlighted.x,
            y: highlighted &amp;&amp; series[highlighted.i].y
          }]}
          color='rgba(17,147,154,0.7)'
        /&gt; : null
        }
    	&lt;XAxis 
    		tickSize={4}
    		tickValues={tickValues}
    		labelValues={labelValues}
    		labelFormat={(d) =&gt; moment(new Date(d)).format('MM/DD')}
    	/&gt;
        &lt;YAxis 
        	tickSize={4}
        /&gt;
    	
    &lt;/FlexibleXYPlot&gt;
</pre>
<p>The first interesting thing is the onMouseLeave property of FlexibleXYPlot. If the mouse leaves the chart, we&#8217;ll use our highlightX callback function to pass &#8220;null&#8221; to the state of App.<br />
In other words, when the mouse is not on a chart, the value of highlighted is null. </p>
<p>A bit later, we see that the first LineSeries has an onNearestX property. What it does is that when somebody mouseovers the chart, it sends the underlying datapoint to the state of App. Remember that these datapoints are objects with three property: x, i and y.</p>
<p>So, at a given moment, highlighted is either null, or of the form: {x: (a date in timestamps format), y: (a value), i: (the position of that datapoint in the time series, ie 10 if that&#8217;s the 10th point)}.</p>
<p>Let&#8217;s go on.<br />
There&#8217;s an interesting construct between curly braces. Remember that in JSX, whatever is between curly braces will be evaluated. Here, we have a ternary operator (condition ? true : false). If highlighted exists, then we will create a LineSeries, else nothing.<br />
What this means is that if there&#8217;s a value for highlighted, we are going to draw a vertical line that spans the whole chart, at the level of the mouseover.<br />
We then have a similar construction for a MarkSeries, which, likewise, draws a circle at the same position as the highlighted data point. </p>
<p>Finally, we create the axes. The XAxis has a few interesting properties: tickValues, which we defined above &#8211; all the possible x values, labelValues and labelFormat. labelValues determine <em>where</em> the labels will be drawn. Finally, labelFormat determines <em>what</em> will be drawn, as a function of each value in labelValues.  </p>
<pre class="brush: plain; title: ; notranslate">
export function makeLabelValues(series) {
  const firstDate = new Date(series[0].x);
  const firstDateHour = firstDate.getHours();
  const firstMidnight = series[0].x + (24 - firstDateHour) * HOUR_IN_MS;

  return [0, 1, 2, 3, 4].map(d =&gt; firstMidnight + d * DAY_IN_MS);
}
</pre>
<p>the last part of this module creates those label values. </p>
<p>Our time series has a number of elements (normally 39), every 3 hours. But the first element is probably not the very beginning of a day. We&#8217;d like our labels to be exactly aligned with the start of a day (midnight).<br />
So we are going to figure out what time it is on the first element of the time series, compute when exactly is the next day, and then create an array of 5 values corresponding to the time we just computed, then the time 24 hours after (start of the next day), the time 24 hours after that, etc.<br />
As a result, we&#8217;ll have a list of 5 &#8216;midnights&#8217; exactly a day apart. </p>
<p>Finally, let&#8217;s look at SmallChart. </p>
<p>SmallChart is very similar to LargeChart. The styling is a bit different (these charts are, well, smaller). The Smallchart component also have an onNearestX hook that sends a datapoint to the state of App.<br />
Unlike LargeChart, it doesn&#8217;t draw a vertical line; it just draws a dot on the curve corresponding to the highlighted time.</p>
<p>So, since App sends the same highlighted to all chart components, mousing over any chart makes that dot appear on all charts. How do we know where to draw it?<br />
If I mouseover on a chart, onNearestX will send to its corresponding callback function the underlying datapoint, that has an x and a y property (and possibly others). If I wanted to draw a dot on that same chart, that would be easy &#8211; I already know the x and y coordinates where I would have to draw it. But how can I draw a dot on all the other charts?<br />
This is why I added that i property to the timeseries to begin with. When I mouseover on a point on any chart, the object I send to App&#8217;s state has that i property. In other words, I can know that I&#8217;ve mouseovered the 10th point of the chart (or the 17th, or the 3rd, etc.). When the LargeChart and SmallChart components will draw the dot, they will draw it on top of the 10th (or 17th, or 3rd&#8230; well, the i-th) point of their own chart. </p>
<pre class="brush: plain; title: ; notranslate">
&lt;MarkSeries
  data={[{
    x: highlighted &amp;&amp; highlighted.x,
    y: highlighted &amp;&amp; series[highlighted.i].y
  }]}
  color='rgba(17,147,154,0.7)'
  size='2'
/&gt;
</pre>
<p>That&#8217;s what series[highlighted.i].y means.</p>
<p>And that&#8217;s it! A complete dashboard with linked charts. You can tell that temperature is lower at night, and probably lower when there are clouds, but then again it&#8217;s San Francisco so it&#8217;s probably always 60 more or less.</p>
<p>This project could be much more complex &#8211; we could have added a tooltip like in our previous app&#8230; added extra series&#8230; and arranged info in a lot of different ways. We could also let the user change the city through a text box. Well, you can make your own version! </p>
<p>(if you&#8217;re curious why I haven&#8217;t hosted this app on github, it&#8217;s because we can only access an HTTP version of the OWM API for free, and since github pages are hosted over HTTPS those requests will be blocked.)</p>
<h1>Now, what</h1>
<p>Congratulations for reading that far, you are awesome.<br />
So you want to take your react game to the next level and do amazing visualizations?<br />
You should continue exploring react-vis. I&#8217;ve only used a very basic case. We use it at Uber to create pretty elaborated charts and dashboards.<br />
Our visualization team is also behind three amazing open source libraries which play well with React: <a href="https://github.com/uber/react-map-gl">React-Map-GL</a>, to create maps with MapBox and React; <a href="https://github.com/uber/deck.gl">Deck.gl</a>, to create webGL layers over maps, and <a href="https://github.com/uber/luma.gl">Luma.gl</a>, a WebGL framework. </p>
<p>One of the best features of React is that it has so many existing modules. <a href="https://github.com/chenglou/react-motion">React-motion</a> is, IMO, the best way to handle animation in React as of now, especially when SVG elements are concerned. Check out that <a href="https://medium.com/@nashvail/a-gentle-introduction-to-react-motion-dc50dd9f2459#.6in161dz0">great article</a> by Nash Vail. </p>
<p>The <a href="https://github.com/facebook/react/">React project page</a> is an evident resource. React is alive, keeps adding features, and there is constantly more code out there using react and pushing the envelope. </p>
<p>The <a href="https://github.com/airbnb/javascript">Airbnb style guide</a> is a solid reference for writing good modern javascript. We don&#8217;t follow it at Uber; we have slightly different rules, which are not published. Anyway, the best part of such a system is its consistency, and Airbnb style guide is definitely consistent.</p>
<p><a href="http://react.rocks/">React Rocks!</a> is a great collection of examples and a source of inspiration.</p>
<p>Once your application become complex enough, it&#8217;s difficult to handle states and callbacks everywhere. You can use a store to address this. Right now the state of the art solution is <a href="http://redux.js.org/">redux</a>. The author of Redux, Dan Abramov, gives an <a href="https://egghead.io/courses/getting-started-with-redux">amazing video tutorial</a> which doubles as an excellent showcase for React and ES6.</p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/17/the-big-leagues/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Creating a React visualization web app</title>
		<link>/2016/08/17/creating-a-react-visualization-web-app/</link>
		<comments>/2016/08/17/creating-a-react-visualization-web-app/#comments</comments>
		<pubDate>Wed, 17 Aug 2016 05:36:32 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1761</guid>
		<description><![CDATA[This is the 6th post in my Visualization with React series. Previous post: Beyond rendering Playing with codepen is fun, but chances are that you have other ambitions for your visualization projects. In the real world, well, in my day job at least, React is used to create web apps. So, in that last part, <a class="read-more" href="/2016/08/17/creating-a-react-visualization-web-app/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>This is the 6th post in my <a href="/2016/08/09/visualization-with-react/">Visualization with React</a> series. Previous post: <a href="/2016/08/13/beyond-rendering/">Beyond rendering</a></p>
<p>Playing with codepen is fun, but chances are that you have other ambitions for your visualization projects. In the real world, well, in my day job at least, React is used to create web apps. So, in that last part, we&#8217;re going to create our own web app, load some real data, and use some existing modules to visualize it like pros! In this article, we are going to build this:<br />
<img src="http://jckr.github.io/blog/assets/visualization-with-react/example-app-screenshot.png" alt="" /><br />
You can try a demo of the app at <a href="https://jckr.github.io/example-react-app/">https://jckr.github.io/example-react-app/</a>.<br />
All the code is at <a href="https://github.com/jckr/example-react-app">https://github.com/jckr/example-react-app</a>.</p>
<p>What&#8217;s the difference between a web app and a web page you may ask? Well, a web page is an html document with some links to scripts or some inline javascript. A web app is a comprehensive system of code files working together, including a server. All of these files are transformed via a build system, which creates a compiled version that runs on the browser. Such transformations can include JSX support, or supporting ES6/ES7 syntax. Your work can be split in many, easy to read, easy to maintain source files, but your browser will just read one single file written in a version of Javascript it can understand. </p>
<p>That may sound like a lot of work to setup. Up to a few weeks ago, the easiest way to get started was to use a web scaffolding tool such as <a href="http://yeoman.io/">Yeoman</a>. Scaffolding means that all the little parts that need to be installed or configured to get that going are taken care of, leaving you with a structure that you can use to build your web app upon.<br />
Facebook recently released &#8216;create-react-app&#8217;, which is a simpler scaffolding tool, aimed at simple React apps.</p>
<p>You will need access to a command line environment, such as Terminal on MacOS or Cygwin on windows, and have nodejs and npm installed. (see <a href="https://nodejs.org/en/">https://nodejs.org/en/</a>). You will need node version 4 and above. You may want to use <a href="https://github.com/creationix/nvm">nvm</a> to easily change versions of node if needed.</p>
<p>Here&#8217;s an illustrated guide to what you need to do to get started:<br />
<img src="http://jckr.github.io/blog/assets/visualization-with-react/installing-create-react-app.png" alt="" /><br />
First, install create-react-app with the command: npm install create-react-app -g.<br />
<img src="http://jckr.github.io/blog/assets/visualization-with-react/create-a-new-react-app.png" alt="" /><br />
From the parent directory where you want your app to be, use the command: create-react-app + the name of your app. This will also be the name of the directory this app will be in.<br />
<img src="http://jckr.github.io/blog/assets/visualization-with-react/start-the-app.png" alt="" /><br />
The above command will copy a bunch of files. When it&#8217;s done, go to the directory of your app and type npm start&#8230;<br />
<img src="http://jckr.github.io/blog/assets/visualization-with-react/a-new-react-app-created-with-create-react-app.png" alt="" /><br />
And lo and behold, the app will start and a browser window will appear with the results!<br />
From now on, whenever you change one of the source files, the app will reload and reflect the changes.</p>
<p>Remember when we did scatterplots, I never really got into doing the menial work of making gridlines, axes etc. Exactly for this reason &#8211; it can be a lot of manual work.<br />
But now that we are going to build a professional looking web app, we are going to go all the way. </p>
<h2>One component, one file</h2>
<p>The app we are building has 3 components: the App, which is the parent; Scatterplot, which is the chart proper and HintContent, for some fine control about what the tooltip looks like.<br />
There an index.html and an index.js file, which are very simple: </p>
<pre class="brush: xml; title: ; notranslate">
&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
    &lt;title&gt;React App&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>
<pre class="brush: plain; title: ; notranslate">
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import './index.css';

ReactDOM.render(
  &lt;App /&gt;,
  document.getElementById('root')
);
</pre>
<p>There&#8217;s really not much to say about the index.html. All it does it create a div with an id of root, where everything will go.<br />
The index.js ends with the familiar command ReactDOM.render( &#8230; ), which will output our component into the aforementioned root div.</p>
<p>But it starts with a few import statements. What they do is that they link the source files together.<br />
Index starts by importing functionalities from react: React and ReactDOM. This was done in our codepen environment by using the settings.<br />
The next two lines link our index.js file with other files that we control: App and index.css. App contains our highest-level component, and index.css contains the styles.<br />
I&#8217;ve done some changes in index.css for styles I couldn&#8217;t reach with react &#8211; styles of the body, for instance, or some styles of elements created by libraries over which I didn&#8217;t have direct control (more on that later). Else, I&#8217;m using inline styles, in the React tradition.</p>
<p>Let&#8217;s move to our App.js source file, which describes the App component.</p>
<p>Its last line is: </p>
<pre class="brush: plain; title: ; notranslate">
export default App;
</pre>
<p>And this is the line which corresponds to what we had seen earlier in index.js: </p>
<pre class="brush: plain; title: ; notranslate">
import App from './App';
</pre>
<p>With this pair of statements, inside of index.js, App will be equivalent to what it was inside of App.js when exported.<br />
Using this construct, using import and export, files can be kept short, legible and focused on one specific problem.</p>
<p>But let&#8217;s take another look at the first two lines of App.js: </p>
<pre class="brush: plain; title: ; notranslate">
import React, {Component} from 'react';
import {csv} from 'd3-request';
</pre>
<p>What are those curly braces?</p>
<p>If a module (a javascript file which imports or exports) has a <em>default</em> export, then when importing it, you can just use </p>
<pre class="brush: plain; title: ; notranslate">
import WhatEverNameYouWant from 'module'; 
</pre>
<p>Where WhatEverNameYouWant is actually whatever name you want. Typically, it would start by an uppercase letter, but you do you.<br />
But a module can export other things than the default export. In that case, you have to use curly braces. There&#8217;s many articles on the subject such as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">this one</a>. I&#8217;m mostly bringing it up so that you see there&#8217;s a difference between using the curly braces or not.</p>
<p>In our source files, we are going to use export default. We are also going to define <em>one component only</em> per source file, which makes the whole import / export deal easier to follow.</p>
<p>create-react-app has no dependencies beyond react &#8211; which means that it doesn&#8217;t need other modules to be installed. But this project does! It needs d3-request and react-vis.<br />
You can install them from the command line, by typing npm install d3-request &#8211;save, and npm install react-vis. </p>
<h2>The App component &#8211; loading and passing data</h2>
<p>Our app component will do two things: load the data, and when the data is loaded, pass it to the Scatterplot component so it can draw a chart.<br />
I&#8217;ve hinted at the componentWillMount lifecycle method as a great place to load data, so let&#8217;s try that!</p>
<pre class="brush: plain; title: ; notranslate">
class App extends Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
</pre>
<p>I&#8217;m starting with the constructor method. The only reason why I do that is to initialize the state to an empty object. If I didn&#8217;t, the state would initially be <em>undefined</em>. And while it&#8217;s not a deal-breaker, I would have to add more tests so that the app doesn&#8217;t break before there&#8217;s anything actually useful in the state.</p>
<pre class="brush: plain; title: ; notranslate">
  componentWillMount() {
    csv('./src/data/birthdeathrates.csv', (error, data) =&gt; {
      if (error) {
        this.setState({loadError: true});
      }
      this.setState({
        data: data.map(d =&gt; ({...d, x: Number(d.birth), y: Number(d.death)}))
      });
    })
  }
</pre>
<p>ComponentWillMount: there we go.<br />
we are using the same data file as before. Here, I&#8217;ve hardcoded it in a string, but that address could totally come from a property passed to App.<br />
Also, note I&#8217;m using csv from d3. That used to be d3.csv, but not anymore because I&#8217;m importing just <em>csv</em> from d3, or more precisely from its sublibrary &#8216;d3-request&#8217;. One of the big changes of d3 v4, also recently released, is that its code is available as smaller chunks. There are other ways to load a csv file, but d3&#8217;s csv method is super convenient and it&#8217;s also a great way to show how to cherrypick one useful part of a large library.</p>
<p>So, we are loading this file. What&#8217;s next? If loading the file raises an error, I am going to signal it via the state (setState({loadError: true});). Else, I am going to pass the content of the file to the state.<br />
Not just the raw contents: I am going to slightly transform it. Inside the csv method, data is an array of objects corresponding to the columns of my file. There are three columns: country, birth and deaths. I have therefore arrays with three properties, and their values is what is being read by csv from the file, as strings.<br />
The map statement turns that object into: a copy of all these properties (that&#8217;s what {&#8230;d does), plus x and y properties which simply convert the birth and deaths properties of each object to numbers (ie &#8220;36.4&#8221; to 36.4).<br />
So, whether this file succeeds or fails to load, I&#8217;m going to change the state of the component. </p>
<p>What values can the state take? </p>
<p>When the component is first created, state is empty.<br />
Then, componentWillMount attempts to load the file. State is still empty. During that very short time, render will fire (more on that soon).<br />
Then, the file will either load or not. If it loads, state will now hold a data property, and since state changes, the component will re-render. If it doesn&#8217;t load, state will have a loadError property and the component will also re-render.</p>
<p>Which takes us to the rendering of the component. You&#8217;ll see that these 3 situations are taken care of.</p>
<pre class="brush: plain; title: ; notranslate">
render() {
    if (this.state.loadError) {
      return &lt;div&gt;couldn't load file&lt;/div&gt;;
    }
    if (!this.state.data) {
      return &lt;div /&gt;;
    }
    return &lt;div style={{
      background: '#fff',
      borderRadius: '3px',
      boxShadow: '0 1 2 0 rgba(0,0,0,0.1)',
      margin: 12,
      padding: 24,
      width: '350px'
    }}&gt;
      &lt;h1&gt;Birth and death rates of selected countries&lt;/h1&gt;
      &lt;h2&gt;per 1,000 inhabitants&lt;/h2&gt;
      &lt;Scatterplot data={this.state.data}/&gt;
    &lt;/div&gt;;
  }
</pre>
<p>if (this.state.loadError) &#8211; that&#8217;s the situation where the data didn&#8217;t load. That&#8217;s also why I did initiate state to an empty object, because if this.state was undefined, this syntax would cause an error. (this.state &#038;&#038; this.state.error) would be ok, but I might as well just initialize the state.</p>
<p>if (!this.state.data) takes care of the situation where the data didn&#8217;t load yet. We <em>also</em> know that there hasn&#8217;t been an error yet, else the first condition would have been triggered. In a professional setting, that&#8217;s where you&#8217;d put a progress bar or a spinner. Loading a 70 line csv isn&#8217;t going to take long though, so that would be over the top, which is why there&#8217;s just an empty div.</p>
<p>Finally, if neither of these conditions are met, we are going to render a card with a Scatterplot element inside. We&#8217;re going to render a little more than <em>just</em> the Scatterplot element &#8211; we&#8217;re styling the div on which it will stand and adding some titling.</p>
<h2>The Scatterplot component: introducing react-vis</h2>
<p><a href="https://github.com/uber/react-vis/">React-vis</a> is the charting library we use at Uber.<br />
The main idea is that we can create charts by composing elements, just like a web page: </p>
<pre class="brush: plain; title: ; notranslate">
&lt;XYPlot
  width={300}
  height={300}&gt;
  &lt;HorizontalGridLines /&gt;
  &lt;LineSeries
    data={[
      {x: 1, y: 10},
      {x: 2, y: 5},
      {x: 3, y: 15}
    ]}/&gt;
  &lt;XAxis /&gt;
  &lt;YAxis /&gt;
&lt;/XYPlot&gt;
</pre>
<p>&#8230; creates a very simple line chart with horizontal gridlines and axes. Don&#8217;t want the gridline? remove the <HorizontalGridLines /> part. Want vertical gridlines too? Just add <VerticalGridlines /> underneath.<br />
Do you need another line chart? You can add another LineSeries element. Or a VerticalBarSeries. Or a RadialChart (pie or donut charts). And so on and so forth.<br />
React-vis handles all the nitty gritty of making charts, so we don&#8217;t have to.</p>
<p>Let&#8217;s dive into Scatterplot. </p>
<pre class="brush: plain; title: ; notranslate">
import React, {Component} from 'react';
import {
  Hint,
  HorizontalGridLines,
  MarkSeries,
  VerticalGridLines,
  XAxis,
  XYPlot,
  YAxis
} from 'react-vis';
</pre>
<p>scatterplot.js starts by familiar import statements. We only import what we need from &#8216;react-vis&#8217;.</p>
<pre class="brush: plain; title: ; notranslate">
import HintContent from './hint-content.js';
</pre>
<p>Then, we import HintContent &#8211; hint-content.js uses a default export, so no need for curly braces. By the way, that .js extension is not mandatory in the file name.</p>
<pre class="brush: plain; title: ; notranslate">
export default class Scatterplot extends Component {
  constructor(props) {
    super(props);
    this.state = {
      value: null
    };
    this._rememberValue = this._rememberValue.bind(this);
    this._forgetValue = this._forgetValue.bind(this);
  }

  _rememberValue(value) {
    this.setState({value});
  }

  _forgetValue() {
    this.setState({
      value: null
    });
  }
</pre>
<p>We could have made Scatterplot a pure functional component&#8230; if we had passed callback functions for handling mouseover. Those functions could have changed the state of the App component, which would re-render its children &#8211; Scatterplot. Since no component outside of Scatterplot is interested in knowing where the mouse is, that component can have its own state.<br />
We are also adding two private functions. They have to be bound to &#8220;this&#8221; &#8211; we are creating a class, and those functions have to be tied to each instance of that class. The other way  to think about it is: you can add private functions to a React component, but if they use the state, properties or private variables, you <em>will</em> have to bind them to &#8216;this&#8217; in the constructor. </p>
<pre class="brush: plain; title: ; notranslate">
render() {
    const {data} = this.props;
    const {value} = this.state;
    return &lt;div&gt;
      &lt;XYPlot
        margin={{top:5, left: 60, right: 5, bottom: 30}}
        width={320}
        height={290}&gt;
        &lt;VerticalGridLines /&gt;
        &lt;HorizontalGridLines /&gt;
        &lt;XAxis/&gt;
        &lt;YAxis/&gt;
        &lt;MarkSeries
          data={data}
          onValueMouseOver={this._rememberValue}
          onValueMouseOut={this._forgetValue}
          opacity={0.7}
        /&gt;
        {value ?
          &lt;Hint value={value}&gt;
            &lt;HintContent value={value} /&gt;
          &lt;/Hint&gt; :
          null
        }
      &lt;/XYPlot&gt;
      &lt;div style={{
        color: '#c6c6c6',
        fontSize: 11,
        lineHeight: '13px',
        textAlign: 'right',
        transform: 'rotate(-90deg) translate(120px, -160px)'
      }}&gt;Death Rates&lt;/div&gt;
      &lt;div style={{
        color: '#c6c6c6',
        fontSize: 11,
        lineHeight: '13px',
        textAlign: 'right',
        transform: 'translate(-5px,-14px)',
        width: '320px'
      }}&gt;Birth Rates&lt;/div&gt;
    &lt;/div&gt;;
  }
</pre>
<p>What we are returning is a div element. The reason is that at the very end, we are writing the name of the axes on that div. But mostly, that div will hold a XYPlot component, which comes from react-vis. I&#8217;m passing: a margin property, a height and a width. Margin is optional and I&#8217;m using it for control. Height is mandatory, width as well, though react-vis has a responsive component that makes the charts adapt to the width of the page (not used here).<br />
Then, I&#8217;m simply adding: horizontal and vertical gridlines, and horizontal and vertical axes. I&#8217;m using default settings for all of them (full disclosure &#8211; I&#8217;ve changed a few things via the index.css stylesheet). But the way labels and lines are organized is fine by me.<br />
Then, we&#8217;re adding the MarkSeries component, which is all the circles. </p>
<pre class="brush: plain; title: ; notranslate">
 &lt;MarkSeries
  data={data}
  onValueMouseOver={this._rememberValue}
  onValueMouseOut={this._forgetValue}
  opacity={0.7}
/&gt;
</pre>
<p>The data property comes from the properties passed to the Scatterplot component. It needs to have an x and y properties, which is why I transformed our csv file like so. It could also have a size or a color property, but we&#8217;re not going to use these in our example.<br />
I&#8217;m using an opacity property to better show which marks overlap. I could also have made them smaller, but I&#8217;m sticking to the defaults.<br />
Finally, we&#8217;re using the onValueMouseOver and onValueMouseOut properties to pass functions to handle what happens when the user is going to, well, mouse over one of the marks, or remove their mouse cursor from them. Those are our private functions from before:</p>
<pre class="brush: plain; title: ; notranslate">
  _rememberValue(value) {
    this.setState({value});
  }

  _forgetValue() {
    this.setState({
      value: null
    });
  }
</pre>
<p>When a user passes their mouse on a mark, the corresponding datapoint (value) will be passed to the state. And when the user removes their mouse, the value property is reset to null.</p>
<p>finally, right under the MarkSeries component, is where we call our Hint: </p>
<pre class="brush: plain; title: ; notranslate">
  {value ?
    &lt;Hint value={value}&gt;
      &lt;HintContent value={value} /&gt;
    &lt;/Hint&gt; :
    null
   }
</pre>
<p>If value (from the state) is worth something, then we create a Hint component. That one comes from react-vis, and handles positioning of the tooltip plus some default content. But I want to control exactly what I show inside my tooltip, so I&#8217;ve created a component to do just that.<br />
Creating a specialized component like this is great, because it hides this complexity from the Scatterplot component. All that Scatterplot needs to know is that it&#8217;s passing properties to a HintContent component, which returns&#8230; something good.</p>
<p>Because of imports and exports, it&#8217;s generally a good idea to create such small specialized components. </p>
<h2>For the win: the hint content component</h2>
<pre class="brush: plain; title: ; notranslate">
import React from 'react';
export default function HintContent({value}) {
  const {birth, country, death} = value;
  return &lt;div&gt;
    &lt;div style={{
      borderBottom: '1px solid #717171',
      fontWeight: 'bold',
      marginBottom: 5,
      paddingBottom: 5,
      textTransform: 'uppercase'
    }}&gt;{country}&lt;/div&gt;
    {_hintRow({label: 'Birth Rates', value: birth})},
    {_hintRow({label: 'Death Rates', value: death})}
  &lt;/div&gt;;
}

function _hintRow({label, value}) {
  return &lt;div style={{position: 'relative', height: '15px', width: '100%'}}&gt;
    &lt;div style={{position: 'absolute'}}&gt;{label}&lt;/div&gt;
    &lt;div style={{position: 'absolute', right: 0}}&gt;{value}&lt;/div&gt;
  &lt;/div&gt;;
}
</pre>
<p>The HintComponent is a pure functional component and is our default export.<br />
There&#8217;s another function in that module, and we&#8217;re not exporting it. In other words, it won&#8217;t be accessible by other parts of the app. The only place where it can be used is within this file. Traditionally, those start with an underscore.</p>
<p>The only point of the HintComponent is to offer fine control on the appearance of the tooltip (which also receives styles from index.css). But I wanted to control exactly how the various parts of the data point will appear inside.<br />
So, it has 3 rows. The first one contains the name of the country (well, its 3-letter ISO code). I chose to make it bolder and uppercase. Also, it will have a border separating it from the rest of the card.<br />
The next two rows are similar, which is why I created a function to render them as opposed to just retype it.<br />
It&#8217;s a relative div, which takes all the space, with two absolute divs as children. The label one has no position information, so its attached to its top left corner, but the value one has a right attribute of 0, so its attached to its top right corner. So, for each row, the label is going to be left-aligned, and the value, right-aligned. </p>
<p>And that&#8217;s it! </p>
<p>For our <a href="/2016/08/17/the-big-leagues/">grand finale</a>, we are going to create a more complex application with several charts that interact with one another&#8230;</p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/17/creating-a-react-visualization-web-app/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Beyond rendering</title>
		<link>/2016/08/13/beyond-rendering/</link>
		<comments>/2016/08/13/beyond-rendering/#respond</comments>
		<pubDate>Fri, 12 Aug 2016 23:41:36 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[d3]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1758</guid>
		<description><![CDATA[This is the 5th post in my Visualization with React series. Previous post: React components The lifecycle functions I&#8217;m not going to go into great details on this, but a talk on React without mentioning the lifecycle functions would not be complete. React components come with several functions which are fired when certain events occur, <a class="read-more" href="/2016/08/13/beyond-rendering/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>This is the 5th post in my <a href="/2016/08/09/visualization-with-react/">Visualization with React</a> series. Previous post: <a href="/2016/08/11/react-components/">React components</a></p>
<h1>The lifecycle functions</h1>
<p>I&#8217;m not going to go into great details on this, but a talk on React without mentioning the <a href="https://facebook.github.io/react/docs/component-specs.html">lifecycle functions</a> would not be complete.<br />
React components come with several functions which are fired when certain events occur, such as when the component is first created (&#8216;mounts&#8217;), when it&#8217;s updated or when it&#8217;s removed (&#8216;unmounts&#8217;).<br />
Pure functional components, which we&#8217;ve been mostly using, don&#8217;t have lifecycle functions.<br />
But components with a state can have them.</p>
<p>Some examples of usage of those lifecycle functions include: </p>
<ul>
<li>Before the component is rendered, you can load data. that&#8217;s a job for &#8216;componentWillMount&#8217;.</li>
<li>After a component is rendered, you can animate it, or add an event listener. Use &#8216;componentDidMount&#8217;. </li>
<li>Prevent a component from rendering under certain circumstances, even if it receives new properties or its state changes. Use &#8216;shouldComponentUpdate&#8217;. </li>
<li>After a component receives new props or new state, you can trigger another function before the component updates (&#8216;componentWillUpdate&#8217;) or right after (&#8216;componentDidUpdate&#8217;). </li>
<li>When a component is going to be removed, you can do some cleanups, like deleting event listeners. Use &#8216;componentWillUnmount&#8217;. </li>
</ul>
<p>Oftentimes, you can simply get by by using the default behavior of React components, which re-render only when they receive different properties or when their state changes. But it can be really convenient to have that extra degree of control.</p>
<p>Here is an example of using these lifecycle functions in context.</p>
<p data-height="400" data-theme-id="0" data-slug-hash="Vjxywz" data-default-tab="result" data-user="jckr" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/jckr/pen/Vjxywz/">lifecycle functions example</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>What is going on there?<br />
We&#8217;re adapting our earlier <a href="http://codepen.io/jckr/pen/BzKVJq">scatterplot</a> example, only this time, we are not using pure functional components (which don&#8217;t have those lifecycle functions), but creating classes.<br />
We&#8217;re going to have three classes: Chart, at the highest level; Scatterplot, a child of Chart; and Points.<br />
Chart passes data to Scatterplot. What it passes depends on whether the button is clicked. That button changes the state of Chart (which causes a rerendering of the Scatterplot and the Point elements).<br />
Chart also has a private variable that holds a message we can display on top. We can still use callback functions to change this variable, just like we change the state, but the difference between changing the state and changing a private variable is that changing a private variable doesn&#8217;t cause the children to re-render.<br />
When we first create the scatterplot element, the componentDidMount function is called, and the message is changed to reflect that.<br />
Then, each time we click the button, a different data property is passed to the Scatterplot element. Also, the componentDidUpdate method is triggered, which changes the message.<br />
(changing the state of the parent from a componentDidUpdate method can cause an endless re-rendering loop, this is why I used private variables instead of the state, and there are ways to address this but for the sake of brevity this is the easiest way to deal with that problem).<br />
Now, when a full dataset is passed to the Scatterplot element, many Point elements will be created. I&#8217;ve also added a lifecycle method to these Points: when they are first created, they receive a small animation. To that end, I have also used the componentDidMount method, but this time at the Point level.<br />
Exit animations are also possible, but &#8211; full disclosure &#8211; they are less easy to implement in React than entry animations, or than in D3. So again in the interest of concision I&#8217;ll skip these for now.</p>
<h1>React and D3</h1>
<p>We just saw that with React, we can create a DOM element, then immediately after, call a function to do whatever we want, such as manipulating that element. That function would have access to all the properties and state of that React element.<br />
So what prevents us from combining React and D3? Nothing!<br />
We can create components that are, essentially, an SVG element, then use componentDidMount to perform D3 magic on that element.<br />
Here&#8217;s an example:</p>
<p data-height="600" data-theme-id="0" data-slug-hash="BzxbPY" data-default-tab="result" data-user="jckr" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/jckr/pen/BzxbPY/">mixing react and d3</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>In that example, I have used a bona fide bl.ocks (<a href="https://bl.ocks.org/mbostock/7881887">https://bl.ocks.org/mbostock/7881887</a>) and wrapped it inside a React component. So I can create one, or in the case of that example, several such elements by just passing properties. Those components can perfectly function as black boxes: we give them properties, they give us visualizations that correspond to these parameters. And it doesn&#8217;t have to be D3 &#8211; once a React element has been created, we can use componentDidMount to do all kinds of operations on it. </p>
<p>In the last 2 articles I will present actual data visualization web apps made with React.<br />
In the next post, we&#8217;ll see how to set up a simple web app and we&#8217;ll create our <a href="/2016/08/17/creating-a-react-visualization-web-app/">first example app</a>. </p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/13/beyond-rendering/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>React components</title>
		<link>/2016/08/11/react-components/</link>
		<comments>/2016/08/11/react-components/#respond</comments>
		<pubDate>Thu, 11 Aug 2016 21:53:04 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1752</guid>
		<description><![CDATA[This article is part of my series Visualization with React. Previous article: Coding with React Using React to create elements out of data is nice, using JSX is hip but until you use your own components, you won&#8217;t use React to the fullest. So let&#8217;s do that. Fair warning: that&#8217;s the speed bump, especially if <a class="read-more" href="/2016/08/11/react-components/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script>This article is part of my series <a href="/2016/08/09/visualization-with-react/">Visualization with React</a>. Previous article: <a href="/2016/08/10/coding-with-react/">Coding with React</a></p>
<p>Using React to create elements out of data is nice, using JSX is hip but until you use your own components, you won&#8217;t use React to the fullest.<br />
So let&#8217;s do that. Fair warning: <strong>that&#8217;s the speed bump</strong>, especially if you&#8217;re not familiar with javascript concepts like &#8216;this&#8217;, which you&#8217;re not really required to master with d3.</p>
<p>In the previous examples, we created an element that held a bunch of elements. We are now going to create a custom Point component, to replace our circles. We&#8217;re going to do more than just replace it: our new component will be able to do more stuff. Each Point element should remember whether it&#8217;s highlighted or not. If it&#8217;s highlighted, it will be displayed in red. Else, it will stay in gray. Clicking on a Point will switch its highlighted status.</p>
<p>The way we are going to maintain that highlighted status is by using the state of the component (remember <a href="http://codepen.io/jckr/pen/mEeRvr">that switch example</a>?).</p>
<p>There are two syntaxes to create components: one uses React.createClass method, and the other uses ES6 classes. I&#8217;m providing this next step using both syntaxes. I don&#8217;t know which one is more common for the time being, but I feel that the ES6 class one will be in the future, so this is the one I personally use.</p>
<p class="codepen" data-height="387" data-theme-id="0" data-slug-hash="BzKxmR" data-default-tab="result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/BzKxmR/">React scatterplot with custom component &#8211; using es6 class</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>Our custom component is an ES6 class (gasp!) and it&#8217;s based on the existing class, React.Component.<br />
So we declare our custom component like this:</p>
<pre class="brush: plain; title: ; notranslate">
class Point extends React.Component {
... a bunch of stuff which is different from React.Component ...
}
</pre>
<p>Specifically we are going to specify two properties of our new class: constructor and render. Constructor describes what happens when an element of this component is first created, and render is what should be displayed on screen for that element.<br />
Don&#8217;t confuse the component and the elements: the component is the type of things that we are going to create, you can think of it as the mold. The elements are what are created with this component, think of it as casts. Creating the component describes how the elements should be created. Later in the code, we are going to create, or instantiate, the individual elements using the component. In Javascript, as in many other languages, by convention, classes like our component have a name that starts with an upper case.</p>
<p>So let&#8217;s look at the first property.</p>
<pre class="brush: plain; title: ; notranslate">
constructor(props) {
super(props);
this.state = {highlighted: false};
}
</pre>
<p>what&#8217;s the argument of constructor, props? In React world, props is short for properties. Until now, we never really had to manipulate properties inside the component.<br />
In this specific example, we don&#8217;t really do anything with props, so we could write just constructor() {&#8230;}. But it&#8217;s a convention, and if at some point we want to do something with these properties right when the component is first created, we might.<br />
The second line is super(props). What this does is that it passes whatever arguments the constructor had to the constructor of the original React.Component class. You don&#8217;t have to know what happens then, just that it&#8217;s a mandatory step.<br />
The third line introduces us to the state. we assign an object to &#8220;this.state&#8221;.<br />
But what is <a title="Understand Javascript's this with clarity and master it" href="http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/">this</a>? the 10000 ft view is that it refers to a specific context or scope (the article under the link above is fantastic if you want to know more).<br />
We&#8217;re going to have many Point elements. Each of them can be highlighted or not. Each of them also corresponds to a different data point. Each of them can access and manipulate data that no other can. This is where <em>this</em> comes from. Properties of this (that is, whatever comes after &#8220;this.&#8221;) are going to be private to that element, in other words, not accessible from the outside.<br />
And there are going to be two very important properties: props and state.</p>
<p><strong>this.props</strong> are the properties of the element, which the element cannot change. They come from its parent element.<br />
<strong>this.state</strong> is the state of the element, which the element can change: and when it does, the element will be re-rendered.</p>
<p>Speaking of rendering, let&#8217;s look at the next property of our class: the render method.<br />
That method must render a React element or null.</p>
<p>So:</p>
<pre class="brush: plain; title: ; notranslate">
render() {
  return &lt;circle
  onClick = {
    this.setState({
      highlighted: !this.state.highlighted
    });
  }}
  r = {
    5
  }
  style = {
    {
      fill: this.state.highlighted ? 'red' : '#222',
      opacity: 0.2,
      transition: 'fill .5s'
    }
  }
  /&gt;;
}
</pre>
<p>Our component will create a element. But it could also be another custom component! Let&#8217;s just keep it simple for now.<br />
cx, this time, will be expressed as a calculation based on this.props.birth. (and likewise cy will be computed from this.props.death).<br />
birth and death are the properties that will have to be passed to the component to create an element (which we&#8217;ll see in the end).</p>
<p>we have a new property: onClick. onClick, unsurprisingly, handles click events. So when a user clicks, that will trigger a function which will do the following:</p>
<pre class="brush: plain; title: ; notranslate">
this.setState({
highlighted: !this.state.highlighted
});
</pre>
<p>The intention here is to assign to the highlighted property of the state the value which is opposite to that it currently holds. That value is stored at this.state.highlighted. Remember that originally, we stored {highlighted: false} in this.state, so this.state.highlighted is where it&#8217;s at. And so, !this.state.highlighted is the opposite of the current highlighted status.<br />
this.setState adds the relevant property to the state. So, this construct effectively reverses the value of this.state.highlighted.<br />
Whenever the state changes, the component is automatically re-rendered without any other action required (we can prevent that if needed, but we&#8217;ll see that later).</p>
<p>Finally, let&#8217;s look at what&#8217;s happening towards the end, with our style.<br />
As we&#8217;ve seen several times before, we pass an object to style. Because of the JSX notation, that&#8217;s <em>two</em> sets of curly braces.<br />
The fill property of the style depends on the state. So, if highlighted is true, it&#8217;s going to be red, else it&#8217;s going to be gray. Just as we said.<br />
I&#8217;m also adding to the style a transition property, so that instead of just blinking from red to gray, our component smoothly fades from one color into the other.</p>
<p>So that&#8217;s our class.<br />
The second part of the code is the same with both syntaxes, so let&#8217;s see how we create a component using React.createClass.</p>
<p class="codepen" data-height="387" data-theme-id="0" data-slug-hash="EyKLEz" data-default-tab="js,result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/EyKLEz/">React scatterplot with custom component &#8211; using createClass</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>So instead of creating a class, we create a variable:</p>
<pre class="brush: plain; title: ; notranslate">
const Point = React.createClass({
... object with properties ...
});
</pre>
<p>So this time, we pass to React.createClass an object that describes the component that we&#8217;re going to create.<br />
As above, we care about two things: that the elements it creates have a state, which starts as not highlighted, and how they should be rendered.<br />
When we use React.createClass, the way to initialize a state is to use a property called getInitialState.<br />
You have to assign to that property a function that returns an object: that object is the initial state.</p>
<pre class="brush: plain; title: ; notranslate">
...
getInitialState: function getInitialState() {
return {highlighted: false};
},
...
</pre>
<p>A word of caution: React.createClass takes an object as an argument, so its properties are separated by commas. There are no commas between the properties of a class, with the first syntax.</p>
<p>The second property of our object is render. Render gets a function that will output a React element or null. The syntax is very close to the above.<br />
getInitialState, like render, are called lifecycle methods. This is because they are called at specific moments of the life of our component. There are more than 2, and they are one of the most interesting parts of React. We&#8217;ll cover them in our next article.</p>
<p>Now let&#8217;s look at the second part of our code. Now that we&#8217;ve got a custom component, what of it?<br />
well, let&#8217;s use it to create elements!</p>
<pre class="brush: plain; title: ; notranslate">
const svg = &lt;svg height={300} width={300}&gt;{
 birthdeathrates.map(d =&gt; &lt;Point birth={d.birth} death={d.death} /&gt;)
}&lt;/svg&gt;;
</pre>
<p>What&#8217;s different here is that line with the element.<br />
Remember that before, we created a element and we specified its cx and cy properties. This time, we don&#8217;t pass cx or cy, instead we just pass a value for birth and a value for death. The component can do the rest!</p>
<h1>Pure functional components</h1>
<p>Our Point component is somewhat complicated because we maintain its state. Because we care about its state, we need to initialize it, we need to capture events that could affect it, and have our output depend on it.<br />
By contrast, if all we had were properties (which, again, do not change), what the component does could be much simpler: it takes an input, and produces an output. The same input produces the same output. Just like each time when you add two numbers, the result is the same if the numbers you add are the same.<br />
In javascript terms, if you had a function that didn&#8217;t use global variables, randomness or external APIs, when you pass the same argument to that function, you get the same result. This is what&#8217;s called a <a title="pure functions in javascript" href="http://www.nicoespeon.com/en/2015/01/pure-functions-javascript/">pure function</a>. Pure functions have a lot of good things going for them, not least their stability and predictability and simplicity.<br />
So let&#8217;s suppose we didn&#8217;t care about the state of our Point component.<br />
React let us write it as a pure functional component.<br />
Here&#8217;s how:</p>
<p class="codepen" data-height="387" data-theme-id="0" data-slug-hash="BzKVJq" data-default-tab="html,result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/BzKVJq/">React scatterplot with pure functional component</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<pre class="brush: plain; title: ; notranslate">
function Point({
  birth,
  death
}) {
  return &lt;circle
  cx = {
    birth * 10
  }
  cy = {
    300 - death * 10
  }
  r = {
    5
  }
  style = {
    {
      fill: '#222',
      opacity: 0.2
    }
  }
  /&gt;;
}
</pre>
<p>Our component is now just a function! we pass it an object with properties {birth, death} and you can use them directly in the body of the function. No need for this.props.birth or whatever.<br />
The second part of the code doesn&#8217;t change, the elements are still created exactly the same way.</p>
<h1>Combining components: I&#8217;ll call you back</h1>
<p>In a real world situation, you&#8217;ll probably have many custom components being parts of one another and passing data back and forth.<br />
So, let&#8217;s step up in complexity.<br />
Let&#8217;s use the same dataset, but this time we&#8217;ll make a bar chart.<br />
Initially, we&#8217;ll show birth rates. But we&#8217;ll also add a switch! and if the user touches the switch, we&#8217;ll show death rates instead.<br />
So. Let&#8217;s think this through a little bit.</p>
<p>We&#8217;ll have a Chart component that is going to be at the top level.<br />
That component will have a Switch component as a child.<br />
It will also have several Bar components that will correspond to the actual data. We can make the Bar components out of our birthdeathrates dataset as before.</p>
<pre class="brush: xml; title: ; notranslate">
&lt;Chart&gt;
  &lt;Switch /&gt;
  &lt;Bar /&gt;
  &lt;Bar /&gt;
  &lt;Bar /&gt;
  ...
&lt;/Chart&gt;
</pre>
<p>There will be an event attached to the switch, so that when it&#8217;s clicked, the Bars can change.<br />
Now the real question is: which component&#8217;s state should be changed by the switch?</p>
<p>We&#8217;ve seen how the switch could change its own state. But the Bar components wouldn&#8217;t be able to read it.<br />
Ideally, the switch will trigger some kind of change in the Bar component, but likewise, it cannot reach the state of those.</p>
<p>So: we&#8217;ll have to find a way to get our switch to update the state of the Chart component. When the state of Chart updates, it re-renders. That means that it can pass new properties to its children. It can tell its Bars to use the death property instead of the birth one.<br />
But how to access the state of the parent from one of its children? That&#8217;s possible using callback functions.</p>
<p>If we are within the parent element, we can access its state.<br />
So, we could create a function that would do:</p>
<pre class="brush: plain; title: ; notranslate">
updateMetric(metric) {
  this.setState({metric}); // this.setState({metric: metric}) in short hand notation, possible with babel
}
</pre>
<p>That function would work within our future Chart component. Now what if&#8230; we passed that function to Switch as a property? then, when executed, it would change the state <em>within Chart.</em> That would trigger a re-render, and Chart could pass different props to all of its children.</p>
<p>Let&#8217;s make it work.</p>
<p class="codepen" data-height="387" data-theme-id="0" data-slug-hash="JKXZmN" data-default-tab="js,result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/JKXZmN/">React bar chart with callback</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>Lots of stuff going on here!</p>
<pre class="brush: plain; title: ; notranslate">
class Chart extends React.Component {
   constructor(props) {
     super(props);
        
     this.state = {
       metric: 'birth',
     };
   }
// ...
</pre>
<p>This is the constructor of our class. We&#8217;ve seen it before, the only special thing is that we give it an initial start here by giving a value to this.state.</p>
<pre class="brush: plain; title: ; notranslate">
render() {
    const metric = this.state.metric;
    const data = this.props.data.sort((a,b) =&gt; b[metric] - a[metric])
      .map((d, i) =&gt; ({...d, rank: i}))
      .sort((a, b) =&gt; b.country &gt; a.country);
</pre>
<p>Here, metric gets the value of whatever we put in the state.<br />
And data is: whatever is passed to the props as data, first sorted by the value of the corresponding metric, then given a rank property which is just its order in that sorted list, and finally sorted alphabetically. So whatever the metric, the same country will always be at the same position in this array, only its rank property, which was computed while the list was sorted, would be different. </p>
<pre class="brush: plain; title: ; notranslate">
    return &lt;div className='chart'&gt;
      {[
       &lt;span className='label'&gt;Birth rate&lt;/span&gt;,
       &lt;Switch metric={metric} updateMetric={(d) =&gt;
            this.setState({metric: d})
       }/&gt;,
       &lt;span className='label'&gt;Death rate&lt;/span&gt;,
       &lt;div&gt;
         {data.map(d =&gt; 
          &lt;Bar country={d.country} value={d[metric]} rank={d.rank}/&gt;
         )}
      &lt;/div&gt;
      ]}
    &lt;/div&gt;; 
</pre>
<p>Nothing that we&#8217;ve never seen before in that render function &#8211; we&#8217;re just creating divs or instances of components that remain to be described, and we pass them props. The only new thing is that updateMetric property of Switch. Instead of passing a value or an array, we pass a function. And in that function, we call this.setState.<br />
Because we are still within the Chart component, this.setState will change the state of a Chart component. But wait: we are actually passing that function to another component, Switch! This component, a child of Chart, receives a function that lets it change the state of its parent.<br />
That&#8217;s the callback function. </p>
<p>Here&#8217;s that Switch component: </p>
<pre class="brush: plain; title: ; notranslate">
function Switch({metric, updateMetric}) {
  return &lt;div className = 'switch__track'
     onClick = {() =&gt; updateMetric(metric === 'birth' ? 'death' : 'birth')}
    &gt;
      &lt;div className = {'switch__thumb ' + metric} /&gt;
    &lt;/div&gt;
};
</pre>
<p>Switch doesn&#8217;t have a state of its own, so we can just use a functional component. Switch receives updateMetric as a property. Switch doesn&#8217;t know anything about this function &#8211; it doesn&#8217;t have to. It doesn&#8217;t need to know that this function will affect its parent. All it does is launch this function when it&#8217;s being clicked &#8211; that&#8217;s what the line with onClick does. </p>
<p>Here&#8217;s another example presented without comments with similar data, with a slightly different ways to order the components.<br />
This time, the top level component is Dashboard, which has 2 Chart components, which each have several Bar components as children. Mousing over Bar components updates the state of the Dashboard components, which re-renders its Charts children and their Bar children.</p>
<p data-height="265" data-theme-id="0" data-slug-hash="RRLWQz" data-default-tab="js,result" data-user="jckr" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/jckr/pen/RRLWQz/">react dual bar chart</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/11/react-components/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Coding with React</title>
		<link>/2016/08/10/coding-with-react/</link>
		<comments>/2016/08/10/coding-with-react/#respond</comments>
		<pubDate>Wed, 10 Aug 2016 19:16:47 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[d3]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1739</guid>
		<description><![CDATA[This article is part of my series Visualization with React. Previous article: An ES6 primer Setting things up in Codepen In the last two articles of the series, I&#8217;ll cover how to get a real React coding environment going, but to start dabbling, playgrounds like jsFiddle or codepen are great. I&#8217;m partial to codepen. When <a class="read-more" href="/2016/08/10/coding-with-react/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script>This article is part of my series <a href="/2016/08/09/visualization-with-react/">Visualization with React</a>. Previous article: <a href="/2016/08/09/an-es6-primer/">An ES6 primer</a></p>
<h1>Setting things up in Codepen</h1>
<p>In the last two articles of the series, I&#8217;ll cover how to get a real React coding environment going, but to start dabbling, playgrounds like <a href="https://jsfiddle.net/reactjs/69z2wepo/">jsFiddle</a> or <a href="http://codepen.io/">codepen</a> are great. I&#8217;m partial to codepen. When you create a new pen, you still have a couple of options to set up before you can start creating React code: <img src="http://jckr.github.io/blog/assets/visualization-with-react/react-settings-in-codepen.png" alt="" /></p>
<p>In the Settings / Javascript / quick-add section (the drop-down at the bottom left) please choose React, then React DOM.</p>
<p>All of the code examples of articles 1, 3, 4, and 5 can be found in this <a href="http://codepen.io/collection/XdEpyp/">codepen collection</a>.</p>
<h1>Creating elements</h1>
<p class="codepen" data-height="265" data-theme-id="0" data-slug-hash="pbjpOm" data-default-tab="result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/pbjpOm/">React simple scatterplot</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>In this first React example, we&#8217;re going to create a couple of very simple elements and render them. Let&#8217;s start by the end: <code>ReactDOM.render(myDiv, document.querySelector('#root'));</code> We use ReactDOM.render to, well, render something we have created (myDiv) somewhere in our document (on top of what corresponds to the &#8216;#root&#8217; selection. We conveniently have a div with the id &#8220;root&#8221; in the HTML part of the pen). That&#8217;s it! we&#8217;ve output something using React. While the syntax can appear a bit daunting, it really does one simple thing: take what you&#8217;ve made and put it where it should be. But what&#8217;s that myDiv? To find out, let&#8217;s look at the first 2 lines of our code. <code>const mySpan = React.createElement('span', {style: {fontFamily: 'sans-serif'}}, 'hello React world'); const myDiv = React.createElement('div', {className: 'my-div'}, mySpan);</code> Oh, so before there was a myDiv, there was a mySpan. MySpan is a React element, the building brick of the React eco system. To create it, we use React.createElement which is the workhorse of React. React.createElement takes three arguments: the type of React element we are creating, its properties, and its content. The type of element can be any HTML or SVG element, and we&#8217;ll see later that we can also make our own. The second argument is the properties. It&#8217;s an object. In the d3 world, the properties could be what goes in the attr method. So when you create an SVG element like a rect, its properties could include things like x, y, width and height. In d3, style is treated slightly differently. This is also the case in React. When using React.createElement with an HTML or SVG element, that could be styled using CSS, you can use a style property to pass a style object. That style object contains all CSS properties you want to apply to the object, but instead of hyphenating them, they are written in camel case (so font-family, for instance, becomes fontFamily). The third argument is content: it can either be a string, a single React element, or an array of React elements. In the first line (mySpan) we&#8217;ve used a string. So, this first line created a React element which is a span, which contains &#8220;hello React world&#8221;, and which has a simple style applied to it. In the second line, we create a second React element. Again, React.createElement takes three arguments: type of element (now it&#8217;s an HTML div), properties and content. Instead of providing a string, we can pass another React element, such as mySpan that we created above. And that&#8217;s it! we&#8217;ve rendered something using react.</p>
<h1>Creating elements from data</h1>
<p>In the example above, we&#8217;ve used React.createElement with two kind of content: a string and another React element. But I mentioned that there was a third possibility: an array of React elements. If you&#8217;re familiar with d3, you might think: in d3, I could do that from an array of data. The idea in React is pretty similar, only, instead of using select / selectAll / data / enter / append, we can just create our array.</p>
<p class="codepen" data-height="350" data-theme-id="0" data-slug-hash="ezZrOM" data-default-tab="result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/ezZrOM/">React simple scatterplot</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>One simple way to do that is to use map: <code>myArray.map(d =&gt; React.createElement(...))</code>. This is exactly what we are doing in the snippet of code above. This uses the birthdeathrates dataset, one of the example files provided with R (number of births and deaths per thousand people per year in various countries.) The interestingness happens here:</p>
<pre class="brush: jscript; title: ; notranslate">birthdeathrates.map(
  (d, i) =&gt; React.createElement('div', {
    'key': i,
    'style': {
       background: '#222',
       borderRadius: 5,
       height: 10,
       left: 5 * d.birth,
       top: 300 - 5 * d.death,
       position: 'absolute',
       width: 10,
       opacity: .2}
  })
)</pre>
<p>In the properties that I pass, some depend on the underlying data. This is a mapping so it&#8217;s going to return something for each item of the array. Each item of the array is represented by d, and has the birth, death and country properties. In left and top, we use a calculation based on these properties. And for each item, we get a React element created with these calculations. This isn&#8217;t unlike what we&#8217;d had in d3 if we had written:</p>
<pre class="brush: jscript; title: ; notranslate"> ...
 .selectAll('div')
 .data(birthdeathrates)
 .enter()
 .append('div')
 .style({ ..., left: d =&gt; 5 * d.birth, top: d =&gt; 300 - 5 * d.death, ...})
</pre>
<p>Take note of the key property in the react code. This is necessary when you create many elements using map (well not really necessary but strongly recommended, you&#8217;d get a warning if you don&#8217;t use it). This is used so that if for some reason your parent element has to re-render, each child element will only be re-rendered if needed. If you&#8217;ve followed this far, you are now capable of doing things in React the critical part of what you were doing with d3: creating elements out of data. You might wonder: but does it work for svg? yes, and the logic is exactly the same:</p>
<p class="codepen" data-height="373" data-theme-id="0" data-slug-hash="MeyVLE" data-default-tab="result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/MeyVLE/">React simple scatterplot</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<h1>Introducing JSX</h1>
<p data-height="373" data-theme-id="0" data-slug-hash="YWqLwz" data-default-tab="result" data-user="jckr" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/jckr/pen/YWqLwz/">React simple scatterplot JSX</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>At this point you might think: all of this is great, but typing React.createElement all the time is kind of cumbersome. Many people do too, and there are a number of ways to not do that. The most popular, and the one in use at Facebook, is JSX. I personally use <a title="r-dom" href="http://https://github.com/uber/r-dom">r-dom</a> most of the time, but since JSX is definitely the most common way to write React, now that you have a feel for what React.createElement does, it&#8217;s not unreasonable to continue with JSX.</p>
<p>The main idea of JSX is that you&#8217;ll write tags in your javascript. Instead of writing:</p>
<pre class="brush: jscript; title: ; notranslate">
React.createElement('type', {property1: value1, property2: value2, ...}, content)
</pre>
<p>you would write:</p>
<pre class="brush: plain; title: ; notranslate">
&lt;type property1={value1} property2={value2} ...&gt;
content
&lt;/type&gt;
</pre>
<p>So in our previous example, we create an SVG element that has a width and a height property.<br />
We&#8217;d write:</p>
<pre class="brush: jscript; title: ; notranslate">
const svg = &lt;svg height={300} width={300}&gt;
//... content ...
&lt;/svg&gt;
</pre>
<p>Inside the opening tag, we list all the properties and we give them a value. This isn&#8217;t unlike what you&#8217;d see when you watch the source of an HTML file.<br />
The value of the properties go inside curly braces, unless they are a string. For length-type values (ie height, width, top, left, font-size&#8230;) if a number is provided, it&#8217;s assumed it&#8217;s in px.<br />
If the element we create has other elements inside of it, there has to be an opening and a closing tag (ie &lt;element&gt; and &lt;/element&gt;). But if there isn&#8217;t, there can be a single tag (ie &lt;element /&gt;)<br />
Inside our svg, we have a bunch of circle elements. They are of the form:</p>
<pre class="brush: plain; title: ; notranslate">
&lt;circle 
  cx={5 * d.birth}
  cy={300 - 5 * d.death}
  key={i}
  r={5}
  style={{
    fill: '#222',
    opacity: .2
  }}
/&gt;</pre>
<p>inside our curly braces, we can have calculations. And since there are no elements inside our circles, we don&#8217;t have to have both a &lt;cirlce&gt; and a &lt;/circle&gt; tag, although we could; we can have a single &lt;circle /&gt; tag.</p>
<p>That&#8217;s it in a nutshell, more details can be found <a title="here" href="https://facebook.github.io/react/docs/jsx-in-depth.html">here.</a><br />
Now you might think: if I type that in my text editor, I&#8217;m almost certain I&#8217;ll get an error! Indeed, behind the scenes, there has to be some transformation for your browser to understand JSX. This magical operation is called <em>transpilation</em>. Transpilation is just what you&#8217;d hope it is, it turns code written how you like into code that the browser can interpret flawlessly. The flip side is that&#8230; well, you have to transpile your code.<br />
If you work into environments like codepen or JsFiddle, they can take care of this for you. The most common transpiler is Babel. Babel turns your code into ES2015 compliant javascript (that is, before ES6). So the added bonus is that we can use any ES6 feature without wondering whether the user browser supports it or not. Most ES6 features are supported by the latest versions of many browswers, but there&#8217;s no guarantee that your users will run your favorite browser, let alone its latest version.<br />
If you want to do this on your own, you&#8217;ll have to set up a build environment, we&#8217;ll cover this in the last two articles.</p>
<p>&nbsp;</p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/10/coding-with-react/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>An ES6 primer</title>
		<link>/2016/08/09/an-es6-primer/</link>
		<comments>/2016/08/09/an-es6-primer/#respond</comments>
		<pubDate>Tue, 09 Aug 2016 20:20:38 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[data visualization]]></category>
		<category><![CDATA[javascript]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1733</guid>
		<description><![CDATA[This article is part of my series Visualization with React. Previous article: React and D3 &#8211; similarities and differences In this guide, I will use ES6 notation whenever I would normally do it in my day job. There are many, many differences in ES6 compared to previous versions of javascript and that can be daunting. <a class="read-more" href="/2016/08/09/an-es6-primer/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>This article is part of my series <a href="/2016/08/09/visualization-with-react/">Visualization with React</a>. Previous article: <a href="/2016/08/09/d3-and-react-similarities-and-differences/">React and D3 &#8211; similarities and differences</a></p>
<p>In this guide, I will use ES6 notation whenever I would normally do it in my day job. There are many, many differences in ES6 compared to previous versions of javascript and that can be daunting. But in this time and age, a lot of code you can run into is going to be written in ES6, so a cursory knowledge of some of its features can go a long way.<br />
Here are the features I use most often:</p>
<h1>Fat arrows functions</h1>
<p>ES6 introduces a new, more concise way to write functions. Instead of writing:</p>
<pre class="brush: jscript; title: ; notranslate">function add10(d) {return d + 10;}</pre>
<p>one can write:</p>
<pre class="brush: jscript; title: ; notranslate">var add10 = d =&gt; d + 10</pre>
<p>Technically, <a href="http://stackoverflow.com/questions/32535110/what-are-the-differences-if-any-between-es6-arrow-functions-and-functions-boun">those two forms are not completely equivalent</a>. The main difference is if you need to use the context keyword <em>this</em>. But in most cases, fat arrows are a much more concise, and therefore more legible syntax.</p>
<p>To do a function which takes more than 1 argument, wrap them in parentheses like so:</p>
<pre class="brush: jscript; title: ; notranslate">(a, b) =&gt; a + b</pre>
<p>For a function with several statements, you must use curly braces like a regular function, and use return if needs be:</p>
<pre class="brush: jscript; title: ; notranslate">d =&gt; {
  console.log(d);
  return d;
}</pre>
<p>For a function that returns an object, wrap that object in parentheses to avoid confusing it with the previous form:</p>
<pre class="brush: jscript; title: ; notranslate">d =&gt; ({key: d})</pre>
<h1>const and let</h1>
<p>Before ES6, to declare variables, you could only use the var keyword.</p>
<pre class="brush: jscript; title: ; notranslate">var a;
var b = 10;</pre>
<p>In ES6, you can declare variables using const or let. When you use const, the variable cannot be reassigned:</p>
<pre class="brush: jscript; title: ; notranslate"> const a; // error - a must be assigned a value </pre>
<pre class="brush: jscript; title: ; notranslate"> const b = 1;
b = 2; // error - b can no longer be reassigned</pre>
<p>Variables declared with let can be reassigned.</p>
<pre class="brush: jscript; title: ; notranslate"> let a; // ok
a = 10; // ok
a = 20; // still no error</pre>
<p>const and let are more expressive than var, because they specify whether we plan to change the value of a variable or not. They have another advantage: they are scoped. They can be used inside of an if branch, or a for loop, and not be accessible outside of it. Conversely, var are not scoped &#8211; they are available everywhere within the function where they are declared, or globally if declared outside of a function.<br />
So, there&#8217;s no reason to ever use the var keyword in ES6.</p>
<h1>Spread operator</h1>
<p>In ES6,if you have an array inside another array, you can replace that array with its items in sequence using the spread operator. An example would make this clearer:</p>
<pre class="brush: jscript; title: ; notranslate">
const a = [1, ...[2, 3, 4]]; // [1, 2, 3, 4].
</pre>
<p>That may seem like not much but it&#8217;s super versatile and useful. For instance, instead of concatenating two arrays, you can write:</p>
<pre class="brush: jscript; title: ; notranslate">
const a = [1, 2];
const b = [3, 4]
const c = [...a, ...b]; // [1, 2, 3, 4]
</pre>
<p>Interestingly, it works with empty arrays:</p>
<pre class="brush: jscript; title: ; notranslate"> 
const a = [1, 2];
const b = [];
const c = [...a, ...b]; // [1, 2]
</pre>
<p>But not with primitive literals (numbers, etc)</p>
<pre class="brush: jscript; title: ; notranslate">
const a = [1, 2];
const b = 3;
const c = [...a, ...b]; // error
</pre>
<p>Instead of pushing an item to the end of an array, you can also use the spread operator:</p>
<pre class="brush: jscript; title: ; notranslate">
const a = [1, 2];
const b = 3;
const c = [...a, b]; // added benefit - creates a new array instead of changing it in place.
</pre>
<p>Note the difference between these 2.<br />
[&#8230;[1,2], <strong>3</strong>] will work;<br />
[&#8230;[1, 2], <strong>&#8230;3</strong>] will not. </p>
<p>Composing arrays like this can be conditional!</p>
<pre class="brush: jscript; title: ; notranslate">
const a = [1, 2];
const b = 3;
const condition = false;
const c = [...a, ...(condition ? [b] : [])] // [1, 2];
</pre>
<p>What just happened? just like above, but we applied the spread operator to the expression which is in parentheses. If the condition were true, that expression would be equivalent to [b]. But since it&#8217;s false, it is equivalent to an empty array. </p>
<p>An experimental feature of ES7 extends the spread operator to objects.</p>
<pre class="brush: jscript; title: ; notranslate">
const obj = {key: 'a'};
const newObj = {...obj, value: 1}; // {key: 'a', value: 1}
</pre>
<h1>Destructuring assignment</h1>
<p>You can do more stuff with objects in ES6. Destructuring assignment covers a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">number of nifty features</a> but here are the two I use the most.</p>
<pre class="brush: jscript; title: ; notranslate">const obj = {key: 'a', value: 123};
// you can read several properties from an object at once and assign them to variables:
const {key, value} = obj;
console.log(key, value); // 'a', 123</pre>
<p>Before ES6, you had to write a function like this:</p>
<pre class="brush: jscript; title: ; notranslate">function div(num, den) {return num / den;}
div(6, 2); // 3;
div(2, 6); // 0.333333 order of the parameters matters!
div(3); // NaN - can't forget an argument! 
</pre>
<p>In ES6, we can expect the function as argument to take an object and access its properties:</p>
<pre class="brush: jscript; title: ; notranslate">
function div({num, den = 1}) {return num / den;}
div({num: 6, den: 2}); // 3
div({den: 2, num: 6}); // still 3
div({num: 3}); // still 3 - den has a default value
</pre>
<p>Using an object, we don&#8217;t have to remember in what order the function parameters have to be provided.</p>
<h1>Wrapping it all together</h1>
<p>what&#8217;s another form for the last function I wrote?</p>
<pre class="brush: jscript; title: ; notranslate">const div = ({num, den = 1}) =&gt; num / den;</pre>
<p>In the next article in the series, <a href="/2016/08/10/coding-with-react/">Coding with React</a>, we will finally start to write some React code.</p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/09/an-es6-primer/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>D3 and React &#8211; similarities and differences</title>
		<link>/2016/08/09/d3-and-react-similarities-and-differences/</link>
		<comments>/2016/08/09/d3-and-react-similarities-and-differences/#comments</comments>
		<pubDate>Tue, 09 Aug 2016 04:13:37 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[d3]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1722</guid>
		<description><![CDATA[Previous article: Visualization with React d3, meet cousin React Let&#8217;s not sugarcoat it: working with React is more complicated than with plain vanilla javascript. There are a few additional notions which may sound complex. But the good news is that if you come from the d3 world, there are many concepts which are similar. Visualization <a class="read-more" href="/2016/08/09/d3-and-react-similarities-and-differences/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script><br />
<a href="/2016/08/09/visualization-with-react/">Previous article: Visualization with React</a></p>
<h1>d3, meet cousin React</h1>
<p>Let&#8217;s not sugarcoat it: working with React is more complicated than with plain vanilla javascript. There are a few additional notions which may sound complex. But the good news is that if you come from the d3 world, there are many concepts which are similar. Visualization on the web is, at its core,<strong> transforming a dataset into a representation</strong>. That dataset is probably going to be an array, and at some point the framework will loop through the array and create something for each element of the array. For instance, if you want to make a bar chart, you probably will have at some point an array with one item that corresponds to each bar, which has a value that corresponds to its length. Looping through the array, each item is turned into a rectangle whose height depends on that value. That logic, which is at the core of d3 with <a href="http://jckr.github.io/blog/blog/2013/03/05/d3-tutorial-at-strata-redux/">selections</a>, is also present in React. In d3, <strong>visualizations are essentially hierarchical.</strong> We start from an SVG element (probably), add to it elements like groups, which can hold other elements. To continue with our bar chart example, our chart will have several data marks attached to it (the bars), and there&#8217;s a hierarchical relation between them: the chart contains those marks. Our chart could be part of a dashboard that has several charts, or part of a web page that has other information. At any rate, in the d3 world, everything we create is added to a root element or to elements we create and arranged in a tree-like hierarchy. This is also the case in React, with a difference: the world of React is mostly structured into components. When that of d3 is mostly made of DOM elements like HTML or SVG elements, that of React is made of components. A React component is a part of your end result. It can be as small as a DOM element, or as big as the whole application. And it can have component children. So, components are logical ways to package your application. Components are created with modularity and reusability in mind. For instance, I can create a bar chart component in React, and the next time I have a bar chart to make, I can just reuse the exact same component. I can also create components to make axes or the individual bars in the chart, which my bar chart component will use. But the next time I need a bar chart, I wouldn&#8217;t have to think about it. In contrast, if I want to create another bar chart in d3, I probably have to recreate it from scratch and decide manually what happens to all the SVG or HTML elements that constitute the bar chart.</p>
<h1>You say dAYta, I say da-tah</h1>
<p>One fundamental way in which d3 and React differ is by how they treat data. If you read about React, you may find fancy terms like one-way data binding. In how many ways the data is bound in d3 is not something which is on top of our head when we create visualization so that might sound confusing. In d3, an element can modify the data which is associated to it. I&#8217;ve used it so many times.</p>
<p class="codepen" data-height="265" data-theme-id="0" data-slug-hash="XKmpYo" data-default-tab="result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/XKmpYo/">React simple scatterplot</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>These bars have been made with a very simple dataset shown below them. If you click on the bars, the underlying data will change and the representation will change as well. In the world of React, when properties are passed to a component, they cannot be changed. That&#8217;s what one-way binding means. Data in React flows unidirectionally. Once it&#8217;s defined, it determines the way all components should be displayed. In certain events, a parent component can pass different properties to its children component and they may be re-rendered (we&#8217;ll see this in just a moment). But the important part is that properties passed to a component can never be changed. You may wonder: why is that even a good thing? React makes it impossible to do things! yes, but in the process it also makes things much safer. If properties can&#8217;t be changed, it also means that they can&#8217;t be altered by something we hadn&#8217;t thought of. Also, it makes it much easier to work on components independently: one team mate could make a bar chart component while her colleague makes a line chart. They don&#8217;t really need to know the inner working of the other component, and they know that nothing unexpected will disturb the way their component function.</p>
<h1>The state of affairs</h1>
<p>Components of React have a really powerful feature which doesn&#8217;t explicitly exist in d3: the state. The state represents the current status of a component. Here&#8217;s a simple switch component:</p>
<p class="codepen" data-height="265" data-theme-id="0" data-slug-hash="mEeRvr" data-default-tab="result" data-user="jckr" data-embed-version="2">See the Pen <a href="http://codepen.io/jckr/pen/mEeRvr/">React simple scatterplot</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>We want to record the fact that the switch can be turned on or off. Here&#8217;s how it should work: First we create our switch component, and it&#8217;s supposed to be off. Then, if the user clicks it, it becomes on if it were off and vice-versa. And it should also be redrawn, to reflect that it&#8217;s been turned on (or off). The state does all that. It records the current status of the component. Technically, it&#8217;s an object with properties, so it can save a lot of information, not just a simple true or false value. The other great thing about the state is that if it changes, then the component is re-rendered. Rendering a component could require rendering children component, and they may be re-rendered as well. So with the state and properties, we have a powerful framework to handle events and whatever may happen to our app. If there&#8217;s an event we care about, it can change the state of a component, then, all of the children components may be re-rendered. And there&#8217;s no other way to redraw them. This is in contrast with plain d3 where anything goes &#8211; anything can change anything, data can be used to render elements, the underlying data can be changed without changing the element, the element can be transformed without changing the underlying data.</p>
<p>State is an important notion in computer science. In d3, it&#8217;s just doesn&#8217;t have a more formal representation than all the variables in your code.</p>
<p>In the next article in the series, <a href="/2016/08/09/an-es6-primer/">an ES6 Primer</a>, we will look in some useful ES6 features for React. </p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/09/d3-and-react-similarities-and-differences/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Visualization with React</title>
		<link>/2016/08/09/visualization-with-react/</link>
		<comments>/2016/08/09/visualization-with-react/#comments</comments>
		<pubDate>Tue, 09 Aug 2016 04:07:56 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[d3]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1726</guid>
		<description><![CDATA[Some back story&#8230; In what seemed a lifetime ago now, I wrote tutorials to help people get started with Protovis as I learned it myself (it is indeed a lifetime away since Protovis is dead and buried for all intents and purposes). And a few years ago, I did the same for d3 as this <a class="read-more" href="/2016/08/09/visualization-with-react/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<h1>Some back story&#8230;</h1>
<p>In what seemed a lifetime ago now, I wrote tutorials to help people get started with Protovis as I learned it myself (it is indeed a lifetime away since Protovis is dead and buried for all intents and purposes). And a few years ago, I did the same for d3 as this started to become the most powerful visualization framework and for which documentation was still scarce. I wrote these tutorials to help me learn, but since then I have met many people who found them useful which blew my mind. By documenting my learning, I got noticed by Facebook and travelled 9000 miles to a new life.</p>
<p>At Facebook, I had some loosely-defined data visualization explorer role. While I joined during the infancy of React, I didn&#8217;t feel super comfortable using it then &#8211; I felt more effective writing one-off d3 applications. Eventually, I moved on and am now working at Uber as a fully-fledged <a href="https://eng.uber.com/data-viz-intel/">data visualization engineer</a>. I work almost exclusively with dashboards, which have a pretty elaborate UI.</p>
<p>Like in many other companies, at Uber, we use React for our web applications, including our visualizations, dashboards and maps. Increasingly, React is becoming the lingua franca of visualization: more than a tool that allows one to draw data, a mindset that informs how one should think a visualization. React is no longer a young library &#8211; the initial public release dates back from May 2013, and its very first application at Facebook was visualization (my first Facebook project, pages insights). There&#8217;s already many, many learning resources and tutorials for React. What I&#8217;ll try to do here is to show how React can be used for visualization: hopefully, this will be useful both for people who come from d3 and who&#8217;ve never worked with a web framework before, and for people who are familiar with React but who don&#8217;t know visualization well. That won&#8217;t be a complete and exhaustive guide, more a way to get started with references on how to go further.</p>
<h1>The articles</h1>
<p>I&#8217;ve structured this guide in 7 parts, and I&#8217;ll publish one per day:</p>
<ol>
<li><a href="http://jckr.github.io/blog/blog/2016/08/09/d3-and-react-similarities-and-differences/">React vs D3</a>, where we&#8217;ll explore similarities and differences between these two frameworks.</li>
<li><a href="/2016/08/09/an-es6-primer/">An ES6 primer</a>. I have written all the examples in good, sensible, modern ES6 javascript, because as of 2016 this is probably the most common syntax. Without going too deep into the details, I&#8217;ll explain what parts of the language I used for the examples, and how they differ from ES5.</li>
<li>Gentle introduction to <a href="/2016/08/10/coding-with-react/">coding with React</a>, where we&#8217;ll explore the high-level concepts of the framework and see how we can create visual elements from data. We&#8217;ll end on a presentation of JSX, a flavor of Javascript used to write React applications, which I&#8217;ll also use for most of the examples for the same reasons as ES6 &#8211; because it&#8217;s the most widespread way of writing React code today.</li>
<li><a href="/2016/08/11/react-components/">React components</a>, the most important concept in React and the building blocks of React applications.</li>
<li><a href="/2016/08/13/beyond-rendering/">Beyond rendering</a>. We&#8217;ll look at the React concept of lifecycle methods, and also how we can use d3 within React components.</li>
<li><a href="/2016/08/17/the-big-leagues/">Creating a React visualization web app</a> &#8211; using what we&#8217;ve seen, and two libraries &#8211; Facebook&#8217;s <a href="https://github.com/facebookincubator/create-react-app">create-react-app</a> and Uber&#8217;s <a href="https://github.com/uber/react-vis/">React-vis</a>, we&#8217;ll create a small standalone React visualization that can be deployed on its own website.</li>
<li><a href="/2016/08/17/the-big-leagues/">The big leagues</a> &#8211; in that last part, we&#8217;ll write together a more complex visualization with live data and several components interacting with one another.</li>
</ol>
<h1>The code</h1>
<p>The examples of parts 1-5 can be found on <a href="http://codepen.io/collection/XdEpyp/">codepen</a>. I&#8217;ll add link to examples of part 6 and 7 when they go live.</p>
]]></content:encoded>
			<wfw:commentRss>/2016/08/09/visualization-with-react/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>You may not need d3</title>
		<link>/2015/05/19/you-may-not-need-d3/</link>
		<comments>/2015/05/19/you-may-not-need-d3/#comments</comments>
		<pubDate>Tue, 19 May 2015 21:15:56 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[charts]]></category>
		<category><![CDATA[d3]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[tips]]></category>
		<category><![CDATA[canvas]]></category>
		<category><![CDATA[d3js]]></category>
		<category><![CDATA[DOM]]></category>
		<category><![CDATA[library]]></category>
		<category><![CDATA[svg]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1664</guid>
		<description><![CDATA[If you&#8217;re working on visualization on the web, the go-to choice is to use d3js (or a higher-level library). d3js is powerful and versatile. The best proof of that is the lead author of d3, Mike Bostock, worked until recently at the New York Times which many, including myself, consider the ultimate reference in terms of <a class="read-more" href="/2015/05/19/you-may-not-need-d3/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>If you&#8217;re working on visualization on the web, the go-to choice is to use <a href="http://d3js.org/">d3js</a> (or a higher-level library). d3js is powerful and versatile. The best proof of that is the lead author of d3, Mike Bostock, worked until recently at the New York Times which many, including myself, consider the ultimate reference in terms of information graphics. At the NYT and elsewhere, d3js has powered breathtaking projects.</p>
<p>d3js was built as a successor to protovis. Protovis was a slightly higher-level library than d3js, more specialized in data graphics, and designed with the assumption that it could be used with little or no programming experience. And indeed this was true. When I started using protovis in 2009, my javascript skills were limited, and so I learned by deconstructing and recombining the examples. I kept on doing that when d3 came along &#8211; learning through examples. And the d3 examples, like those in protovis before, were short and standalone, demonstrating how easy it was to create something with a few lines of code.</p>
<p>d3js requires more technical knowledge than protovis did to get started, but not much. However, it is much more versatile &#8211; no longer constrained to charts and maps, it can handle a lot of the front-end functionalities of a web site. And so, it is possible to make visualizations by:</p>
<ul>
<li>learning how to do stuff in d3js,</li>
<li>learning the essential javascript that you need to run d3js, as needed (i.e. variables, if-then statements, array methods&#8230;)</li>
<li>then, learning through doing, and obtain a feeling for how SVG, HTML and the Document Object Model works.</li>
</ul>
<p>This approach is actually very limiting.</p>
<p>You would create much more robust code by:</p>
<ul>
<li>learning javascript,</li>
<li>learning SVG/HTML/DOM,</li>
<li>then learning and appreciate d3 logic.</li>
</ul>
<p>That would give you the choice when to use a d3js method, when to use another library (past, present or future), or when to use native javascript.</p>
<p>The point of this article is to go through the main functions of d3js and see how they can be replicated without using a library. As of this writing, I am convinced that using d3js is the most sensible way to handle certain tasks (though this may change in the future). In almost any case I can think of, even when it&#8217;s not the most efficient way to do so, using the d3js approach is the most convenient and the easiest from the developer&#8217;s perspective.  But I also believe it&#8217;s really important to know how to do all these things without d3js.</p>
<p>This will be a very long post. I&#8217;m trying to keep it as structured as possible so you can jump to the right section and keep it as a reference. This also assumes you have a certain familiarity with d3js and javascript &#8211; this is not an introductory post.</p>
<p>I&#8217;ve divided it in 4 parts:</p>
<ul>
<li>Tasks that you really don&#8217;t need d3js for. And ok, you may want to use it regardless. But here&#8217;s how to do those things without it. (manipulating DOM elements)</li>
<li>interlude: a reflexion on d3js data binding. Do you really need that?</li>
<li>Tasks which are significantly easier with d3js (working with external data, animation)</li>
<li>Tasks where as of now, d3js is clearly superior to anything else (scales, array refactoring, map projections, layouts).</li>
</ul>
<h2>Selecting and manipulating elements</h2>
<p>At the core of d3js is the notion of selection. In d3js, you select one or several elements which become a selection object. You can then do a variety of things:</p>
<ul>
<li>join them with data, which is also an essential tenet of the d3 philosophy,</li>
<li>create or delete elements, especially in relation to the data you may have joined with their parent,</li>
<li>manipulate these elements by changing their attributes and their style, including in function of the data joined with each of them,</li>
<li>attach events listeners to those elements, so that when events happen (ie somebody clicks on a rectangle, or change the value of a form) a function might be triggered,</li>
<li>animate and transform those elements.</li>
</ul>
<h3>Selecting elements and parsing the DOM</h3>
<h4>d3 selection objects vs Nodes, HTML NodeList vs HTML LiveCollections</h4>
<p>When you select something with d3js, using methods such as d3.select() or d3.selectAll(), this returns a d3 selection object. The selection object is a subclass of the javascript object Array &#8211; <a href="http://bost.ocks.org/mike/selection/">check here for all the nitty-gritty</a>. The gist of it is that d3 selection objects can then be manipulated by d3 methods, such as .attr() or .style() to assign attributes or styles.</p>
<p>By contrast, the DOM is made of Node objects. The root of the DOM, the Document Object Model, is a special Node called Document. Nodes are organized in a tree-like structure: Document has children, which may have children etc. and encompass everything in the page. The Node objects are really the building blocks of a web page. When an element is added, be it an HTML element like a &lt;div&gt; or an SVG element like a &lt;rect&gt;, a new Node is created as well. So d3js has to interact with Node objects as well. d3 selection objects are tightly connected to their corresponding Node objects.</p>
<p>However, with &#8220;vanilla&#8221; javascript, you can <em>directly</em> access and manipulate the Node objects.</p>
<h4>d3.select / d3.selectAll vs document.querySelector / document.querySelectorAll</h4>
<p>In d3js, you parse the document using d3.select (to select one object) or d3.selectAll. The argument of this method is a <a href="https://github.com/mbostock/d3/wiki/Selections">CSS3 selector</a>, that is, a string which is very similar to what could be found in a CSS style sheet to assign specific styles to certain situations. For instance, &#8220;g.series rect.mark&#8221; will match with all the rectangles of the class &#8220;mark&#8221; which are descendants of the SVG g groups of the class series.</p>
<p>When d3js was introduced in 2011, javascript didn&#8217;t have an equivalent syntax &#8211; instead you could select elements by class, or by id, or by tag name (more on that in a minute). Things have changed however and it is now possible to use CSS3 selectors using document.querySelector (which will return just one node) or document.querySelectorAll (which will return an HTML NodeList).</p>
<p>An HTML NodeList is a special object which is kind of like an array of Node objects, only it has almost no array methods or properties. You can still access its members using brackets, and get its length, but that&#8217;s it.</p>
<p>I wrote document.querySelectorAll, because you can use this method from the document, but you can use it from any Node. Those two snippets of code are parallel:</p>
<pre class="brush: jscript; title: ; notranslate">
var svg = d3.select(&quot;svg&quot;); // svg is a d3 selection object
var g = svg.selectAll(&quot;g&quot;); // g is a d3 selection object
</pre>
<pre class="brush: jscript; title: ; notranslate">
var svg = document.querySelector(&quot;svg&quot;); // svg is a Node
var g = svg.querySelectorAll(&quot;g&quot;); // g is a NodeList
</pre>
<h4> Getting elements by class name, ID, tag name, name attribute</h4>
<p>d3js doesn&#8217;t have a special way to get all descendants of a selection of a certain class, of a certain ID, etc. The CSS3 selector syntax can indeed handle all those cases, so why have a separate way?</p>
<p>By contrast, javascript pre-2011 didn&#8217;t have a querySelectorAll method, and so the only way to parse the document was to use more specific method, like document.getElementsByClassName().</p>
<p>document.getElementsByClassName() retrieves all descendants of a certain class. document.getElementsByName() retrieves elements with a certain &#8220;name&#8221; attribute (think forms). documents.getElementsByTagName() gets all descendants of a certain type (ie all &lt;div&gt;s, all &lt;rect&gt;s, etc.).</p>
<p>What&#8217;s interesting about that is that what is returned is not an HTML NodeList like above with querySelectorAll, but another object called HTML <strong>Live Collection</strong>. The difference is that matching elements are created after, they would still be included in the Live Collection.</p>
<pre class="brush: jscript; title: ; notranslate">
var svg = d3.select(&quot;svg&quot;);
svg.selectAll(&quot;rect&quot;).data([1,2,3]).enter().append(&quot;rect&quot;);
var mySelection = svg.selectAll(&quot;rect&quot;); // 3 elements
mySelection[0].length // 3
svg.append(&quot;rect&quot;);
mySelection[0].length // 3
mySelection = svg.selectAll(&quot;rect&quot;); // re-selecting to update it
mySelection[0].length // 4
</pre>
<pre class="brush: jscript; title: ; notranslate">
var svg = document.querySelector(&quot;svg&quot;);
var ns = &quot;http://www.w3.org/2000/svg&quot;;
var i;
for (i = 0; i &lt; 3; i++) {
  var rect = document.createElementNS(ns, &quot;rect&quot;); // we'll explain creating elements later
  svg.appendChild(rect);
}
var mySelection = svg.getElementsByTagName(&quot;rect&quot;); // 3 elements
var rect = document.createElementNS(ns, &quot;rect&quot;);
svg.appendChild(rect);
mySelection.length // 4 - no need to reselect to update
</pre>
<p>How about IDs? there is also the getElementById (no s at elements!) which only retrieve one element. After all, IDs are supposed to be unique! if no elements match, getElementById returns null.</p>
<h4>Children, parents, siblings&#8230;</h4>
<p>Truth be told, if you can use selectors from the root, you can access everything. But sometimes, it&#8217;s nice to be able to go from one node to its parents or its children or its siblings, and d3js doesn&#8217;t provide that. By contrast, the Node object has an interface that does just that &#8211; node.childNodes gets a nodeList of child nodes, node.parentNode gets the parent node, node.nextSibling and node.previousSibling get the next and previous siblings. Nice.</p>
<p>However, most often you will really be manipulating elements (more on that in a second) and not nodes. What&#8217;s the difference? all Elements are Nodes, but the reverse is not true. One common example of Node which is not an Element is text content.</p>
<p>To get an Element&#8217;s children, you can use the (wait for it) children property. The added benefit is that what you get through children is a LiveCollection (dynamic), while what you get through childNodes is a NodeList (static).</p>
<pre class="brush: jscript; title: ; notranslate">
var svg = document.querySelector(&quot;svg&quot;);
var ns = &quot;http://www.w3.org/2000/svg&quot;;
var i;
for (i = 0; i &lt; 3; i++) {
  var myRect = document.createElementNS(ns, &quot;rect&quot;); // we'll explain creating elements later
  svg.appendChild(rect);
}
// the variable myRect holds the last of the 3 &lt;rect&gt; elements that have been added
svg.childNodes; // a NodeList
myRect.parentNode; // the svg element
myRect.nextSibling; // null - myRect holds the last child of svg.
myRect.previousSibling; // the 2nd &lt;rect&gt; element
svg.firstChild; // the 1st &lt;rect&gt;. Really useful shorthand
svg.querySelector(&quot;rect&quot;); // also the 1st &lt;rect&gt;.
svg.children; // a LiveCollection
</pre>
<h2>Adding/reading attributes, styles, properties and events</h2>
<h4>Node, Element, EventTarget and other objects</h4>
<p>In d3 101, right after you&#8217;ve created elements (to which we&#8217;ll come in a moment), you can start moving them around or giving them cool colors like &#8220;steelblue&#8221; by using the .attr and .style methods.</p>
<p>Wouldn&#8217;t that be cool if we could do the same to Node objects in vanilla javascript!</p>
<p>Well, we can. Technically, you can&#8217;t add style or attributes to Node objects proper, but to Element objects. The Element object inherits from the Node objects and is used to store these properties. There is also an HTMLElement and SVGElement which inherit from the Element object.</p>
<p>If you look at the Chrome console at an SVG element like a rect, you can see, in the properties tab, all the objects it inherits from: Object, EventTarget, Node, Element, SVGElement, SVGGraphicsElement, SVGGeometryElement, SVGRectElement, rect.</p>
<p>All have different roles. To simplify: Node relates to their relative place in the document hierarchy, EventTarget, to events, and Element and its children, to attributes, style and the like. The various SVG-prefixed objects all implement specific methods and properties. When we select a Node object as we&#8217;ve done above with svg.querySelector(&#8220;rect&#8221;) and the like, note that there&#8217;s not a Node object on one side, then an Element object somewhere else, a distinct SVGGeometryElement, and so on and so forth. What is retrieved is <em>one single object</em> that inherits all methods and properties of Nodes, Elements, EventTargets, and so on and so forth, and, as such, that behaves like a Node, like an Element, etc.</p>
<h4>Setting and getting attributes</h4>
<p>You can set attributes with the Element.setAttribute method.</p>
<pre class="brush: jscript; title: ; notranslate">
var rect = document.querySelector(&quot;rect&quot;);
rect.setAttribute(&quot;x&quot;, 100);
rect.setAttribute(&quot;y&quot;, 100);
rect.setAttribute(&quot;width&quot;, 100);
rect.setAttribute(&quot;height&quot;, 100);
</pre>
<p>To be honest, I&#8217;m a big fan of the shorthand method in d3js,</p>
<pre class="brush: jscript; title: ; notranslate">
var rect = d3.select(&quot;rect&quot;);
rect.attr({x: 100, y: 100, width: 100, height: 100});
</pre>
<p>Also, the Element.setAttribute method doesn&#8217;t return anything, which means it can&#8217;t be chained (which may or may not be a bad thing, though it&#8217;s definitely a change for d3js users). It&#8217;s not possible to set several attributes in one go either, although one could create a custom function, or, for the daring, extend the Element object for that.</p>
<p>Likewise, the Element object has a getAttribute method :</p>
<pre class="brush: jscript; title: ; notranslate">
rect.getAttribute(&quot;x&quot;); // 100
</pre>
<h4>Classes, IDs and tag names</h4>
<p>Classes, IDs and tag names are special properties of the Element objects. It&#8217;s extremely common to add or remove classes to elements in visualization: my favorite way to do that is to use the classed method in d3js.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.select(&quot;rect&quot;).classed(&quot;myRect&quot;, 1)
</pre>
<p>In vanilla javascript, you have the concept of classList.</p>
<pre class="brush: jscript; title: ; notranslate">
document.querySelector(&quot;rect&quot;).classList; // [&quot;myRect&quot;]
</pre>
<p>ClassList has a number of cool methods. contains checks if this Element is of a certain class, add adds a class, remove removes a class, and toggles, well, toggles a class.</p>
<pre class="brush: jscript; title: ; notranslate">
document.querySelector(&quot;rect&quot;).classList.contains([&quot;myRect&quot;]); // true
document.querySelector(&quot;rect&quot;).classList.remove(&quot;myRect&quot;);
document.querySelector(&quot;rect&quot;).classList.add(&quot;myRect&quot;);
document.querySelector(&quot;rect&quot;).classList.toggle(&quot;myRect&quot;);
</pre>
<p>How about IDs ? with d3js, you&#8217;d have to treat them as any other property (rect.attr(&#8220;id&#8221;)). In vanilla javascript, however, you can access it directly via the id property of Element. You can also do that with the name property.<br />
Finally, you can use the tagName to get the type of element you are looking at (though you cannot change it &#8211; you can try, it just won&#8217;t do anything).</p>
<pre class="brush: jscript; title: ; notranslate">
document.querySelector(&quot;rect&quot;).id = &quot;myRect&quot;; // true
document.querySelector(&quot;rect&quot;).name; // undefined;
document.querySelector(&quot;rect&quot;).tagName; // &quot;rect&quot;
document.querySelector(&quot;rect&quot;).tagName = &quot;circle&quot;;
document.querySelector(&quot;rect&quot;).tagName; // &quot;rect&quot;
</pre>
<h4>Text</h4>
<p>Text is a pretty useful aspect of visualization! it is different from attributes or styles, which are set in the opening tag of an element. The text or content is what is happening in between the opening and closing tags of that element. This is why, in d3js, text isn&#8217;t set using attr or style, but either by the html method for HTML elements like DIVs or Ps, or by the text method for SVG elements like &lt;text&gt; and &lt;tspan&gt;.</p>
<p>Those have equivalent in the DOM + javascript world.</p>
<p>HTMLelements have the .innerHTML and outerHTML properties. The difference between the two is that outerHTML includes the opening and closing tags. innerHTML and outerHTML both return HTML, complete with tags and syntax.</p>
<p>SVG elements, however, don&#8217;t have access to this property, so they have to rely on the Node property textContent. HTML elements also have access to it, by the way. textContent returns just the plain text content of what&#8217;s in the element. All three properties can be used to either get or set text.</p>
<h4>Style</h4>
<p>In d3js, setting styles to elements is very similar to setting attributes, only we use the .style method instead of the .attr one. It&#8217;s so much similar that it&#8217;s a rather common mistake to pass as attribute what should be a style and vice-versa! Like with attributes, it is possible to pass an object with keys and values to set several style properties at once.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.selectAll(&quot;rect&quot;).style(&quot;fill&quot;, &quot;red&quot;);
d3.selectAll(&quot;rect&quot;).style({stroke: &quot;#222&quot;, opacity: .5});
</pre>
<p>In the world of DOM and vanilla javascript, style is a property of the HTMLElement / SVGElement objects. You can set style properties one at a time:</p>
<pre class="brush: jscript; title: ; notranslate">
rect = document.querySelector(&quot;rect&quot;);
rect.style.fill = &quot;red&quot;;
rect.style.stroke = &quot;#222&quot;;
rect.style.opacity = .5;
</pre>
<p>Technically, .style returns a CSSStyleDeclaration object. This object maintains a &#8220;live&#8221; link to what it describes. So:</p>
<pre class="brush: jscript; title: ; notranslate">
myStyle = rect.style;
rect.style.fill = &quot;yellow&quot;;
myStyle.fill; // &quot;yellow&quot;
</pre>
<p>Finally, the window object has a getComputedStyle method that can get the computed styles of an element, ie how the element is actually going to get drawn. By contrast, the style property and the d3js style method only affect the inline styles of an element and are &#8220;blind&#8221; to styles of its parents.</p>
<pre class="brush: jscript; title: ; notranslate">
myStyle = window.getComputedStyle(rect, null);
myStyle.fill; // &quot;yellow&quot;
</pre>
<h4>Adding and removing events</h4>
<p>In d3js, we have the very practical method &#8220;on&#8221; which let users interact with elements and can trigger behavior, such as transformations, filtering, or, really, any arbitrary function. This is where creating visualizations with SVG really shines because any minute interaction with any part of a scene can be elegantly intercepted and dealt with. Since in d3js, elements can be tied with data, the &#8220;on&#8221; methods takes that into account and passes the data element to the listener function. One of my favorite tricks when I&#8217;m developing with d3js and SVG is to add somewhere towards the end the line:</p>
<pre class="brush: jscript; title: ; notranslate">
d3.selectAll(&quot;*&quot;).on(&quot;click&quot;, function(d) {console.log(d);})
</pre>
<p>Which, as you may have guessed, displays the data item tied to any SVG element the user could click on.</p>
<p>In the world of the DOM, the object to which events methods are attached in the EventTarget. Every Element is also an EventTarget (and EventTarget could be other things that handle events too, like xhr requests).</p>
<p>To add an event listener to an element, use the addEventListener method like so.</p>
<pre class="brush: jscript; title: ; notranslate">
document
  .querySelector(&quot;rect&quot;)
  .addEventListener(&quot;click&quot;, function() {
     console.log(&quot;you clicked the rectangle!&quot;
   }, false);
</pre>
<p>The first parameter is the type of event to listen to (just as in &#8220;on&#8221;), the second is the listener function proper. The third one, &#8220;use capture&#8221;, a Boolean, is optional. If set to true, it stops the event from propagating up and being intercepted by event listeners of the parents of this element.</p>
<p>There is also a &#8220;removeEventListener&#8221; method that does the opposite, and needs the same elements: in other words, yes, you need to pass the same listener function to be able to stop listening to the element. There is no native way to remove all event listeners from an element, although there are <a href="http://stackoverflow.com/questions/9251837/how-to-remove-all-listeners-in-an-element">workarounds</a>.</p>
<h2>Creating and removing elements</h2>
<p>Selecting and modifying elements is great, but if you are creating a visualization, chances are that you want to create elements from scratch.</p>
<p>Let&#8217;s first talk about how this is done in the DOM/javascript, then we&#8217;ll better understand the data joins and d3 angle.</p>
<p>Node objects can exist outside of the hierarchy of the DOM. Actually, they must first be created, <em>then</em> be assigned to a place in the DOM.</p>
<p>Until a Node object is positioned in the DOM, it is not visible. However, it can receive attributes, styles, etc. Likewise, a Node object can be taken from the DOM, and still manipulated.</p>
<p>To create an HTML element, we can use the document.createElement() method:</p>
<pre class="brush: jscript; title: ; notranslate">
var myDiv = document.createElement(&quot;div&quot;);
</pre>
<p>However, that won&#8217;t work for SVG elements &#8211; remember in an earlier example, we used the createElementNS method. This is because SVG elements have to be created in the SVG namespace. d3js old-timers may remember that in the first versions, we had to deal with namespaces when creating elements in d3js as well, but now this all happens under the hood.</p>
<p>Anyway, in vanilla javascript, this is  how it&#8217;s done:</p>
<pre class="brush: jscript; title: ; notranslate">
var svgns = &quot;http://www.w3.org/2000/svg&quot;;
var myRect = document.createElementNS(svgns, &quot;rect&quot;);
</pre>
<p>Warning, because document.createElement(&#8220;rect&#8221;) will not produce anything useful as of this writing.</p>
<p>Once the new Node objects are created, in order to be visible, they should be present in the DOM. Because the DOM is a tree, this means that they have to have a parent.</p>
<pre class="brush: jscript; title: ; notranslate">
svg.appendChild(myRect);
</pre>
<p>Likewise, to remove a Node from the DOM means to sever that relationship with its parent, which is done through the removeChild method:</p>
<pre class="brush: jscript; title: ; notranslate">
svg.removeChild(myRect);
</pre>
<p>Again, even after a Node has been removed, it can still be manipulated, and possibly re inserted at a later time.</p>
<p>Nodes don&#8217;t remove themselves, but you can write:</p>
<pre class="brush: jscript; title: ; notranslate">
myRect.parentNode.removeChild(myRect);
</pre>
<p>In contrast, here is how things are done in d3js.</p>
<p>The append method will add one element to a parent.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.select(&quot;svg&quot;).append(&quot;rect&quot;);
</pre>
<p>The remove method will remove one entire selection object from the DOM.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.select(&quot;svg&quot;).selectAll(&quot;rect&quot;).remove(); // removes all rect elements which are children of the SVG element
</pre>
<p>But the most intriguing and the most characteristic way to <a href="http://jckr.github.io/blog/blog/2011/08/09/d3-adding-stuff-and-oh-understanding-selections/">create new elements</a> in d3js is to use a data join.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.select(&quot;svg&quot;)
  .selectAll(&quot;rect&quot;)
  .data(d3.range(5))
  .enter()
  .append(&quot;rect&quot;);
</pre>
<p>The above snippet of code counts all the rect children of the svg element, and, if there are fewer than 5 &#8211; the number of items in d3.range(5), which is the [0,1,2,3,4] array &#8211; creates as many as needed to get to 5, and binds values to those elements &#8211; the contents of d3.range(5) in order. If there are already 5 rect elements, no new elements will be created, but the data assignment to the existing elements will still occur.</p>
<h2>Data joins, or the lack thereof</h2>
<p>The select / selectAll / data / enter / append sequence can sound exotic to people who learn d3js, but to its practitioners, <a href="http://jckr.github.io/blog/blog/2011/08/09/d3-adding-stuff-and-oh-understanding-selections/">it is its angular stone</a>. Not only is it a quick way to create many elements (which, in vanilla javascript, takes at least 2 steps. Creating them, and assigning them to the right parent), but it also associates them with a data element. That data element can then be accessed each time the element is being manipulated, notably when setting attributes or styles and handling events.</p>
<p>For instance,</p>
<pre class="brush: jscript; title: ; notranslate">
d3.selectAll(&quot;rect&quot;)
  .attr(&quot;x&quot;, function(d) {return 20 * d;});
</pre>
<p>the above code utilizes the fact that each of the rectangle have a different number associated with them to dynamically set an attribute, here position rectangles horizontally.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.selectAll(&quot;rect&quot;)
  .on(&quot;click&quot;, function(d) {console.log(d);})
</pre>
<p>A trick I had mentioned above, but which illustrates this point: here by clicking on each rectangle, we use the data join to show the associated data element.</p>
<p>Having data readily available when manipulating elements in d3js is extremely convenient. After all, data visualization is but the encoding of data through visual attributes. How to perform this operation without the comfort of data joins?</p>
<p>Simply by going back to the dataset itself.</p>
<p>Consider this:</p>
<pre class="brush: jscript; title: ; notranslate">
var data = [];
var i;
for (i = 0; i &lt; 100; i++) {
  data.push({x: Math.random() * 300, y: Math.random() * 300}); // random data points
}

// d3 way
var d3svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;);
d3svg.selectAll(&quot;circle&quot;).data(data).enter().append(&quot;circle&quot;)
  .attr({cx: function(d) {return d.x;}, cy: function(d) {return d.y}, r: 2})
  .style({fill: &quot;#222&quot;, opacity: .5});

// vanilla js way
var svgns = &quot;http://www.w3.org/2000/svg&quot;;
var svg = document.createElementNS(svgns, &quot;svg&quot;);
document.querySelector(&quot;body&quot;).appendChild(svg);
for (i = 0; i &lt; 100; i++) {
  var myCircle = document.createElementNS(svgns, &quot;circle&quot;);
  myCircle.setAttribute(&quot;cx&quot;, data[i].x);
  myCircle.setAttribute(&quot;cy&quot;, data[i].y);
  myCircle.setAttribute(&quot;r&quot;, 2);
  myCircle.style.fill = &quot;#222&quot;;
  myCircle.style.opacity = .5;
  svg.appendChild(myCircle);
}</pre>
<p class="codepen" data-height="268" data-theme-id="0" data-slug-hash="eNzaYg" data-default-tab="result" data-user="jckr">See the Pen <a href="http://codepen.io/jckr/pen/eNzaYg/">eNzaYg</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script>Both codes are equivalent. Vanilla JS is also marginally faster, but d3 code is much more compact. In d3js, the process from dataset to visual is:</p>
<ul>
<li>Joining dataset to container,</li>
<li>Creating as may children to container as needed, [repeat operation for as many levels of hierarchy as needed],</li>
<li>Use d3 selection objects to update the attributes and styles of underlying Node objects from the data items which have been joined to them.</li>
</ul>
<p>    In contrast, in vanilla Javascript, the process is:</p>
<ul>
<li>Loop over the dataset,</li>
<li>create, position and style elements as they are read from the dataset.</li>
</ul>
<p>For visuals with a hierarchy of elements, the dataset may also have a hierarchy and could be nested. In this case, there may be several nested loops. While the d3js code is much more compact, the vanilla approach is actually more simple conceptually. Interestingly, this is the same logic that is at play when creating visualization with Canvas or with frameworks like React.js. To simply loop over an existing, invariant dataset enables you to implement a stateless design and take advantage of immutability. You don&#8217;t have to worry about things such as what happens if your dataset changes or the status that your nodes are in before creating or updating them. By contrast most operations in d3js assume that you are constantly updating a scene on which you are keeping tabs. In order to create elements, you would first need to me mindful on existing elements, what data is currently associated with them, etc. So while the d3js approach is much more convenient and puts the data that you need at your fingertips, the vanilla JS approach is not without merits.</p>
<h2>Loading files</h2>
<p>The first word in data visualization is data, and data comes in files, or database queries. If you&#8217;re plotting anything with more than a few datapoints, chances are you are not storing them as a local variable in your javascript. d3js has a number of nifty functions for that purpose, such as d3.csv or d3.json, which allow to load the files asynchronously. The trick in working with files is that it can take some time, so some operations can take place while we wait for the files to load, but some others really have to wait for the event that the file is loaded to start. I personally almost always use queue.js, also from Mike Bostock, as I typically have to load data from several files and a pure d3 approach would require nesting all those asynchronous file functions. But, for loading a simple csv file, d3js has a really simple syntax:</p>
<pre class="brush: jscript; title: ; notranslate">
d3.csv(&quot;myfile.csv&quot;, function(error, csv) {
  // voila, the contents of the file is now store in the csv variable as an array
})
</pre>
<p>For reference, using queue js, this would look like</p>
<pre class="brush: jscript; title: ; notranslate">
queue()
 .defer(d3.csv, &quot;myFirstFile.csv&quot;)
 .defer(d3.csv, &quot;mySecondFile.csv&quot;)
 .await(ready);

function ready(error, first, second) {
  // the contents of myFirstFile is stored as an array in the variable &quot;first&quot;,
  // and the contents of mySecondFile are in the variable &quot;second&quot;.
}
</pre>
<p>The way to do the equivalent in vanilla Javascript is to use XMLHttpRequest.</p>
<pre class="brush: jscript; title: ; notranslate">
function readFile() {
  var fileLines = this.responseText.split(&quot;\n&quot;);
  var fields = fileLines[0].split(&quot;,&quot;);
  var data = fileLines.slice(1).map(function(d) {
    var item = {};
    d.split(&quot;,&quot;).forEach(function(v, i) {item[fields[i]] = v;})
    return item;
  })

  var request = new XMLHttpRequest();
  request.onload = readFile;
  request.open(&quot;get&quot;, &quot;myFile.csv&quot;, true);
  request.send();
</pre>
<p>The syntax of loading the file isn&#8217;t that cumbersome, and there are tons of nice things that can be done through XMLHttpRequest(), but let&#8217;s admit that d3js/queue.js functions make it much more comfortable to work with csv files.</p>
<h2>Animations</h2>
<p>d3js transitions is one of my favorite part of the library. I understand it&#8217;s also one the things which couldn&#8217;t be done well in protovis and which caused that framework to break. It feels so natural: you define what you want to animate, all that needs to change, the time frame and the easing functions, and you&#8217;re good to go (<a href="http://jckr.github.io/blog/blog/2012/07/16/animations-and-transitions/">see my previous post on animations and transitions</a>). In native javascript, while you can have deep control of animations, it&#8217;s also, unsurprisingly, much more cumbersome. However, CSS3 provides an animation interface which is comparable in flexibility, expressiveness and ease of use to what d3js does. First let&#8217;s get a high-level view of how to do this entirely within JS. Then let&#8217;s get a sense of what CSS can do.</p>
<h4>requestAnimationFrame and animation in JavaScript</h4>
<p>JavaScript has timer functions, window.setTimeout and window.setTimeinterval, which let you run some code after a certain delay or every so often, respectively. But this isn&#8217;t great for animation. Your computer draws to screen a fixed number of times per second. So if you try to redraw the same element several times before in between those times, it&#8217;s a waste of resources! What requestAnimationFrame does is tell your system to wait for the next occasion to draw to execute a given function. Here&#8217;s how it will look in general.</p>
<pre class="brush: jscript; title: ; notranslate">
function animate(duration) {
  var start = Date.now();
  var id = requestAnimationFrame(tick);
  function tick() {
    var time = Date.now();
    if (time - start &lt; duration) {
       id = requestAnimationFrame(tick);
       draw(time - start / duration);
    } else {
      cancelAnimationFrame(id);
    }
  }
  function draw(frame) {
    // do your thing, update attributes, etc.
  }
}
</pre>
<p>&nbsp;</p>
<p>See the Pen <a href="http://codepen.io/jckr/pen/PqzgLV/">PqzgLV</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script></p>
<p>OK so in the part I commented out, you will do the drawing proper. Are you out of the woods yet? well, one great thing about d3js transitions is that they use easing functions, which transform a value between 0 and 1 into another value between 0 and 1 so that the speed of the animation isn&#8217;t necessarily uniform. In my example, you have (time &#8211; start) / duration represents the proportion of animation time that has already elapsed, so that proportion can be further transformed.</p>
<p>So yay we can do everything in plain javascript, but that&#8217;s a lot of things to rewrite from scratch.</p>
<h4>CSS3, animations and transitions</h4>
<p>(This is not intended to be an exhaustive description of animations and transitions, a subject on which whole books have been written. Just to give those who are not familiar with it a small taste).</p>
<p>In CSS3, anything you can do with CSS, you can time and animate. But there are some caveats.</p>
<p>There are two similar concepts to handle appearance change in CSS: <em>animations</em> and <em>transitions</em>. What is the difference?</p>
<ul>
<li>with <em>animations</em>, you describe a @keyframes rule, which is a sequence of states that happen at different points in time in your transition. In each of these events, any style property can be changed. The animation will transform smoothly your elements to go from one state to the next.</li>
<li>in <em>transitions, </em>you specify how changes to certain properties will be timed. For instance, you can say that whenever opacity changes, that change will be staged over a 1s period, as opposed to happen immediately.</li>
</ul>
<p>Both approaches have their uses. CSS3 animations are great to create complex sequences. In d3js, that requires to &#8220;chain transitions&#8221;, which is the more complex aspect of managing them. By contrast, going from one segment of the animation to another is fairly easy to handle in CSS3. Animations, though, require the @keyframes rule to be specified ahead of time in a CSS declaration file. And yes, that can be done programmatically, but it&#8217;s cumbersome and not the intent. The point is: animations work better for complex, pre-designed sequence of events.</p>
<p>Transitions, in contrast, can be set as inline styles, and work fine when one style property is changed dynamically, a scenario which is more likely to happen in interactive visualizations.</p>
<p>Here&#8217;s how they work. Let&#8217;s start with animations.</p>
<p class="codepen" data-height="268" data-theme-id="0" data-slug-hash="vOKKYN" data-default-tab="result" data-user="jckr">See the Pen <a href="http://codepen.io/jckr/pen/vOKKYN/">vOKKYN</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script>Note: as of this writing, animation-related CSS properties have to be vendor prefixed, i.e. you have to repeat writing these rules for the different browsers. Here&#8217;s a transition in action.</p>
<p class="codepen" data-height="268" data-theme-id="0" data-slug-hash="xGOqOR" data-default-tab="result" data-user="jckr">See the Pen <a href="http://codepen.io/jckr/pen/xGOqOR/">xGOqOR</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p>For transition, you specify one style property to &#8220;listen&#8221; to, and say how changes to that property will be timed, using the transition: name of property + settings. (in the above example: transition: transform ease 2s means that whenever the &#8220;transform&#8221; style of that element changes, this will happen over a 2s period with an easing function). <script src="//assets.codepen.io/assets/embed/ei.js" async=""></script></p>
<p>One big caveat for both CSS animations and transitions is that they are limited to <em>style properties</em>. In HTML elements this is fine because everything that is related to their appearance is effectively handled by style: position, size, colors, etc. For SVG, however, color or opacity are styles, like in HTML, but positions, sizes and shapes are <em>attributes</em>, and can&#8217;t be directly controlled by CSS. There is a workaround for positions and sizes, which is to use the transform style property.</p>
<p>But wait: isn&#8217;t transform an SVG attribute as well? that&#8217;s right. And that&#8217;s where it can get <em>really </em>confusing. Many SVG elements are positioned through x and y properties (attributes). They can also have a transform property which is additive to that. For instance, if I have a &lt;rect&gt; which has an x property of 100 and a transform set at &#8220;translate(100)&#8221;, it will be positioned 200px right of its point of origin. But on top of that, SVG elements can have a transform <em>style </em>which affects pretty much the same things (position, scales, rotation&#8230;) but which has a slightly different syntax (&#8220;translate(100)&#8221;, for instance, wouldn&#8217;t work, you&#8217;d have to write &#8220;translateX(100px)&#8221;). What&#8217;s more, the transform set in the style doesn&#8217;t add to the one set in the properties, but it overrides it. If we add a &#8220;transform: translateX(50px)&#8221; to our &lt;rect&gt;, it will be positioned at 150px, not 200px or 250px. Another potential headache is that some SVG elements cannot support transform styles.<br />
While any of these properties can be accessed programmatically, managing their potential conflicts and overlaps can be difficult. In the transition example above, I have used the transform/translateX syntax.</p>
<p>That said, a lot of awesome stuff can be done in CSS only. For scripted animations, the animation in pure CSS is definitely more powerful and flexible than the d3js equivalent, however, when dealing with dynamically changing data, while you can definitely handle most things through CSS transitions, you&#8217;ll appreciate the comfort of d3js style transitions.</p>
<p class="codepen" data-height="268" data-theme-id="0" data-slug-hash="GJqrLO" data-default-tab="result" data-user="jckr">See the Pen <a href="http://codepen.io/jckr/pen/GJqrLO/">GJqrLO</a> by Jerome Cukier (<a href="http://codepen.io/jckr">@jckr</a>) on <a href="http://codepen.io/">CodePen</a>.</p>
<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script></p>
<p>Now a common transformation handled by d3js transitions is to transform the shape of path shapes. This is impossible through CSS animations/transitions, because the shape of the path &#8211; the &#8220;d&#8221; &#8211; is definitely not a style property. And sure, we can use a purely programmatic approach with requestAnimationFrame but is there a more high level way?<br />
It turns out there actually is &#8211; the animation element of SVG, or SMIL. Through SMIL, everything SVG can be animated with an interface, this includes moving an object along a path, which I wouldn&#8217;t know how to do on top of my head in d3js. Here is an extensive <a href="https://css-tricks.com/guide-svg-animations-smil/">explanation of how this works and what can be done</a>.</p>
<h2>Data processing, scales, maps and layouts</h2>
<p>For the end of the article let&#8217;s talk about all of which could technically be done without d3js, but in a much, much less convenient way. Therefore, I won&#8217;t be discussing alternatives with vanilla Javascript, which would be very work intensive and not necessarily inventive.</p>
<h4>Array functions and data processing</h4>
<p>d3js comes with a number of array functions. Some are here for convenience, such as d3.min or d3.max which can easily be replaced by using the native reduce method of arrays. When comparing only two variables, d3.max([a, b]) is not much more convenient than Math.max(a,b) or a &gt; b ? a : b.</p>
<p>Likewise, d3js has many statistical functions, which saves you the trouble to implement them yourself if you need them, such as d3.quantile. There are other libraries who do that, but they&#8217;re here and it&#8217;s really not useful to recode that from scratch.</p>
<p>d3js comes with shims for maps and sets, which will be supported by ES6. By now, there are transpilers which can let you use ES6 data structures. But it&#8217;s nice to have them.</p>
<p>In my experience, d3js most useful tool in terms of data processing is the d3.nest function, which can transform an array of objects into a nested object. (I wrote <a href="http://jckr.github.io/blog/blog/2012/05/28/manipulating-data-like-a-boss-with-d3/">this article</a> about them).  Underscore has something similar. While you can definitely getting a dataset of any shape and size by parsing an array and performing any grouping or operations manually, this is not only very tedious but <strong>also extremely error prone.</strong></p>
<h4>Scales</h4>
<p>Scales are one superb feature of d3js. They are simple to understand, yet very versatile and convenient. Oftentimes, d3 scales, especially the linear ones, are a replacement for linear algebra.</p>
<pre class="brush: jscript; title: ; notranslate">
d3.scale.linear().range([100, 500]).domain([0, 24])(14);
((14 - 0) / (24 - 0)) * (500 - 100) + 100; // those two are equivalent (333.33...)
</pre>
<p>but changing the domain or the range of a scale is much safer using the scale than adhoc formulas. Add to this scale goodness such as the ticks() method or nice() to round the domain, and you get something really powerful.</p>
<p>So, of course it is possible (and straightforward, even) to replace the scales but that would be missing out one of the best features of d3js.</p>
<h4>Maps</h4>
<p>d3js comes with a full arsenal of functions and methods to handle geographic projections, ie: the transformation of longitude/latitude coordinates into x,y positions on screen. Those come in two main groups, projections proper that turn an array of two values (longitude, latitude) into an array of two values (x, y). There are also paths functions that are used to trace polygons, such as countries, from specially formatted geographic files (geoJSON, topoJSON).</p>
<p>The mercator projection may be straightforward to implement, But others are much less so. The degree of comfort that d3js provides when visualizing geographical data is really impressive.</p>
<h4>Layouts</h4>
<p>d3js layouts, that is special visual arrangements of data, were in my opinion one of the key drivers of protovis (where they originated) then d3js adoption. Through layouts, it became simple to create, with a few line of codes, complex constructions like treemaps or force-directed networks. Some layouts, like the pie chart or the dendogram, are here for convenience and could be emulated. Others, and most of all the force layout, are remarkably implemented, efficient and versatile. While they are called different names in d3js, geometry functions such as voronoi tessellation or convex hulls are similar functionally and there is little incentive in reproducing what they do in plain javascript.</p>
<h1>Should I stop using d3?</h1>
<p>d3js is definitely the most advanced javascript visualization library. The point of this article is not to get you to stop using it, but rather, to have a critical thinking in your code. Even with the best hammer, not everything is a nail.</p>
<p>To parse the DOM, manipulate classes and listen to events, you probably don&#8217;t need a library. The context of your code may make it more convenient to use d3 or jQuery or something else, but it&#8217;s useful to consider alternatives.<br />
The concept of the data join unlocks a lot of possibilities in d3js. A good understanding of data join would lead you to implement your visualization much faster, using more concise code and replicable logic. It also makes trouble shooting easier. Data joins are especially useful if you have a dataset which is structured like your visualization should be, or if you plan to have interaction with your visualization that requires quick access with the underlying data. However, data joins are not necessary in d3js, or in visualization in general. In many cases, it&#8217;s actually perfectly sensible to parse a dataset and create a visual representation in one fell swoop, without attaching the data to its representation or overly worrying about updating.</p>
<p>Assuming you have d3js loaded, nothing prevents you from creating elements using d3js append methods instead of vanilla javascript. Or to listen to events using addEventListener rather than with d3js on method. It&#8217;s totally ok to mix and match.</p>
<p>Like data joins, transitions are a very powerful component of d3js, and, once you&#8217;re comfortable with them, they are very expressive. There are other animation frameworks available though, which can be better adapted to the task at hand.<br />
Scale, maps, layouts and geometries are extremely helpful features however and I can think of no good reason to reimplement them.</p>
<h2>Credit where it&#8217;s due</h2>
<p>To write this I drew inspiration from many articles and I will try to list them all here.<br />
The spark that led me to write was Lea Verou&#8217;s article <a href="http://lea.verou.me/2015/04/jquery-considered-harmful/">jQuery considered harmful</a>, as well as articles she cites (<a href="http://youmightnotneedjquery.com/">you might not need jQuery</a>, <a href="http://blog.garstasio.com/you-dont-need-jquery/">you don&#8217;t need jQuery</a>, <a href="http://www.sitepoint.com/do-you-really-need-jquery/">Do you really need jQuery?</a>, <a href="http://tutorialzine.com/2014/06/10-tips-for-writing-javascript-without-jquery/">10 tips for writing JavaScript without jQuery</a>).</p>
<p>Most of the information I used especially in the beginning of the article comes more or less directly from <a href="https://developer.mozilla.org/en-US/">MDN documentation</a>, and direct experimentation. For CSS and animation, I found the articles of Chris Coyier (such as <a href="https://css-tricks.com/animating-svg-css/">this one</a> or <a href="https://css-tricks.com/animate-to-an-inline-style/">this one</a>) and Sara Soueidan (<a href="https://css-tricks.com/guide-svg-animations-smil/">here</a>) on <a href="https://css-tricks.com/">CSS Tricks</a> to be extremely helpful. Those are definitely among the first resources to check out to go deeper on the subject. Sara was also <a href="http://blogs.adobe.com/dreamweaver/2015/04/an-introduction-to-graphical-effects-in-css.html">the inspiration</a> behind <a href="http://jckr.github.io/blog/blog/2015/05/05/blending-mode-and-svg/">my previous post</a>, so thanks to her again!</p>
<p>Finally, I&#8217;ve read <a href="http://blog.webkid.io/replacing-jquery-with-d3/">Replacing jQuery with d3</a> with great interest (like <a href="http://snips.net/blog/posts/2014/01-10-fast-interactive_prototyping_with_d3_js.html">Fast interactive prototyping with d3js and sketch</a> about a year ago). It may seem that what I write goes in the opposite direction, but we&#8217;re really talking about the same thing -that there are many ways to power front ends and that it&#8217;s important to maintain awareness of alternative methods.</p>
]]></content:encoded>
			<wfw:commentRss>/2015/05/19/you-may-not-need-d3/feed/</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>Blending mode and SVG</title>
		<link>/2015/05/05/blending-mode-and-svg/</link>
		<comments>/2015/05/05/blending-mode-and-svg/#comments</comments>
		<pubDate>Tue, 05 May 2015 21:56:46 +0000</pubDate>
		<dc:creator><![CDATA[jerome]]></dc:creator>
				<category><![CDATA[d3]]></category>
		<category><![CDATA[tips]]></category>

		<guid isPermaLink="false">http://jckr.github.io/blog/?p=1661</guid>
		<description><![CDATA[One great thing about canvas is that it&#8217;s super easy to change the compositing mode. And sure, you can do all sorts of fancy things with that, but my basic usage of that is to control how opacity is handled. By default, in svg, if you add one element which is not fully opaque on <a class="read-more" href="/2015/05/05/blending-mode-and-svg/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
				<content:encoded><![CDATA[<p>One great thing about canvas is that it&#8217;s super easy to change the compositing mode. And sure, you can do all sorts of fancy things with that, but my basic usage of that is to control how opacity is handled. By default, in svg, if you add one element which is not fully opaque on top of another, the top element makes the bottom element darker. By contrast, in canvas you can have access to globalCompositeOperation that let you change how new elements drawn on top of an existing image are handled, or in processing, you have blendMode, etc.</p>
<p>In SVG, there are a variety of operations accessible through filters: see <a href="http://apike.ca/prog_svg_filters.html">http://apike.ca/prog_svg_filters.html</a> for an excellent overview. I must admit that I find filters a bit intimidating to set up and need to always go back to a reference to achieve anything.</p>
<p>I was reading this article this morning on CSS graphical effects <a href="http://blogs.adobe.com/dreamweaver/2015/04/an-introduction-to-graphical-effects-in-css.html">http://blogs.adobe.com/dreamweaver/2015/04/an-introduction-to-graphical-effects-in-css.html</a> thinking, wouldn&#8217;t that be nice if we could do control compositing in SVG.</p>
<p>It turns out that we can! By manipulating the &#8220;mix-blend-mode&#8221; style attribute of any graphical element, we can achieve one of 16 blending modes (which is actually more than canvas or processing!)<br />
Here&#8217;s a demo that shows what can be done. This is an adaptation of <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode">this</a> example.</p>
<p>So, through the use of the right blending mode, opacity can be used to make the resulting image lighter (among many other things).</p>
<p><iframe src="http://jckr.github.io/blog/stuff/blendmode/blendmode.html" width="600" height="750" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe></p>
]]></content:encoded>
			<wfw:commentRss>/2015/05/05/blending-mode-and-svg/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
	</channel>
</rss>
